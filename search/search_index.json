{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer Platform Install and build Building-taiyuechain Installing TaiPublicChain Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows Developers' Guide Staking-Guide Interface Documentation Command Line Options Command-Line-Options Management API Management-API JSON RPC API RPC-API Staking-ABI Usage Managing Accounts Managing-your-accounts Mining Mining","title":"TaiUnionChainEN"},{"location":"#developer-platform","text":"","title":"Developer Platform"},{"location":"#install-and-build","text":"Building-taiyuechain","title":"Install and build"},{"location":"#installing-taipublicchain","text":"Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows","title":"Installing TaiPublicChain"},{"location":"#developers-guide","text":"Staking-Guide","title":"Developers' Guide"},{"location":"#interface-documentation","text":"","title":"Interface Documentation"},{"location":"#command-line-options","text":"Command-Line-Options","title":"Command Line Options"},{"location":"#management-api","text":"Management-API","title":"Management API"},{"location":"#json-rpc-api","text":"RPC-API Staking-ABI","title":"JSON RPC API"},{"location":"#usage","text":"","title":"Usage"},{"location":"#managing-accounts","text":"Managing-your-accounts","title":"Managing Accounts"},{"location":"#mining","text":"Mining","title":"Mining"},{"location":"Building-taiyuechain/","text":"Install and build Building-taiyuechain Installing TaiPublicChain Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows Developers' Guide Staking-Guide","title":"Install and build"},{"location":"Building-taiyuechain/#install-and-build","text":"Building-taiyuechain","title":"Install and build"},{"location":"Building-taiyuechain/#installing-taipublicchain","text":"Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows","title":"Installing TaiPublicChain"},{"location":"Building-taiyuechain/#developers-guide","text":"Staking-Guide","title":"Developers' Guide"},{"location":"Home/","text":"Welcome to the TaiYuechain Docs!","title":"Home"},{"location":"InterfaceDocumentation/","text":"Command Line Options Command-Line-Options Management API Management-API JSON RPC API RPC-API Staking-ABI","title":"Interface Documentation"},{"location":"InterfaceDocumentation/#command-line-options","text":"Command-Line-Options","title":"Command Line Options"},{"location":"InterfaceDocumentation/#management-api","text":"Management-API","title":"Management API"},{"location":"InterfaceDocumentation/#json-rpc-api","text":"RPC-API Staking-ABI","title":"JSON RPC API"},{"location":"TaiYueChain/","text":"Developer Platform Install and build Building-taiyuechain Installing TaiPublicChain Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows Developers' Guide Staking-Guide Interface Documentation Command Line Options Command-Line-Options Management API Management-API JSON RPC API RPC-API Staking-ABI Usage Managing Accounts Managing-your-accounts Mining Mining","title":"TaiPublicChainZN"},{"location":"TaiYueChain/#developer-platform","text":"","title":"Developer Platform"},{"location":"TaiYueChain/#install-and-build","text":"Building-taiyuechain","title":"Install and build"},{"location":"TaiYueChain/#installing-taipublicchain","text":"Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows","title":"Installing TaiPublicChain"},{"location":"TaiYueChain/#developers-guide","text":"Staking-Guide","title":"Developers' Guide"},{"location":"TaiYueChain/#interface-documentation","text":"","title":"Interface Documentation"},{"location":"TaiYueChain/#command-line-options","text":"Command-Line-Options","title":"Command Line Options"},{"location":"TaiYueChain/#management-api","text":"Management-API","title":"Management API"},{"location":"TaiYueChain/#json-rpc-api","text":"RPC-API Staking-ABI","title":"JSON RPC API"},{"location":"TaiYueChain/#usage","text":"","title":"Usage"},{"location":"TaiYueChain/#managing-accounts","text":"Managing-your-accounts","title":"Managing Accounts"},{"location":"TaiYueChain/#mining","text":"Mining","title":"Mining"},{"location":"Usage/","text":"Managing Accounts Managing-your-accounts Mining Mining","title":"Usage"},{"location":"Usage/#managing-accounts","text":"Managing-your-accounts","title":"Managing Accounts"},{"location":"Usage/#mining","text":"Mining","title":"Mining"},{"location":"index4/","text":"Developer Platform Install and build Building-taiyuechain Installing TaiPublicChain Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows Developers' Guide Staking-Guide Interface Documentation Command Line Options Command-Line-Options Management API Management-API JSON RPC API RPC-API Staking-ABI Usage Managing Accounts Managing-your-accounts Mining Mining","title":"TaiUnionChainZN"},{"location":"index4/#developer-platform","text":"","title":"Developer Platform"},{"location":"index4/#install-and-build","text":"Building-taiyuechain","title":"Install and build"},{"location":"index4/#installing-taipublicchain","text":"Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows","title":"Installing TaiPublicChain"},{"location":"index4/#developers-guide","text":"Staking-Guide","title":"Developers' Guide"},{"location":"index4/#interface-documentation","text":"","title":"Interface Documentation"},{"location":"index4/#command-line-options","text":"Command-Line-Options","title":"Command Line Options"},{"location":"index4/#management-api","text":"Management-API","title":"Management API"},{"location":"index4/#json-rpc-api","text":"RPC-API Staking-ABI","title":"JSON RPC API"},{"location":"index4/#usage","text":"","title":"Usage"},{"location":"index4/#managing-accounts","text":"Managing-your-accounts","title":"Managing Accounts"},{"location":"index4/#mining","text":"Mining","title":"Mining"},{"location":"index5/","text":"Developer Platform Install and build Building-taiyuechain Installing TaiPublicChain Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows Developers' Guide Staking-Guide Interface Documentation Command Line Options Command-Line-Options Management API Management-API JSON RPC API RPC-API Staking-ABI Usage Managing Accounts Managing-your-accounts Mining Mining","title":"Developer Platform"},{"location":"index5/#developer-platform","text":"","title":"Developer Platform"},{"location":"index5/#install-and-build","text":"Building-taiyuechain","title":"Install and build"},{"location":"index5/#installing-taipublicchain","text":"Installation-Instructions-for-Mac-OS-X Installation-Instructions-for-Ubuntu Installation-Instructions-for-Centos Installation-Instructions-for-Windows","title":"Installing TaiPublicChain"},{"location":"index5/#developers-guide","text":"Staking-Guide","title":"Developers' Guide"},{"location":"index5/#interface-documentation","text":"","title":"Interface Documentation"},{"location":"index5/#command-line-options","text":"Command-Line-Options","title":"Command Line Options"},{"location":"index5/#management-api","text":"Management-API","title":"Management API"},{"location":"index5/#json-rpc-api","text":"RPC-API Staking-ABI","title":"JSON RPC API"},{"location":"index5/#usage","text":"","title":"Usage"},{"location":"index5/#managing-accounts","text":"Managing-your-accounts","title":"Managing Accounts"},{"location":"index5/#mining","text":"Mining","title":"Mining"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/","text":"Contents - JSON RPC API - JavaScript API - JSON-RPC Endpoint - Go - JSON-RPC support - The default block parameter - Curl Examples Explained - JSON-RPC methods - JSON RPC API Reference - web3_clientVersion - Parameters - Returns - Example - web3_sha3 - Parameters - Returns - Example - net_version - Parameters - Returns - Example - net_listening - Parameters - Returns - Example - net_peerCount - Parameters - Returns - Example - tai_protocolVersion - Parameters - Returns - Example - tai_syncing - Parameters - Returns - Example - tai_coinbase - Parameters - Returns - Example - tai_mining - Parameters - Returns - Example - tai_hashrate - Parameters - Returns - Example - tai_gasPrice - Parameters - Returns - Example - tai_accounts - Parameters - Returns - Example - tai_blockNumber - Parameters - Returns - Example - tai_getBalance - Parameters - Returns - Example - tai_getStorageAt - Parameters - Returns - Example - tai_getTransactionCount - Parameters - Returns - Example - tai_getBlockTransactionCountByHash - Parameters - Returns - Example - tai_getBlockTransactionCountByNumber - Parameters - Returns - Example - tai_getCode - Parameters - Returns - Example - tai_sign - Parameters - Returns - Example - tai_sendTransaction - Parameters - Returns - Example - tai_sendRawTransaction - Parameters - Returns - Example - tai_call - Parameters - Returns - Example - tai_estimateGas - Parameters - Returns - Example - tai_getBlockByHash - Parameters - Returns - Example - tai_getBlockByNumber - Parameters - Returns - Example - tai_getTransactionByHash - Parameters - Returns - Example - tai_getTransactionByBlockHashAndIndex - Parameters - Returns - Example - tai_getTransactionByBlockNumberAndIndex - Parameters - Returns - Example - tai_getTransactionReceipt - Parameters - Returns - Example - tai_newFilter - A note on specifying topic filters: - Parameters - Returns - Example - tai_newBlockFilter - Parameters - Returns - Example - tai_newPendingTransactionFilter - Parameters - Returns - Example - tai_uninstallFilter - Parameters - Returns - Example - tai_getFilterChanges - Parameters - Returns - Example - tai_getFilterLogs - Parameters - Returns - Example - tai_getLogs - Parameters - Returns - Example - tai_getWork - Parameters - Returns - Example - tai_submitWork - Parameters - Returns - Example - tai_submitHashrate - Parameters - Returns - Example - tai_committeeNumber - Parameters - Returns - Example - tai_fruitNumber - Parameters - Returns - Example - tai_rewardSnailBlock - Parameters - Returns - Example - tai_snailBlockNumber - Parameters - Returns - Example - tai_getCommittee - Parameters - Returns - Example - tai_getFruitByNumber - Parameters - Returns - Example - tai_getFruitByHash - Parameters - Returns - Example - tai_getRewardBlock - Parameters - Returns - Example - tai_getSnailBlockByNumber - Parameters - Returns - Example - tai_getSnailBlockByHash - Parameters - Returns - Example - tai_getDataset - Parameters - Returns - Example - tai_getSnailRewardContent - Parameters - Returns - Example JSON RPC API JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON ( RFC 4627 ) as data format. Gtai has experimental pub/sub support. See this page for more information. JavaScript API To talk to an truechain node from inside a JavaScript application use the web3.js library, which gives a convenient interface for the RPC methods. JSON-RPC Endpoint Default JSON-RPC endpoints: http://localhost:8545 Go You can start the HTTP JSON-RPC with the --rpc flag gtai --rpc change the default port (8545) and listing address (localhost) with: gtai --rpc --rpcaddr <ip> --rpcport <portnumber> If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail: gtai --rpc --rpccorsdomain \"http://localhost:3000\" JSON-RPC support JSON-RPC 2.0/ Batch requests/ HTTP/ IPC/ WS The default block parameter The following methods have an extra default block parameter: tai_getBalance tai_getCode tai_getTransactionCount tai_getStorageAt tai_call When requests are made that act on the state of truechain, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX String - an integer block number String \"earliest\" for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions Curl Examples Explained The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:8545 JSON-RPC methods tai eth web3 net protocolVersion protocolVersion clientVersion version syncing syncing sha3 peerCount coinbase coinbase listening mining mining hashrate hashrate gasPrice gasPrice accounts accounts blockNumber blockNumber getBalance getBalance getStorageAt getStorageAt getTransactionCount getTransactionCount getBlockTransactionCountByHash getBlockTransactionCountByHash getBlockTransactionCountByNumber getBlockTransactionCountByNumber getCode getCode sign sign sendTransaction sendTransaction sendRawTransaction sendRawTransaction sendTrueRawTransaction - call call estimateGas estimateGas getBlockByHash getBlockByHash getBlockByNumber getBlockByNumber getTransactionByHash getTransactionByHash getTransactionByBlockHashAndIndex getTransactionByBlockHashAndIndex getTransactionByBlockNumberAndIndex getTransactionByBlockNumberAndIndex getTransactionReceipt getTransactionReceipt newFilter newFilter newBlockFilter newBlockFilter newPendingTransactionFilter newPendingTransactionFilter uninstallFilter uninstallFilter getFilterChanges getFilterChanges getFilterLogs getFilterLogs getLogs getLogs getWork getWork submitWork submitWork submitHashrate submitHashrate committeeNumber - fruitNumber - rewardSnailBlock - snailBlockNumber - getCommittee - getFruitByNumber - getFruitByHash - getRewardBlock - getSnailBlockByNumber - getSnailBlockByHash - getDataset - getSnailRewardContent - JSON RPC API Reference web3 web3_clientVersion Returns the current client version. Parameters none Returns String - The current client version. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\": \"Gtai/v1.1.0-unstable-d4c05e98/linux-amd64/go1.10\" } web3_sha3 Returns Keccak-256 ( not the standardized SHA3-256) of the given data. Parameters DATA - the data to convert into a SHA3 hash. Example Parameters params: [ \"0x68656c6c6f20776f726c64\" ] Returns DATA - The SHA3 result of the given string. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" } net net_version Returns the current network id. Parameters none Returns String - The current network id. - \"19330\" : Truechain Mainnet - \"18928\" : Testnet - \"100\" : Devnet Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"19330\" } net_listening Returns true if client is actively listening for network connections. Parameters none Returns Boolean - true when listening, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\":true } net_peerCount Returns number of peers currently connected to the client. Parameters none Returns QUANTITY - integer of the number of connected peers. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":74}' // Result { \"id\":74, \"jsonrpc\": \"2.0\", \"result\": \"0x2\" // 2 } tai tai_protocolVersion Returns the current truechain protocol version. Parameters none Returns String - The current truechain protocol version. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_protocolVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"0x40\" } tai_syncing Returns an object with data about the sync status or false . Parameters none Returns Object|Boolean , An object with sync status data or FALSE , when not syncing: - currentFastBlock : QUANTITY -current block number(fastchain) - currentSnailBlock : QUANTITY -current block number(snailchain) - highestFastBlock : QUANTITY - already highest block number(fastchain) - highestSnailBlock : QUANTITY -already highest block number(snailchain) - knownStates : String -already know state - pulledStates : String -already complete state - startingFastBlock : QUANTITY -start sync block number(fastchain) - startingSnailBlock : QUANTITY -start sync block number(snailchain) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_syncing\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"currentFastBlock\": \"0x2e9a\", \"currentSnailBlock\": \"0xab\", \"highestFastBlock\": \"0x3a3d2\", \"highestSnailBlock\": \"0xab7\", \"knownStates\": \"0x0\", \"pulledStates\": \"0x0\", \"startingFastBlock\": \"0x2e98\", \"startingSnailBlock\": \"0x0\" } } // Or when not syncing { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": false } tai_coinbase Returns the client coinbase address. Parameters none Returns DATA , 20 bytes - the current coinbase address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_coinbase\",\"params\":[],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0xc94770007dda54cF92009BFF0dE90c06F603a09f\" } tai_mining Returns true if client is actively mining new blocks. Parameters none Returns Boolean - returns true of the client is mining, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_mining\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": true } tai_hashrate Returns the number of hashes per second that the node is mining with. Parameters none Returns QUANTITY - number of hashes per second. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_hashrate\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": \"0x38a\" } tai_gasPrice Returns the current price per gas in wei. Parameters none Returns QUANTITY - integer of the current gas price in wei. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_gasPrice\",\"params\":[],\"id\":73}' // Result { \"id\":73, \"jsonrpc\": \"2.0\", \"result\": \"0xf4240\" // 1000000 } tai_accounts Returns a list of addresses owned by client. Parameters none Returns Array of DATA , 20 Bytes - addresses owned by the client. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_accounts\",\"params\":[],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\"] } tai_blockNumber Returns the number of most recent block. Parameters none Returns QUANTITY - integer of the current block number the client is on. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_blockNumber\",\"params\":[],\"id\":1}' // Result { \"id\":83, \"jsonrpc\": \"2.0\", \"result\": \"0xc94\" // 1207 } tai_getBalance Returns the balance of the account of given address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns QUANTITY - integer of the current balance in wei. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 } tai_getStorageAt Returns the value from a storage position at a given address. Parameters DATA , 20 Bytes - address of the storage. QUANTITY - integer of the position in the storage. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Returns DATA - the value at this storage position. Example Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by address 0x391694e7e0b0cce554cb130d723a9d27458f9298 . contract Storage { uint pos0; mapping(address => uint) pos1; function Storage() { pos0 = 1234; pos1[msg.sender] = 5678; } } Retrieving the value of pos0 is straight forward: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"tai_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x00000000000000000000000000000000000000000000000000000000000004d2\"} Retrieving an element of the map is harder. The position of an element in the map is calculated with: keccack(LeftPad32(key, 0), LeftPad32(map position, 0)) This means to retrieve the storage on pos1[\"0x391694e7e0b0cce554cb130d723a9d27458f9298\"] we need to calculate the position with: keccak(decodeHex(\"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\")) The gtai console which comes with the web3 library can be used to make the calculation: > var key = \"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\" undefined > web3.sha3(key, {\"encoding\": \"hex\"}) \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\" Now to fetch the storage: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"tai_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x000000000000000000000000000000000000000000000000000000000000162e\"} tai_getTransactionCount Returns the number of transactions sent from an address. Parameters DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' // state at the latest block ] Returns QUANTITY - integer of the number of transactions send from this address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionCount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\",\"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } tai_getBlockTransactionCountByHash Returns the number of transactions in a block from a block matching the given block hash. Parameters DATA , 32 Bytes - hash of a block. Example Parameters params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ] Returns QUANTITY - integer of the number of transactions in this block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockTransactionCountByHash\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc\" // 11 } tai_getBlockTransactionCountByNumber Returns the number of transactions in a block matching the given block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Example Parameters params: [ '0xe8', // 232 ] Returns QUANTITY - integer of the number of transactions in this block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockTransactionCountByNumber\",\"params\":[\"0xe8\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa\" // 10 } tai_getCode Returns code at a given address. Parameters DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter . Example Parameters params: [ '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', '0x2' // 2 ] Returns DATA - the code from the given address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getCode\",\"params\":[\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x2\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\" } tai_sign The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked. Parameters account, message DATA , 20 Bytes - address. DATA , N Bytes - message to sign. Returns DATA : Signature Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sign\",\"params\":[\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" } An example how to use solidity ecrecover to verify the signature calculated with tai_sign can be found here . The contract is deployed on the testnet Ropsten and Rinkeby. tai_sendTransaction Creates new message call transaction or a contract creation, if the data field contains code. Parameters Object - The transaction object from : DATA , 20 Bytes - The address the transaction is send from. to : DATA , 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas : QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice : QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce : QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. Example Parameters params: [{ \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\", \"gas\": \"0x76c0\", // 30400 \"gasPrice\": \"0x9184e72a000\", // 10000000000000 \"value\": \"0x9184e72a\", // 2441406250 \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\" }] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" } tai_sendRawTransaction Creates new message call transaction or a contract creation for signed transactions. Parameters DATA , The signed transaction data. Example Parameters params: [\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" } tai_sendTrueRawTransaction When transaction contain payer or fee,Creates new message call transaction or a contract creation for signed transactions. Parameters DATA , The signed transaction data. Example Parameters params: [\"0xf8c60183989680834c4b4094bea78fea68dba84363d0f9b79219ddf5991ccb2a880de0b6b3a76400008094cfb7ec3ac64a3afde043a5b32212d0b9c25b5d808081eba07cc4b8300a8ab6a7d6aee713f6dc61311848bf827794c370873ca334e7cc2cc1a05cd365ffc46cada820911e3c11123e36245ed1cec7943038632715a89a421b0281eca037d6e60016bd70371fd45a2fadd63f8824b34331f2cb5f7fe69f04df7f6d9caea04e05dda8cffa3e453aa474f955eef97fe63e9c9721860aaea379a0ace111fd16\"] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendTrueRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc7509ef7672e1c1d59cec2854d3d074d442984382bd03c665c2e82ebfdacc25e\" } tai_call Executes a new message call immediately without creating a transaction on the block chain. Parameters Object - The transaction call object from : DATA , 20 Bytes - (optional) The address the transaction is sent from. to : DATA , 20 Bytes - The address the transaction is directed to. gas : QUANTITY - (optional) Integer of the gas provided for the transaction execution. tai_call consumes zero gas, but this parameter may be needed by some executions. gasPrice : QUANTITY - (optional) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - (optional) Hash of the method signature and encoded parameters QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Returns DATA - the return value of executed contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_call\",\"params\":[{see tai_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x\" } tai_estimateGas Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. Parameters See tai_call parameters, expect that all properties are optional. If no gas limit is specified gtai uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit. Returns QUANTITY - the amount of gas used. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_estimateGas\",\"params\":[{see tai_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x5208\" // 21000 } tai_getBlockByHash Returns information about a block by hash. Parameters DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. Example Parameters params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ] Returns Object - A block object, or null when no block was found: SnailHash : DATA , 32 Bytes - hash of the snail block. SnailNumber : QUANTITY - the snail block number. committeeRoot : DATA , 32 Bytes - hash of the committtee. extraData : DATA - the \"extra data\" field of this block. gasLimit : QUANTITY - the maximum gas allowed in this block. gasUsed : QUANTITY - the total used gas by all transactions in this block. hash : DATA , 32 Bytes - hash of the block. null when its pending block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. maker : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. number : QUANTITY - the block number. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the block. signs : Array , committee signs. fastHash : DATA , 32 Bytes - hash of the fast block. fastHeight : QUANTITY - the fast block number. result : QUANTITY - the vote. sign : DATA , 32 Bytes - committee sign hash. size : QUANTITY - integer the size of this block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the block. switchInfos : Array , committee member switch. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockByHash\",\"params\":[\"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d15273312\", true],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { {\"SnailHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"SnailNumber\":\"0x0\", \"committeeRoot\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"extraData\":\"0x\", \"gasLimit\":\"0xb71b00\",\"gasUsed\":\"0x0\", \"hash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"maker\":\"0x49fc88c2576b4f015cf75dae80e87a815d832888\", \"number\":\"0xab4\", \"parentHash\":\"0x0832d972f5b16ddefc3de154cc0a5a4ea16be2991be19bd740ae3486a83ff59f\", \"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", \"signs\":[{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"fastHeight\":\"0xab4\",\"result\":1, \"sign\":\"0x7a07be32cce585b6d74e6134022c973b6433dcb87447ec456712f5d3b40b8907403ea24c81309aa090e7469fc761372de2e2d32beddf0031eed1aa557185cbc101\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x4f1033692e2f354409002ff0ce9eb20d4edb676f6c02dc58223c9d2d15eebcaf4071c2efc630a44d78865da714ae694cd690d4b0d02b393d64ca377c63594a6e01\"},{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0xc8303a5c76fb70e834b63e70180af9720ac09eda59327a0e6be3ab85fcfcbb9b40434ae7dcd23df13fe6a55c1967d29de7db5c5e545674b6849a1a4eabb59b4b00\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x041df0a05407cb302695babfeff03d669d300e76cc2d33305512dc0859aeb4dc47b68065b5d62bd88a6b60e3993ed07ae0a64223681084c5c958cdd2041f42a100\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x8b8c97a4155c2b687b0eb90e1a716ede85c1b32ec7b164c0fa721f1b18ada4c41bc46373419d625ef8f0368b123bf86a60b07c168ebb5b97de4b9095847fad5001\"}],\"size\":\"0x40a\",\"stateRoot\":\"0x5c7127948504801c7db0ef17df87950b471a94d6f5332d39ceff41298f3f6b74\", \"switchInfos\":[],\"timestamp\":\"0x5ce25206\",\"transactions\":[], \"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"} } } tai_getBlockByNumber Returns information about a block by block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. Example Parameters params: [ '0x1b4', // 436 true ] Returns See tai_getBlockByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockByNumber\",\"params\":[\"0x1b4\", true],\"id\":1}' Result see tai_getBlockByHash tai_getTransactionByHash Returns the information about a transaction requested by transaction hash. Parameters DATA , 32 Bytes - hash of a transaction Example Parameters params: [ \"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\" ] Returns Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. null when its pending. blockNumber : QUANTITY - block number where this transaction was in. null when its pending. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Wei. hash : DATA , 32 Bytes - hash of the transaction. input : DATA - the data send along with the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. value : QUANTITY - value transferred in Wei. v : QUANTITY - ECDSA recovery id r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s payer : DATA , 20 Bytes - address of the payer. fee : QUANTITY - transaction fee in Wei. pv : QUANTITY - ECDSA recovery id pr : DATA , 32 Bytes - ECDSA signature pr ps : DATA , 32 Bytes - ECDSA signature ps Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByHash\",\"params\":[\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\"],\"id\":1}' // Result { \"jsonrpc\":\"2.0\", \"id\":1, \"result\":{ \"blockHash\":\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"blockNumber\":\"0x5daf3b\", // 6139707 \"from\":\"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d\", \"gas\":\"0xc350\", // 50000 \"gasPrice\":\"0x4a817c800\", // 20000000000 \"hash\":\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\", \"input\":\"0x68656c6c6f21\", \"nonce\":\"0x15\", // 21 \"to\":\"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb\", \"transactionIndex\":\"0x41\", // 65 \"value\":\"0xf3dbb76162000\", // 4290000000000000 \"v\":\"0x25\", // 37 \"r\":\"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea\", \"s\":\"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c\" \"payer\":null, \"fee\":null, \"pv\":null, \"pr\":null, \"ps\":null } } tai_getTransactionByBlockHashAndIndex Returns information about a transaction by block hash and transaction index position. Parameters DATA , 32 Bytes - hash of a block. QUANTITY - integer of the transaction index position. Example Parameters params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', '0x0' // 0 ] Returns See tai_getTransactionByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByBlockHashAndIndex\",\"params\":[\"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\", \"0x0\"],\"id\":1}' Result see tai_getTransactionByHash tai_getTransactionByBlockNumberAndIndex Returns information about a transaction by block number and transaction index position. Parameters QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . QUANTITY - the transaction index position. Example Parameters params: [ '0x29c', // 668 '0x0' // 0 ] Returns See tai_getTransactionByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}' Result see tai_getTransactionByHash tai_getTransactionReceipt Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Parameters DATA , 32 Bytes - hash of a transaction Example Parameters params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ] Returns Object - A transaction receipt object, or null when no receipt was found: transactionHash : DATA , 32 Bytes - hash of the transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. blockNumber : QUANTITY - block number where this transaction was in. from : DATA , 20 Bytes - address of the sender. to : DATA , 20 Bytes - address of the receiver. null when it's a contract creation transaction. cumulativeGasUsed : QUANTITY - The total amount of gas used when this transaction was executed in the block. gasUsed : QUANTITY - The amount of gas used by this specific transaction alone. contractAddress : DATA , 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null . to : DATA , 20 Bytes - The address the transaction is directed to. logs : Array - Array of log objects, which this transaction generated. logsBloom : DATA , 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. It also returns either : root : DATA 32 bytes of post-transaction stateroot (pre Byzantium) status : QUANTITY either 1 (success) or 0 (failure) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionReceipt\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238', transactionIndex: '0x1', // 1 blockNumber: '0xb', // 11 blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', cumulativeGasUsed: '0x33bc', // 13244 gasUsed: '0x4dc', // 1244 contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155', // or null, if none was created logs: [{ // logs as returned by getFilterLogs, etc. }, ...], logsBloom: \"0x00...0\", // 256 byte bloom filter status: '0x1' } } tai_newFilter Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call tai_getFilterChanges . A note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: * [] \"anything\" * [A] \"A in first position (and anything after)\" * [null, B] \"anything in first position AND B in second position (and anything after)\" * [A, B] \"A in first position AND B in second position (and anything after)\" * [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\" Parameters Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. Example Parameters params: [{ \"fromBlock\": \"0x1\", \"toBlock\": \"0x2\", \"address\": \"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", null, [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\"]] }] Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newFilter\",\"params\":[{\"topics\":[\"0x0000000000000000000000000000000000000000000000000000000012341234\"]}],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } tai_newBlockFilter Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call tai_getFilterChanges . Parameters None Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newBlockFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } tai_newPendingTransactionFilter Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call tai_getFilterChanges . Parameters None Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newPendingTransactionFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } tai_uninstallFilter Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with tai_getFilterChanges for a period of time. Parameters QUANTITY - The filter id. Example Parameters params: [ \"0xb\" // 11 ] Returns Boolean - true if the filter was successfully uninstalled, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_uninstallFilter\",\"params\":[\"0xb\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": true } tai_getFilterChanges Polling method for a filter, which returns an array of logs which occurred since last poll. Parameters QUANTITY - the filter id. Example Parameters params: [ \"0x16\" // 22 ] Returns Array - Array of log objects, or an empty array if nothing has changed since last poll. For filters created with tai_newBlockFilter the return are block hashes ( DATA , 32 Bytes), e.g. [\"0x3454645634534...\"] . For filters created with tai_newPendingTransactionFilter the return are transaction hashes ( DATA , 32 Bytes), e.g. [\"0x6345343454645...\"] . For filters created with tai_newFilter logs are objects with following params: removed : TAG - true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex : QUANTITY - integer of the log index position in the block. null when its pending log. transactionIndex : QUANTITY - integer of the transactions index position log was created from. null when its pending log. transactionHash : DATA , 32 Bytes - hash of the transactions this log was created from. null when its pending log. blockHash : DATA , 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log. blockNumber : QUANTITY - the block number where this log was in. null when its pending. null when its pending log. address : DATA , 20 Bytes - address from which this log originated. data : DATA - contains the non-indexed arguments of the log. topics : Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity : The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256) ), except you declared the event with the anonymous specifier.) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getFilterChanges\",\"params\":[\"0x16\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": [{ \"logIndex\": \"0x1\", // 1 \"blockNumber\":\"0x1b4\", // 436 \"blockHash\": \"0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"transactionHash\": \"0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\", \"transactionIndex\": \"0x0\", // 0 \"address\": \"0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"data\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"topics\": [\"0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\"] },{ ... }] } tai_getFilterLogs Returns an array of all logs matching filter with given id. Parameters QUANTITY - The filter id. Example Parameters params: [ \"0x16\" // 22 ] Returns See tai_getFilterChanges Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getFilterLogs\",\"params\":[\"0x16\"],\"id\":74}' Result see tai_getFilterChanges tai_getLogs Returns an array of all logs matching a given filter object. Parameters Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. blockhash : DATA , 32 Bytes - (optional) With the addition of EIP-234 (Gtai >= v1.8.13 or Parity >= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash . Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash . If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed. Example Parameters params: [{ \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"] }] Returns See tai_getFilterChanges Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getLogs\",\"params\":[{\"topics\":[\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]}],\"id\":74}' Result see tai_getFilterChanges tai_getWork Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\"). Parameters none Returns Array - Array with the following properties: 1. DATA , 32 Bytes - current snailBlock header without nonce 2. DATA , 32 Bytes - the seed hash used for the DAG. 3. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / fruit difficulty. 4. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / snailBlock difficulty. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getWork\",\"params\":[],\"id\":73}' // Result { \"jsonrpc\": \"2.0\", \"id\": 73, \"result\": [\"0xbcdcb8533dcf88b736f5b44f777250922f0f0472d4dd34a5a1b445a0c47aceed\", \"58bc067579760d307143ec1cd416eb3814110d29bf21aba0cd18586e2f038791\", \"0x0000000000000000000000000000000000000000000000000000000000000064\", \"0x0000000000000000000000000000000000000000000000000000000000002710\"] } tai_submitWork Used for submitting a proof-of-work solution. Parameters DATA , 8 Bytes - The nonce found (64 bits) DATA , 32 Bytes - The header's pow-hash (256 bits) DATA , 32 Bytes - The mix digest (256 bits) Example Parameters params: [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\" ] Returns Boolean - returns true if the provided solution is valid, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_submitWork\", \"params\":[\"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true } tai_submitHashrate Used for submitting mining hashrate. Parameters Hashrate , a hexadecimal string representation (32 bytes) of the hash rate ID , String - A random hexadecimal(32 bytes) ID identifying the client Example Parameters params: [ \"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\" ] Returns Boolean - returns true if submitting went through succesfully and false otherwise. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_submitHashrate\", \"params\":[\"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true } tai_committeeNumber get current committee number Parameters none Returns QUANTITY - integer of the current committee number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_committeeNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": 8 } tai_fruitNumber get current fruit number Parameters none Returns QUANTITY - integer of the current fruit number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_fruitNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": \"0x1975f\" } tai_rewardSnailBlock get current reward snalBlock infomation Parameters none Returns Object - A snail block object, or null when no snail reward block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fastNumber : QUANTITY - default 0. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail reward number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_rewardSnailBlock\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x193a0\", \"difficulty\": \"0x2710\", \"endFruitNumber\": \"0x193db\", \"extraData\": \"0xd9820a018667657472756588676f312e31302e38856c696e7578\", \"fastNumber\": 0, \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x7dad8df99080412919a4e0018c980e6bf40e64bff5e09f0ec45efd63530ed95e\", \"fruits\": [\"0x421cf9aa22145c141d3235a5b19c73d10613cc782221f279c3a136f136ac811e\", \"0xb6fdad4a0287102adba3b5bbe9789598694c028491de7c459f47248ee1844132\", \"0xa784a38af019ea321c725bf6b6ed61398bb86d4b20289c0a6ef54a20eced554c\", \"0x8fe6337b88ee4f19514670d49f5a64e736edfd7ae8c34fecc6d54ce923325991\", \"0x9dcbc81a1e764f6c0a6591e72000776dad6752be2d9c65b77a2157bc88a65333\", \"0x5cbac30e3a8d3246bbb84b570aecfa69b1d364738e4223fa17fe047b307ed7f2\", \"0x75115e8cdcfba043c57c2a10c6e781ab582f85b2e715cbacc42e3d2f96bc7cac\", \"0x08fe101b8ef2304965b5008267ee321ddbc48b1fd210b4dff81441e9c57f2e0f\", \"0xe31577b98c384074b37ad1d9cad88d31483b152ed96106e17f9864ded8052f62\", \"0xce3f340eb5c0582e82f5f9c550373ba069af140b50eabaf7a044717eada32536\", \"0x879f73afc3cb734dd9b5b7fe7687b6f8d6a5b8e7d20c4f730dbd0f84590ac0de\", \"0xd0c3c2c31f6b19c618c709968624ca02b23341b01178f9de23b43a406755c93e\", \"0xaa1285332874bd67c7b37b7b81f66e0b3fe6b38b176d22a0ee0349ef3120f9c4\", \"0xaed6ff91f2f1de5fcd7880797b841c61458bd59fe3f4bd4e80823d99a555049f\", \"0x46e8303c548f82e59741ee94ced70a0df1500abef9d667f131a39e71b9aaff0c\", \"0xedc6d3a94624bd914435119493c5d73545c854385758e86cb1b2c6445de7a6d4\", \"0x46a42a82461c5b92ef7ecf86c6d84dd8a7abeddd72a444467c109da53de26f10\", \"0xf23a03a1698426280449512bf19f731c56051cd19d04976009d7d2e03d6294a4\", \"0x4f2b30f026d64d56ec8d0fc69ef0959bbceeff648eafe8ff3c711af4d0f796eb\", \"0xbcfd45ccd7456fdb5dc3d19a2bd65f4b37530e4772fb6a6364376df3dee8b883\", \"0x3c1ce1153fc784870812be53f89c549063c5056d653db16621232582b6fe51f7\", \"0x8dfbb789f49ff07237c5650fa166d7adf9a2ff5b0ee967e510686a0df24b5e6e\", \"0x06aef81bc2b5d914fc553dad79a83dc0660c33c75448e62129b1da8443a3e704\", \"0xf291e642625bf18ddc03eb2c6287dea900457bcf8102834c26fb08438eb5d434\", \"0x73bb8bc367a789ce6e69ef4e21ffec76e103d36a85a01a460bd268a1ceec992a\", \"0x364c55068a8341db5e3ecc6fa6cc328e1b038d9a567b85fb3e470d8ee12a2fd8\", \"0x460e5ddc879c9da6090296d04fc522fcfc4341566856c0e4b81a6ee459922c06\", \"0x0f17e693874809172d889bd813ed4e825fdc4436d4c97bc48725b924ab612ce5\", \"0xca07ab5afbdc766247276e3641df8206cc89ca00660f3d72ceac86b1e192652a\", \"0x96027060b71fb9b758131b70c481c2e5f916bb821fa7295a834080c89698dbe1\", \"0xb9ed69d03aa2a80e358950b82fbd083fbef5069b6b8f2488cd74d70260b5de9b\", \"0x71c0249266f922677eab708b5de86fe1f057b6b39ad6dcd05230de89a0021eba\", \"0xbcb6f37b63558db10bedab0f722e34341a6329f57248e00606fe184613468c5c\", \"0x08eb945b49599aa7903bac856f5f5bb9d260bc1c2c553b2ab9d69a8611c4c935\", \"0xcac5bb4daec7f138cb820e5fd4b958184c9e724d4879662f4422df0230aadb14\", \"0xd29c761ec3504ae091998c2acbc3e739635d99e0764a7f521021a8ae7c068c36\", \"0xe5de172346d9d1f423a09726ca6e992725986c54bf2818ba537d341ba63ebf19\", \"0x337f7834016004bfa59869cfc357035dbc8128b340ed062e7a30a93bee2ac3fb\", \"0xf0f6790614751991e9d04548c7a81b0ef28aff686a704e4cfbfe1de01e6fce9e\", \"0x502e04348f225907f8528d9196c7113bd3c15d3080c1c1718c85c8cc073ea7bb\", \"0x663bf65f7e766082cfb84ab2d9303f9c078e2819eb2197d6f6318dafc55cfa98\", \"0x282b563050f940059986b4745345f14ce6d7e96b7160ead7a27985ce99aeae9b\", \"0x1459d9bb5939fe563d6d9502e28184d5c4619c10d0e0f6699b746daf4c1b0400\", \"0xc7d3fff73e954042d5bd91107252ff3986c9c756869c0484954d82831dfbfb28\", \"0x0cb9e8929bf625b0916879359fc617ce0b4e7f474df5cf53414d2075e8668cca\", \"0x9b8715bf3090fdf115ae675bf4692e5dc3e8453b126fd729ddfabbfaed11aa66\", \"0x69668b51d76ce1ab186158f05ef8d92394803b9f0c3e508d18d39fe45f2e25d4\", \"0x972f4e2f865c5e00f377418a2a0469e3abd3c1b64b2cdd803904dd33a9bfc7a0\", \"0x3ccb10a6a69fcfe8da544bddfcadf6be6a295dd4b38ab5ba0f9e8aa36f4188fd\", \"0x4098d83b4e8f506c7b85560a8e84017f845b1083b864e3975208ece07f98074f\", \"0xec6edff7cd40f0bc41b1ed6a129e88bec38cd6474f130363cd6dccc31d49a717\", \"0xa89aa9e24a3f0926bbbfc4c8a80ed872f58963f83d7d99b13f169463783f4e52\", \"0x07bb236e22e0d322d962bb28f329aed7ce8e9c460215d8700826a5faa777ccac\", \"0xf87aa14c01ee28584632c6db9b1667d27c8d0c0eb947d286318641e549dd3c1c\", \"0x2aeb9798bade7ece9a6fc803e9fb7359c14cb6c27dd986a27e8b20639dda5377\", \"0x07858381ad1ab29ac5a0f34fd78420cffa494c0dbb9bca64c1bff28075ba490b\", \"0x121d18d6770575a34480a8ddc268e87438e424d721d1b76c84cb60297d0a7156\", \"0xc54357b750662ef429845acfeacf482cffa4b253373e05199da3e01301823572\", \"0xe1bcd60bafc03acbcc8c8c6b454af4ecc1171cbc7d9ab4ed1e321bab82308af8\", \"0x7917615f4519f7160de4ac556c8de805ce8bc464e5784642cc937e000512ad0f\"], \"hash\": \"0xb913521609feef2b7cc351efe0d0b359796c709176e8824622bc6dee312a227f\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x0000b9b5b60cbaa58a008425f70c3e610794e9eb9ffa7e8c9ab257c451afcc22\", \"nonce\": \"0x279486ec07bf61d6\", \"number\": \"0x6b4\", \"parentHash\": \"0xa24c81127edb0a630b13205b498d8ef0f7d47a4678e96827f8f19ffd2c470a24\", \"pointerNumber\": 1708, \"size\": \"0x101bb\", \"timestamp\": \"0x5c9194ec\" } } tai_snailBlockNumber get current snail block number Parameters none Returns QUANTITY - integer of the current snail block number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_snailBlockNumber\", \"params\":[],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\": \"0x38\" } tai_getCommittee get committee member infomation Parameters ```js params: [\"0x1\"] ##### Returns - `backups`: `Array` - Array of backup committee members, each committee member info contains pubkey\u3001 coinbase\u3001flag\u3001type. - `beginNumber`: `QUANTITY` - the begin fast block number. - `beginSnailNumber`: `QUANTITY` - the begin snail block number. - `endNumber`: `QUANTITY` - the end fast block number. - `endSnailNumber`: `QUANTITY` - the end snail block number. - `id`: `QUANTITY` - committeeId. - `memberCount`: `QUANTITY` - the number of committee members . - `members`: `Array` - Array of committee members. ##### Example ```js // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getCommittee\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"backups\": [{ \"PKey\": \"0488a25849abee5921fdb581ba34cd66adc8e02b108391c4153ca8da27722e16badf4fcd5ba7f557ae76d444ccf3638e4590a181805623de1cab67f31364c79736\", \"coinbase\": \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a9a1cedb8900d893b607c4dbc834abada3fe98f247b8bcb5ef44d3d3a246c4cf41d9d792527473c30ded81fa4b81afe7030a09e093dd92746b98c79e6a204c63\", \"coinbase\": \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"040d153624462927444a8212717e4ad41ec5f5739bc36598d093d114729e1dc782d55d322699705829cf9d69f201009db797ebe8ba952f10a26fe36c64356b111b\", \"coinbase\": \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3474c26578fce00d241119758271f6a208cc987c6f37d1518dcea2a51257bafeebd93202ae499cb5a8986720d4b63a04043aadb4d03430194a81860c9ca0763\", \"coinbase\": \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04d370defb1b7b8c086f98c4a7d7b90348b088cd2effdcc27b86feebdff499a192b4a5a5b16a400625271d69b3fa7d8c42c8b2e15c910cd1f314f28eb5beb73342\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", \"coinbase\": \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", \"flag\": 160, \"type\": 161 }], \"beginNumber\": 19781, \"beginSnailNumber\": 1, \"endNumber\": 30725, \"endSnailNumber\": 168, \"id\": 1, \"memberCount\": 21, \"members\": [{ \"PKey\": \"04ad2da6433f25f5063c98fb414496bd794f3054544408a63da4c6488a35a7c7ba38e8dbae49356182dcd81f45a715feb1f7f696c3a1bd77e33ab8ab41d8177ca3\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb9577ae8e19d99f708b8d46de17220afaf2d4a89676d98c8e8558e4e10f0283733a6a4a47aee779081cedd9266d5b4edcfc4fa22a4d69e3da98f6a03ad4e372\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"0497413104d718ef592fa4526e796be092a143272f9c7b415c23c73201a9cf3da2ec928e11958246ee2f8e838ec67506e798c4e8fcec89f5e8c9696235f600e765\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04dc2a2cba3793da755d28f02336193a8e04c77cb3fdef5f04a4197c71f59f978767729ff652267e4c0fc9204c7e921931c207e32ba442ac27a20acaad49324696\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047a523df31438d3efc02c4126b891d5e1258371336decfe43a15efcb519607aa2b932f895808f4414f75b525d7a490e10be314a6b60971c7149156b9d659fb591\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04ea62525863113273df44d8b5bbbcf0c1df5d03b94dd60308b747c1894af70dd5eaf5facfb1577bb4416ba517375ce662769f69b0c5fa961ac0cd9a4a342e4f67\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04601fc9ac609d9d47d01f76bcdf496a1b3d2aaf9dc4c97319faff49e2284ad843aa5505343376db1357b9cc0d176fe828d7a07cc8cd0993aee3b76d77eda2be4b\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04b64ba599ff0e0c2418357f87ed6058f04801ce0e0f653e336aa2f0b9c9620b1ed9222648100d7cadfbbe2cadb66b94e66eeed80b0a96da7808bc55fd8dd282a2\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"044aa7cef6d282ec22e0ef6d55d36b17d607afee920668320430717552cd7d4905e07d92a0e939f96ef6d617174a136267ed6a4efcc14879abe6aa097965fb4740\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04506b3c55ac57f78b41b2e47afc8d0f8d9891803822bbc4fe35bf3be72ad91056b0aae8a5fa76309f093987202a284c67d5918ca23a31e2e6535255c58240bf59\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04a69c470e1b4ea2a05d8a70de7c15687131bbb66105049a5bbdb04645381a29899ec72af7929c645ec0d29a91b4359de2629618b763a333d52bb4f436cccf9a9d\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"046e61555ed9bd6bb08b3f5034373bfc4472a8ca8868d21e1ceb4fe3f24c42c3a5dc7cb492ca62a31bfa6c82f86fed02dfa23196c25a76673ddb7a1f3f6eaafc84\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb4c070000b1c4525e42d2cf61a0f1449ef82ce534a19ff03cf8c2a480d16e9738f5162972e15262992eb21cf561b7bae2e49e9dc8eb2b8f52dd9100f2bdce4e\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047fc0ae115cadf26b472ed4bed8785ca535c9fe53eb896bd21d7d7d7e1ee242881c50fa5eeaba4465e1992d5b917ae1f891c1e85e0bb5e0201e885886e846102b\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }] } } tai_getFruitByNumber get fruit block by fruit number Parameters QUANTITY - integer of the fruit number. Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x1\", false ] Returns Object - A fruit object, or null when no fruit was found: - difficulty : QUANTITY - integer of the difficulty for this snail reward block. - extraData : DATA - the \"extra data\" field of this reward block. - fastHash : DATA , 32 Bytes - hash of the fruit. - fastNumber : QUANTITY - fruit. - fruitDifficulty : QUANTITY - integer of all fruit difficulty for the fruit. - hash : DATA , 32 Bytes - hash of the fruit. - miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. - mixHash : DATA , 32 Bytes - the mix digest. - nonce : QUANTITY - the mining nonce. - number : QUANTITY - the fruit number. - size : QUANTITY - integer the size of the fruit in bytes. - timestamp : QUANTITY - the unix timestamp for when the fruit was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getFruitByNumber\", \"params\":[\"0x1\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"difficulty\": \"0x4e20\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fastHash\": \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", \"fastNumber\": 1, \"fruitDifficulty\": \"0x64\", \"hash\": \"0xd5d8719f456a59249570bb7adf9e37c7d2e30621fbc0aab8ee2817bf591e3acc\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0xb01e70ab492dcede93395389b9193201011e950f181180f78ad98ae58184601d\", \"nonce\": \"0x033aebb6a27a911a\", \"number\": 1, \"signs\": 5, \"size\": 865, \"timestamp\": \"0x5c87b12a\" } } tai_getFruitByHash get fruit block by fruit hash Parameters DATA , 32 Bytes - hash of fast block. Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", false ] Returns See tai_getFruitByNumber Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getFruitByHash\", \"params\":[\"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\",false],\"id\":100}' // Result See tai_getFruitByNumber tai_getRewardBlock return the fast block position where the given snail block is rewarded Parameters QUANTITY - integer of the snail reward block number Example Parameters params: [ \"0x15\" ] Returns Object - A fast block object, or null when no snail reward block was found: committeeRoot : DATA , 32 Bytes - hash of committee members. snailHash : DATA , 32 Bytes - hash of the snail reward block. snailNumber : QUANTITY - the reward snail number. extraData : DATA - the \"extra data\" field of fast block. gasLimit : QUANTITY - the maximum gas allowed in fast block. gasUsed : QUANTITY - the maximum gas allowed in fast block. hash : DATA , 32 Bytes - hash of the fast block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. number : QUANTITY - the fast block number. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the fast block. signs : Array - Array of each committee member sign. size : QUANTITY - integer the size of the fast block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the fast block. switchInfos : Array , - Array of switch committee member. timestamp : QUANTITY - the unix timestamp for when the fast block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the fast block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getRewardBlock\", \"params\":[\"0x15\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"committeeRoot\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"SnailHash\": \"0xeae9f91963eb64f0ca6e5bcf8551d8efd0d1c7f8d5ff207856c303faef86e419\", \"SnailNumber\": 21, \"extraData\": \"0x\", \"gasLimit\": \"0x4b99999\", \"gasUsed\": \"0x668a0\", \"hash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"number\": \"0x7e5\", \"parentHash\": \"0x3f1105c6fa853944a84fe9ef7eefcc2bcbb08860c302aed652c773d1bbc0b2f0\", \"receiptsRoot\": \"0x824c56f642d67e881555ec142168cc2364a1343129e34044dea382088cb5fa42\", \"signs\": [{ \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x763026fef783d8bfdf4b06309a1aafbebce229e846383131dc430c6c29ff42bd033d3719f4c70e96bd5a80e46a9a67d2f647fbc7c2e0a7b32c0cf8824feca29300\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x4c11748616eda54ca216fc8fd28957459c629caea7967e73f23ac02419e9dfba4650b7cbfd3fd9a0f4737724234941c98fa9a6ad00ffd3f860e9dd5be5ac366c00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x86d689580eac3ce23453dec705ed8cd5c0ed992d0a4296ebea4bc5373f90bb1a56fbc121d6146f4c7ac6416e74b5a876012e25497dd70402b3461c13c9475a2800\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0xaa1d76682f8ce81fa449819a6921808010114d4433945da40d323d5d8f57ebac78fc7096fbf0307dcdac5e8c9e6b2be80aa3959a6e6304d85d7a534e0e2714cc00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x90b4ce8a7a13d070d9b360173e1c96dd7d95c33e7f7689187117dafae46393a8764ce36db25881fcbf82ba692b18eb2450aa2f69667391e6c55025d9f6704d1701\" }], \"size\": \"0xca7\", \"stateRoot\": \"0xc422d6752c0aa8e0a773ddd5b12950f3c30361ce7320c6fa59eb77c9f36ca07e\", \"switchInfos\": [], \"timestamp\": \"0x5c87bf4c\", \"transactions\": [\"0xee311d9a6e95b0740488a8c797fc36b0ddbba97005c8623d0c8258509ad0e34b\", \"0x9be94692e83f76fbf8a9ff7a4b9caa83141bf5c7bd91b768669802b18357146c\", \"0x167c29e6b6278a999c0debe02b51407cbe9f23e701f53fa2c80e141ab42f8cd4\", \"0x481f16a6866ce56774c5a14bfbf9a19391868761d09403acaea4d9a74fe33bd7\", \"0x133457504d0c23f84b58b9f82aae15012b48c5bcb5fcff904d795fe78de1ce88\", \"0xff98231ecd6b0358d15eec72ebb8920ed5312c30305fb21845485316b1cf8ddd\", \"0x3282ec6633cb743a2e177f0a999b1f366bcf900069c33c40a4a1c3b7b4fc5ed6\", \"0x897e1b6226666a5c031bf528527e68efb63a7d3c4b6431d758858c554a3cf38a\", \"0x034bf45b679a2283deec9c3c514b0dfe6dc1ab4980864ceeafd9989bd56410f0\", \"0x129bc008bcae647a55d900068ae657e3f9073a37d03933d149ba529abd15c63c\", \"0xc5831516e417510b6f4069093c8845de24e62a1adee409c35164b8b6cf26465d\", \"0xb0ef3a7209af20990b2e346dc7f963d11e0da3a42ae04640502b81e30ac96202\", \"0x8c79698e30cbd7c50781eaa6077667428cf51027086762d9349ee9987d9ebe36\", \"0xf48839d7212c9d01684237131f68f81a30fe6635eb39b0030bab3e68c75bbefa\", \"0x94aff39d085551389a198378137e5dd694ce689e5ad326910f18f167ff81f16c\", \"0x882c79c2678a0fc0099bca068ca05bb239405c8a2f363a3b755b4049c67f41c7\", \"0xaa5855c69051b82716bdc9b7f9190ef06c06411d0d43d8786fbf14a3898446a6\", \"0x508b4357b911624c11bb5a90d880c86ed92f5f430454f64b6e63ea884cec0589\", \"0x652a73ec17dab453db88a9e292bf684a814101d7013a489fbbae98ed9c221f03\", \"0xa95cbff42440d0a000ad55969f95fc5b5ff947efd95dbb0f9607acf849dbfbd9\"], \"transactionsRoot\": \"0xcfcce7b64115b9086a78c0449ceb70aac9b08c0d221943470ffacbbdc71fba9a\" } } tai_getSnailBlockByNumber get snail block by number Parameters QUANTITY - integer of the snail block number,or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Boolean - whether show fruits in snail block Example Parameters params: [ \"0x19\", false ] Returns Object - A snail block object, or null when no snail block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail block number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailBlockByNumber\", \"params\":[\"0x19\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x5a9\", \"difficulty\": \"0x9e86\", \"endFruitNumber\": \"0x5e4\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x02c44355f9aa43305f7507efd77ab13a74b0a7bde1d923ac62135e8e3bfe4afd\", \"fruits\": 60, \"hash\": \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x000122785a555ca6b63c54e1ff398cf5ae9f6176391de526a7d3a9277b13cfaf\", \"nonce\": \"0x719c13f20436b852\", \"number\": \"0x19\", \"parentHash\": \"0x1d2361639c4b26f9481caf680e6db21af1c8d9159f804b01a37611a1e057487a\", \"pointerNumber\": 17, \"size\": \"0xcee1\", \"timestamp\": \"0x5c87bbcf\" } } tai_getSnailBlockByHash get snail block by hash Parameters DATA , 32 Bytes - hash of snail block . Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", false ] Returns See tai_getSnailBlockByNumber Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailBlockByHash\", \"params\":[\"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\",false],\"id\":100}' // Result See tai_getSnailBlockByNumber tai_getDataset the Minverva algorithm calculates the required source of dataset, and updates the dataset every 12,000 Parameters none Returns [null,null,null,null,null,null....,null]. -when snailBlock number exceed 12000, return not nil Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getDataset\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { [null, null, null, null, ......, null, null] } } tai_getSnailRewardContent get snailBlock reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit Parameters QUANTITY - integer of a block number. Returns blockminer : -snailblock miner address and reward committeReward : -committee member address and reward for all fruit fruitminer : -fruit miner address and reward for each fruit Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailRewardContent\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"blockminer\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 61629629629629000000 }, \"committeReward\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 23111111111110999785 }, \"fruitminer\": [{ \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }] } } Eth In order for more developers to participate in the truechain ecosystem and be friendly to developers, truechain is compatible with ethereum. Please refer to the instructions of ethereum for detailed rules of use","title":"  github.com taiyuechain taipublicchain engineering code wiki  new"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#json-rpc-api","text":"JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON ( RFC 4627 ) as data format. Gtai has experimental pub/sub support. See this page for more information.","title":"JSON RPC API"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#javascript-api","text":"To talk to an truechain node from inside a JavaScript application use the web3.js library, which gives a convenient interface for the RPC methods.","title":"JavaScript API"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#json-rpc-endpoint","text":"Default JSON-RPC endpoints: http://localhost:8545","title":"JSON-RPC Endpoint"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#go","text":"You can start the HTTP JSON-RPC with the --rpc flag gtai --rpc change the default port (8545) and listing address (localhost) with: gtai --rpc --rpcaddr <ip> --rpcport <portnumber> If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail: gtai --rpc --rpccorsdomain \"http://localhost:3000\"","title":"Go"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#json-rpc-support","text":"JSON-RPC 2.0/ Batch requests/ HTTP/ IPC/ WS","title":"JSON-RPC support"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#the-default-block-parameter","text":"The following methods have an extra default block parameter: tai_getBalance tai_getCode tai_getTransactionCount tai_getStorageAt tai_call When requests are made that act on the state of truechain, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX String - an integer block number String \"earliest\" for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions","title":"The default block parameter"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#curl-examples-explained","text":"The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:8545","title":"Curl Examples Explained"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#json-rpc-methods","text":"tai eth web3 net protocolVersion protocolVersion clientVersion version syncing syncing sha3 peerCount coinbase coinbase listening mining mining hashrate hashrate gasPrice gasPrice accounts accounts blockNumber blockNumber getBalance getBalance getStorageAt getStorageAt getTransactionCount getTransactionCount getBlockTransactionCountByHash getBlockTransactionCountByHash getBlockTransactionCountByNumber getBlockTransactionCountByNumber getCode getCode sign sign sendTransaction sendTransaction sendRawTransaction sendRawTransaction sendTrueRawTransaction - call call estimateGas estimateGas getBlockByHash getBlockByHash getBlockByNumber getBlockByNumber getTransactionByHash getTransactionByHash getTransactionByBlockHashAndIndex getTransactionByBlockHashAndIndex getTransactionByBlockNumberAndIndex getTransactionByBlockNumberAndIndex getTransactionReceipt getTransactionReceipt newFilter newFilter newBlockFilter newBlockFilter newPendingTransactionFilter newPendingTransactionFilter uninstallFilter uninstallFilter getFilterChanges getFilterChanges getFilterLogs getFilterLogs getLogs getLogs getWork getWork submitWork submitWork submitHashrate submitHashrate committeeNumber - fruitNumber - rewardSnailBlock - snailBlockNumber - getCommittee - getFruitByNumber - getFruitByHash - getRewardBlock - getSnailBlockByNumber - getSnailBlockByHash - getDataset - getSnailRewardContent -","title":"JSON-RPC methods"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#json-rpc-api-reference","text":"","title":"JSON RPC API Reference"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#web3","text":"","title":"web3"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#web3_clientversion","text":"Returns the current client version.","title":"web3_clientVersion"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns","text":"String - The current client version.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\": \"Gtai/v1.1.0-unstable-d4c05e98/linux-amd64/go1.10\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#web3_sha3","text":"Returns Keccak-256 ( not the standardized SHA3-256) of the given data.","title":"web3_sha3"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_1","text":"DATA - the data to convert into a SHA3 hash.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters","text":"params: [ \"0x68656c6c6f20776f726c64\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_1","text":"DATA - The SHA3 result of the given string.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_1","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#net","text":"","title":"net"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#net_version","text":"Returns the current network id.","title":"net_version"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_2","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_2","text":"String - The current network id. - \"19330\" : Truechain Mainnet - \"18928\" : Testnet - \"100\" : Devnet","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_2","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"19330\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#net_listening","text":"Returns true if client is actively listening for network connections.","title":"net_listening"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_3","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_3","text":"Boolean - true when listening, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_3","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\":true }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#net_peercount","text":"Returns number of peers currently connected to the client.","title":"net_peerCount"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_4","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_4","text":"QUANTITY - integer of the number of connected peers.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_4","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":74}' // Result { \"id\":74, \"jsonrpc\": \"2.0\", \"result\": \"0x2\" // 2 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai","text":"","title":"tai"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_protocolversion","text":"Returns the current truechain protocol version.","title":"tai_protocolVersion"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_5","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_5","text":"String - The current truechain protocol version.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_5","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_protocolVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"0x40\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_syncing","text":"Returns an object with data about the sync status or false .","title":"tai_syncing"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_6","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_6","text":"Object|Boolean , An object with sync status data or FALSE , when not syncing: - currentFastBlock : QUANTITY -current block number(fastchain) - currentSnailBlock : QUANTITY -current block number(snailchain) - highestFastBlock : QUANTITY - already highest block number(fastchain) - highestSnailBlock : QUANTITY -already highest block number(snailchain) - knownStates : String -already know state - pulledStates : String -already complete state - startingFastBlock : QUANTITY -start sync block number(fastchain) - startingSnailBlock : QUANTITY -start sync block number(snailchain)","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_6","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_syncing\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"currentFastBlock\": \"0x2e9a\", \"currentSnailBlock\": \"0xab\", \"highestFastBlock\": \"0x3a3d2\", \"highestSnailBlock\": \"0xab7\", \"knownStates\": \"0x0\", \"pulledStates\": \"0x0\", \"startingFastBlock\": \"0x2e98\", \"startingSnailBlock\": \"0x0\" } } // Or when not syncing { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": false }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_coinbase","text":"Returns the client coinbase address.","title":"tai_coinbase"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_7","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_7","text":"DATA , 20 bytes - the current coinbase address.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_7","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_coinbase\",\"params\":[],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0xc94770007dda54cF92009BFF0dE90c06F603a09f\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_mining","text":"Returns true if client is actively mining new blocks.","title":"tai_mining"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_8","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_8","text":"Boolean - returns true of the client is mining, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_8","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_mining\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_hashrate","text":"Returns the number of hashes per second that the node is mining with.","title":"tai_hashrate"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_9","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_9","text":"QUANTITY - number of hashes per second.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_9","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_hashrate\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": \"0x38a\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gasprice","text":"Returns the current price per gas in wei.","title":"tai_gasPrice"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_10","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_10","text":"QUANTITY - integer of the current gas price in wei.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_10","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_gasPrice\",\"params\":[],\"id\":73}' // Result { \"id\":73, \"jsonrpc\": \"2.0\", \"result\": \"0xf4240\" // 1000000 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_accounts","text":"Returns a list of addresses owned by client.","title":"tai_accounts"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_11","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_11","text":"Array of DATA , 20 Bytes - addresses owned by the client.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_11","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_accounts\",\"params\":[],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\"] }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_blocknumber","text":"Returns the number of most recent block.","title":"tai_blockNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_12","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_12","text":"QUANTITY - integer of the current block number the client is on.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_12","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_blockNumber\",\"params\":[],\"id\":1}' // Result { \"id\":83, \"jsonrpc\": \"2.0\", \"result\": \"0xc94\" // 1207 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getbalance","text":"Returns the balance of the account of given address.","title":"tai_getBalance"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_13","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_1","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_13","text":"QUANTITY - integer of the current balance in wei.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_13","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getstorageat","text":"Returns the value from a storage position at a given address.","title":"tai_getStorageAt"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_14","text":"DATA , 20 Bytes - address of the storage. QUANTITY - integer of the position in the storage. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_14","text":"DATA - the value at this storage position.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_14","text":"Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by address 0x391694e7e0b0cce554cb130d723a9d27458f9298 . contract Storage { uint pos0; mapping(address => uint) pos1; function Storage() { pos0 = 1234; pos1[msg.sender] = 5678; } } Retrieving the value of pos0 is straight forward: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"tai_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x00000000000000000000000000000000000000000000000000000000000004d2\"} Retrieving an element of the map is harder. The position of an element in the map is calculated with: keccack(LeftPad32(key, 0), LeftPad32(map position, 0)) This means to retrieve the storage on pos1[\"0x391694e7e0b0cce554cb130d723a9d27458f9298\"] we need to calculate the position with: keccak(decodeHex(\"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\")) The gtai console which comes with the web3 library can be used to make the calculation: > var key = \"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\" undefined > web3.sha3(key, {\"encoding\": \"hex\"}) \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\" Now to fetch the storage: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"tai_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x000000000000000000000000000000000000000000000000000000000000162e\"}","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gettransactioncount","text":"Returns the number of transactions sent from an address.","title":"tai_getTransactionCount"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_15","text":"DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_2","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' // state at the latest block ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_15","text":"QUANTITY - integer of the number of transactions send from this address.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_15","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionCount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\",\"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getblocktransactioncountbyhash","text":"Returns the number of transactions in a block from a block matching the given block hash.","title":"tai_getBlockTransactionCountByHash"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_16","text":"DATA , 32 Bytes - hash of a block.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_3","text":"params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_16","text":"QUANTITY - integer of the number of transactions in this block.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_16","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockTransactionCountByHash\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc\" // 11 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getblocktransactioncountbynumber","text":"Returns the number of transactions in a block matching the given block number.","title":"tai_getBlockTransactionCountByNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_17","text":"QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter .","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_4","text":"params: [ '0xe8', // 232 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_17","text":"QUANTITY - integer of the number of transactions in this block.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_17","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockTransactionCountByNumber\",\"params\":[\"0xe8\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa\" // 10 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getcode","text":"Returns code at a given address.","title":"tai_getCode"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_18","text":"DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter .","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_5","text":"params: [ '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', '0x2' // 2 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_18","text":"DATA - the code from the given address.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_18","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getCode\",\"params\":[\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x2\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_sign","text":"The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked.","title":"tai_sign"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_19","text":"account, message DATA , 20 Bytes - address. DATA , N Bytes - message to sign.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_19","text":"DATA : Signature","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_19","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sign\",\"params\":[\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" } An example how to use solidity ecrecover to verify the signature calculated with tai_sign can be found here . The contract is deployed on the testnet Ropsten and Rinkeby.","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_sendtransaction","text":"Creates new message call transaction or a contract creation, if the data field contains code.","title":"tai_sendTransaction"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_20","text":"Object - The transaction object from : DATA , 20 Bytes - The address the transaction is send from. to : DATA , 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas : QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice : QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce : QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_6","text":"params: [{ \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\", \"gas\": \"0x76c0\", // 30400 \"gasPrice\": \"0x9184e72a000\", // 10000000000000 \"value\": \"0x9184e72a\", // 2441406250 \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\" }]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_20","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_20","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_sendrawtransaction","text":"Creates new message call transaction or a contract creation for signed transactions.","title":"tai_sendRawTransaction"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_21","text":"DATA , The signed transaction data.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_7","text":"params: [\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_21","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_21","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_sendtruerawtransaction","text":"When transaction contain payer or fee,Creates new message call transaction or a contract creation for signed transactions.","title":"tai_sendTrueRawTransaction"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_22","text":"DATA , The signed transaction data.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_8","text":"params: [\"0xf8c60183989680834c4b4094bea78fea68dba84363d0f9b79219ddf5991ccb2a880de0b6b3a76400008094cfb7ec3ac64a3afde043a5b32212d0b9c25b5d808081eba07cc4b8300a8ab6a7d6aee713f6dc61311848bf827794c370873ca334e7cc2cc1a05cd365ffc46cada820911e3c11123e36245ed1cec7943038632715a89a421b0281eca037d6e60016bd70371fd45a2fadd63f8824b34331f2cb5f7fe69f04df7f6d9caea04e05dda8cffa3e453aa474f955eef97fe63e9c9721860aaea379a0ace111fd16\"]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_22","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use tai_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_22","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_sendTrueRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc7509ef7672e1c1d59cec2854d3d074d442984382bd03c665c2e82ebfdacc25e\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_call","text":"Executes a new message call immediately without creating a transaction on the block chain.","title":"tai_call"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_23","text":"Object - The transaction call object from : DATA , 20 Bytes - (optional) The address the transaction is sent from. to : DATA , 20 Bytes - The address the transaction is directed to. gas : QUANTITY - (optional) Integer of the gas provided for the transaction execution. tai_call consumes zero gas, but this parameter may be needed by some executions. gasPrice : QUANTITY - (optional) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - (optional) Hash of the method signature and encoded parameters QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_23","text":"DATA - the return value of executed contract.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_23","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_call\",\"params\":[{see tai_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_estimategas","text":"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.","title":"tai_estimateGas"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_24","text":"See tai_call parameters, expect that all properties are optional. If no gas limit is specified gtai uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_24","text":"QUANTITY - the amount of gas used.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_24","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_estimateGas\",\"params\":[{see tai_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x5208\" // 21000 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getblockbyhash","text":"Returns information about a block by hash.","title":"tai_getBlockByHash"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_25","text":"DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_9","text":"params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_25","text":"Object - A block object, or null when no block was found: SnailHash : DATA , 32 Bytes - hash of the snail block. SnailNumber : QUANTITY - the snail block number. committeeRoot : DATA , 32 Bytes - hash of the committtee. extraData : DATA - the \"extra data\" field of this block. gasLimit : QUANTITY - the maximum gas allowed in this block. gasUsed : QUANTITY - the total used gas by all transactions in this block. hash : DATA , 32 Bytes - hash of the block. null when its pending block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. maker : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. number : QUANTITY - the block number. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the block. signs : Array , committee signs. fastHash : DATA , 32 Bytes - hash of the fast block. fastHeight : QUANTITY - the fast block number. result : QUANTITY - the vote. sign : DATA , 32 Bytes - committee sign hash. size : QUANTITY - integer the size of this block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the block. switchInfos : Array , committee member switch. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the block.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_25","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockByHash\",\"params\":[\"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d15273312\", true],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { {\"SnailHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"SnailNumber\":\"0x0\", \"committeeRoot\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"extraData\":\"0x\", \"gasLimit\":\"0xb71b00\",\"gasUsed\":\"0x0\", \"hash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"maker\":\"0x49fc88c2576b4f015cf75dae80e87a815d832888\", \"number\":\"0xab4\", \"parentHash\":\"0x0832d972f5b16ddefc3de154cc0a5a4ea16be2991be19bd740ae3486a83ff59f\", \"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", \"signs\":[{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"fastHeight\":\"0xab4\",\"result\":1, \"sign\":\"0x7a07be32cce585b6d74e6134022c973b6433dcb87447ec456712f5d3b40b8907403ea24c81309aa090e7469fc761372de2e2d32beddf0031eed1aa557185cbc101\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x4f1033692e2f354409002ff0ce9eb20d4edb676f6c02dc58223c9d2d15eebcaf4071c2efc630a44d78865da714ae694cd690d4b0d02b393d64ca377c63594a6e01\"},{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0xc8303a5c76fb70e834b63e70180af9720ac09eda59327a0e6be3ab85fcfcbb9b40434ae7dcd23df13fe6a55c1967d29de7db5c5e545674b6849a1a4eabb59b4b00\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x041df0a05407cb302695babfeff03d669d300e76cc2d33305512dc0859aeb4dc47b68065b5d62bd88a6b60e3993ed07ae0a64223681084c5c958cdd2041f42a100\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x8b8c97a4155c2b687b0eb90e1a716ede85c1b32ec7b164c0fa721f1b18ada4c41bc46373419d625ef8f0368b123bf86a60b07c168ebb5b97de4b9095847fad5001\"}],\"size\":\"0x40a\",\"stateRoot\":\"0x5c7127948504801c7db0ef17df87950b471a94d6f5332d39ceff41298f3f6b74\", \"switchInfos\":[],\"timestamp\":\"0x5ce25206\",\"transactions\":[], \"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"} } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getblockbynumber","text":"Returns information about a block by block number.","title":"tai_getBlockByNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_26","text":"QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_10","text":"params: [ '0x1b4', // 436 true ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_26","text":"See tai_getBlockByHash","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_26","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getBlockByNumber\",\"params\":[\"0x1b4\", true],\"id\":1}' Result see tai_getBlockByHash","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gettransactionbyhash","text":"Returns the information about a transaction requested by transaction hash.","title":"tai_getTransactionByHash"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_27","text":"DATA , 32 Bytes - hash of a transaction","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_11","text":"params: [ \"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_27","text":"Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. null when its pending. blockNumber : QUANTITY - block number where this transaction was in. null when its pending. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Wei. hash : DATA , 32 Bytes - hash of the transaction. input : DATA - the data send along with the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. value : QUANTITY - value transferred in Wei. v : QUANTITY - ECDSA recovery id r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s payer : DATA , 20 Bytes - address of the payer. fee : QUANTITY - transaction fee in Wei. pv : QUANTITY - ECDSA recovery id pr : DATA , 32 Bytes - ECDSA signature pr ps : DATA , 32 Bytes - ECDSA signature ps","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_27","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByHash\",\"params\":[\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\"],\"id\":1}' // Result { \"jsonrpc\":\"2.0\", \"id\":1, \"result\":{ \"blockHash\":\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"blockNumber\":\"0x5daf3b\", // 6139707 \"from\":\"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d\", \"gas\":\"0xc350\", // 50000 \"gasPrice\":\"0x4a817c800\", // 20000000000 \"hash\":\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\", \"input\":\"0x68656c6c6f21\", \"nonce\":\"0x15\", // 21 \"to\":\"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb\", \"transactionIndex\":\"0x41\", // 65 \"value\":\"0xf3dbb76162000\", // 4290000000000000 \"v\":\"0x25\", // 37 \"r\":\"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea\", \"s\":\"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c\" \"payer\":null, \"fee\":null, \"pv\":null, \"pr\":null, \"ps\":null } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gettransactionbyblockhashandindex","text":"Returns information about a transaction by block hash and transaction index position.","title":"tai_getTransactionByBlockHashAndIndex"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_28","text":"DATA , 32 Bytes - hash of a block. QUANTITY - integer of the transaction index position.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_12","text":"params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', '0x0' // 0 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_28","text":"See tai_getTransactionByHash","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_28","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByBlockHashAndIndex\",\"params\":[\"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\", \"0x0\"],\"id\":1}' Result see tai_getTransactionByHash","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gettransactionbyblocknumberandindex","text":"Returns information about a transaction by block number and transaction index position.","title":"tai_getTransactionByBlockNumberAndIndex"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_29","text":"QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . QUANTITY - the transaction index position.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_13","text":"params: [ '0x29c', // 668 '0x0' // 0 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_29","text":"See tai_getTransactionByHash","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_29","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}' Result see tai_getTransactionByHash","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_gettransactionreceipt","text":"Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions.","title":"tai_getTransactionReceipt"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_30","text":"DATA , 32 Bytes - hash of a transaction","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_14","text":"params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_30","text":"Object - A transaction receipt object, or null when no receipt was found: transactionHash : DATA , 32 Bytes - hash of the transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. blockNumber : QUANTITY - block number where this transaction was in. from : DATA , 20 Bytes - address of the sender. to : DATA , 20 Bytes - address of the receiver. null when it's a contract creation transaction. cumulativeGasUsed : QUANTITY - The total amount of gas used when this transaction was executed in the block. gasUsed : QUANTITY - The amount of gas used by this specific transaction alone. contractAddress : DATA , 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null . to : DATA , 20 Bytes - The address the transaction is directed to. logs : Array - Array of log objects, which this transaction generated. logsBloom : DATA , 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. It also returns either : root : DATA 32 bytes of post-transaction stateroot (pre Byzantium) status : QUANTITY either 1 (success) or 0 (failure)","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_30","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getTransactionReceipt\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238', transactionIndex: '0x1', // 1 blockNumber: '0xb', // 11 blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', cumulativeGasUsed: '0x33bc', // 13244 gasUsed: '0x4dc', // 1244 contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155', // or null, if none was created logs: [{ // logs as returned by getFilterLogs, etc. }, ...], logsBloom: \"0x00...0\", // 256 byte bloom filter status: '0x1' } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_newfilter","text":"Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call tai_getFilterChanges .","title":"tai_newFilter"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#a-note-on-specifying-topic-filters","text":"Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: * [] \"anything\" * [A] \"A in first position (and anything after)\" * [null, B] \"anything in first position AND B in second position (and anything after)\" * [A, B] \"A in first position AND B in second position (and anything after)\" * [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"","title":"A note on specifying topic filters:"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_31","text":"Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_15","text":"params: [{ \"fromBlock\": \"0x1\", \"toBlock\": \"0x2\", \"address\": \"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", null, [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\"]] }]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_31","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_31","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newFilter\",\"params\":[{\"topics\":[\"0x0000000000000000000000000000000000000000000000000000000012341234\"]}],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_newblockfilter","text":"Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call tai_getFilterChanges .","title":"tai_newBlockFilter"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_32","text":"None","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_32","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_32","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newBlockFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_newpendingtransactionfilter","text":"Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call tai_getFilterChanges .","title":"tai_newPendingTransactionFilter"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_33","text":"None","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_33","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_33","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_newPendingTransactionFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_uninstallfilter","text":"Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with tai_getFilterChanges for a period of time.","title":"tai_uninstallFilter"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_34","text":"QUANTITY - The filter id.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_16","text":"params: [ \"0xb\" // 11 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_34","text":"Boolean - true if the filter was successfully uninstalled, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_34","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_uninstallFilter\",\"params\":[\"0xb\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getfilterchanges","text":"Polling method for a filter, which returns an array of logs which occurred since last poll.","title":"tai_getFilterChanges"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_35","text":"QUANTITY - the filter id.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_17","text":"params: [ \"0x16\" // 22 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_35","text":"Array - Array of log objects, or an empty array if nothing has changed since last poll. For filters created with tai_newBlockFilter the return are block hashes ( DATA , 32 Bytes), e.g. [\"0x3454645634534...\"] . For filters created with tai_newPendingTransactionFilter the return are transaction hashes ( DATA , 32 Bytes), e.g. [\"0x6345343454645...\"] . For filters created with tai_newFilter logs are objects with following params: removed : TAG - true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex : QUANTITY - integer of the log index position in the block. null when its pending log. transactionIndex : QUANTITY - integer of the transactions index position log was created from. null when its pending log. transactionHash : DATA , 32 Bytes - hash of the transactions this log was created from. null when its pending log. blockHash : DATA , 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log. blockNumber : QUANTITY - the block number where this log was in. null when its pending. null when its pending log. address : DATA , 20 Bytes - address from which this log originated. data : DATA - contains the non-indexed arguments of the log. topics : Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity : The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256) ), except you declared the event with the anonymous specifier.)","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_35","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getFilterChanges\",\"params\":[\"0x16\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": [{ \"logIndex\": \"0x1\", // 1 \"blockNumber\":\"0x1b4\", // 436 \"blockHash\": \"0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"transactionHash\": \"0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\", \"transactionIndex\": \"0x0\", // 0 \"address\": \"0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"data\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"topics\": [\"0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\"] },{ ... }] }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getfilterlogs","text":"Returns an array of all logs matching filter with given id.","title":"tai_getFilterLogs"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_36","text":"QUANTITY - The filter id.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_18","text":"params: [ \"0x16\" // 22 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_36","text":"See tai_getFilterChanges","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_36","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getFilterLogs\",\"params\":[\"0x16\"],\"id\":74}' Result see tai_getFilterChanges","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getlogs","text":"Returns an array of all logs matching a given filter object.","title":"tai_getLogs"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_37","text":"Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. blockhash : DATA , 32 Bytes - (optional) With the addition of EIP-234 (Gtai >= v1.8.13 or Parity >= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash . Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash . If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_19","text":"params: [{ \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"] }]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_37","text":"See tai_getFilterChanges","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_37","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getLogs\",\"params\":[{\"topics\":[\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]}],\"id\":74}' Result see tai_getFilterChanges","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getwork","text":"Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").","title":"tai_getWork"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_38","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_38","text":"Array - Array with the following properties: 1. DATA , 32 Bytes - current snailBlock header without nonce 2. DATA , 32 Bytes - the seed hash used for the DAG. 3. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / fruit difficulty. 4. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / snailBlock difficulty.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_38","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_getWork\",\"params\":[],\"id\":73}' // Result { \"jsonrpc\": \"2.0\", \"id\": 73, \"result\": [\"0xbcdcb8533dcf88b736f5b44f777250922f0f0472d4dd34a5a1b445a0c47aceed\", \"58bc067579760d307143ec1cd416eb3814110d29bf21aba0cd18586e2f038791\", \"0x0000000000000000000000000000000000000000000000000000000000000064\", \"0x0000000000000000000000000000000000000000000000000000000000002710\"] }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_submitwork","text":"Used for submitting a proof-of-work solution.","title":"tai_submitWork"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_39","text":"DATA , 8 Bytes - The nonce found (64 bits) DATA , 32 Bytes - The header's pow-hash (256 bits) DATA , 32 Bytes - The mix digest (256 bits)","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_20","text":"params: [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_39","text":"Boolean - returns true if the provided solution is valid, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_39","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_submitWork\", \"params\":[\"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_submithashrate","text":"Used for submitting mining hashrate.","title":"tai_submitHashrate"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_40","text":"Hashrate , a hexadecimal string representation (32 bytes) of the hash rate ID , String - A random hexadecimal(32 bytes) ID identifying the client","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_21","text":"params: [ \"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_40","text":"Boolean - returns true if submitting went through succesfully and false otherwise.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_40","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_submitHashrate\", \"params\":[\"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_committeenumber","text":"get current committee number","title":"tai_committeeNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_41","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_41","text":"QUANTITY - integer of the current committee number.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_41","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_committeeNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": 8 }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_fruitnumber","text":"get current fruit number","title":"tai_fruitNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_42","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_42","text":"QUANTITY - integer of the current fruit number.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_42","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_fruitNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": \"0x1975f\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_rewardsnailblock","text":"get current reward snalBlock infomation","title":"tai_rewardSnailBlock"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_43","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_43","text":"Object - A snail block object, or null when no snail reward block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fastNumber : QUANTITY - default 0. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail reward number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_43","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_rewardSnailBlock\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x193a0\", \"difficulty\": \"0x2710\", \"endFruitNumber\": \"0x193db\", \"extraData\": \"0xd9820a018667657472756588676f312e31302e38856c696e7578\", \"fastNumber\": 0, \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x7dad8df99080412919a4e0018c980e6bf40e64bff5e09f0ec45efd63530ed95e\", \"fruits\": [\"0x421cf9aa22145c141d3235a5b19c73d10613cc782221f279c3a136f136ac811e\", \"0xb6fdad4a0287102adba3b5bbe9789598694c028491de7c459f47248ee1844132\", \"0xa784a38af019ea321c725bf6b6ed61398bb86d4b20289c0a6ef54a20eced554c\", \"0x8fe6337b88ee4f19514670d49f5a64e736edfd7ae8c34fecc6d54ce923325991\", \"0x9dcbc81a1e764f6c0a6591e72000776dad6752be2d9c65b77a2157bc88a65333\", \"0x5cbac30e3a8d3246bbb84b570aecfa69b1d364738e4223fa17fe047b307ed7f2\", \"0x75115e8cdcfba043c57c2a10c6e781ab582f85b2e715cbacc42e3d2f96bc7cac\", \"0x08fe101b8ef2304965b5008267ee321ddbc48b1fd210b4dff81441e9c57f2e0f\", \"0xe31577b98c384074b37ad1d9cad88d31483b152ed96106e17f9864ded8052f62\", \"0xce3f340eb5c0582e82f5f9c550373ba069af140b50eabaf7a044717eada32536\", \"0x879f73afc3cb734dd9b5b7fe7687b6f8d6a5b8e7d20c4f730dbd0f84590ac0de\", \"0xd0c3c2c31f6b19c618c709968624ca02b23341b01178f9de23b43a406755c93e\", \"0xaa1285332874bd67c7b37b7b81f66e0b3fe6b38b176d22a0ee0349ef3120f9c4\", \"0xaed6ff91f2f1de5fcd7880797b841c61458bd59fe3f4bd4e80823d99a555049f\", \"0x46e8303c548f82e59741ee94ced70a0df1500abef9d667f131a39e71b9aaff0c\", \"0xedc6d3a94624bd914435119493c5d73545c854385758e86cb1b2c6445de7a6d4\", \"0x46a42a82461c5b92ef7ecf86c6d84dd8a7abeddd72a444467c109da53de26f10\", \"0xf23a03a1698426280449512bf19f731c56051cd19d04976009d7d2e03d6294a4\", \"0x4f2b30f026d64d56ec8d0fc69ef0959bbceeff648eafe8ff3c711af4d0f796eb\", \"0xbcfd45ccd7456fdb5dc3d19a2bd65f4b37530e4772fb6a6364376df3dee8b883\", \"0x3c1ce1153fc784870812be53f89c549063c5056d653db16621232582b6fe51f7\", \"0x8dfbb789f49ff07237c5650fa166d7adf9a2ff5b0ee967e510686a0df24b5e6e\", \"0x06aef81bc2b5d914fc553dad79a83dc0660c33c75448e62129b1da8443a3e704\", \"0xf291e642625bf18ddc03eb2c6287dea900457bcf8102834c26fb08438eb5d434\", \"0x73bb8bc367a789ce6e69ef4e21ffec76e103d36a85a01a460bd268a1ceec992a\", \"0x364c55068a8341db5e3ecc6fa6cc328e1b038d9a567b85fb3e470d8ee12a2fd8\", \"0x460e5ddc879c9da6090296d04fc522fcfc4341566856c0e4b81a6ee459922c06\", \"0x0f17e693874809172d889bd813ed4e825fdc4436d4c97bc48725b924ab612ce5\", \"0xca07ab5afbdc766247276e3641df8206cc89ca00660f3d72ceac86b1e192652a\", \"0x96027060b71fb9b758131b70c481c2e5f916bb821fa7295a834080c89698dbe1\", \"0xb9ed69d03aa2a80e358950b82fbd083fbef5069b6b8f2488cd74d70260b5de9b\", \"0x71c0249266f922677eab708b5de86fe1f057b6b39ad6dcd05230de89a0021eba\", \"0xbcb6f37b63558db10bedab0f722e34341a6329f57248e00606fe184613468c5c\", \"0x08eb945b49599aa7903bac856f5f5bb9d260bc1c2c553b2ab9d69a8611c4c935\", \"0xcac5bb4daec7f138cb820e5fd4b958184c9e724d4879662f4422df0230aadb14\", \"0xd29c761ec3504ae091998c2acbc3e739635d99e0764a7f521021a8ae7c068c36\", \"0xe5de172346d9d1f423a09726ca6e992725986c54bf2818ba537d341ba63ebf19\", \"0x337f7834016004bfa59869cfc357035dbc8128b340ed062e7a30a93bee2ac3fb\", \"0xf0f6790614751991e9d04548c7a81b0ef28aff686a704e4cfbfe1de01e6fce9e\", \"0x502e04348f225907f8528d9196c7113bd3c15d3080c1c1718c85c8cc073ea7bb\", \"0x663bf65f7e766082cfb84ab2d9303f9c078e2819eb2197d6f6318dafc55cfa98\", \"0x282b563050f940059986b4745345f14ce6d7e96b7160ead7a27985ce99aeae9b\", \"0x1459d9bb5939fe563d6d9502e28184d5c4619c10d0e0f6699b746daf4c1b0400\", \"0xc7d3fff73e954042d5bd91107252ff3986c9c756869c0484954d82831dfbfb28\", \"0x0cb9e8929bf625b0916879359fc617ce0b4e7f474df5cf53414d2075e8668cca\", \"0x9b8715bf3090fdf115ae675bf4692e5dc3e8453b126fd729ddfabbfaed11aa66\", \"0x69668b51d76ce1ab186158f05ef8d92394803b9f0c3e508d18d39fe45f2e25d4\", \"0x972f4e2f865c5e00f377418a2a0469e3abd3c1b64b2cdd803904dd33a9bfc7a0\", \"0x3ccb10a6a69fcfe8da544bddfcadf6be6a295dd4b38ab5ba0f9e8aa36f4188fd\", \"0x4098d83b4e8f506c7b85560a8e84017f845b1083b864e3975208ece07f98074f\", \"0xec6edff7cd40f0bc41b1ed6a129e88bec38cd6474f130363cd6dccc31d49a717\", \"0xa89aa9e24a3f0926bbbfc4c8a80ed872f58963f83d7d99b13f169463783f4e52\", \"0x07bb236e22e0d322d962bb28f329aed7ce8e9c460215d8700826a5faa777ccac\", \"0xf87aa14c01ee28584632c6db9b1667d27c8d0c0eb947d286318641e549dd3c1c\", \"0x2aeb9798bade7ece9a6fc803e9fb7359c14cb6c27dd986a27e8b20639dda5377\", \"0x07858381ad1ab29ac5a0f34fd78420cffa494c0dbb9bca64c1bff28075ba490b\", \"0x121d18d6770575a34480a8ddc268e87438e424d721d1b76c84cb60297d0a7156\", \"0xc54357b750662ef429845acfeacf482cffa4b253373e05199da3e01301823572\", \"0xe1bcd60bafc03acbcc8c8c6b454af4ecc1171cbc7d9ab4ed1e321bab82308af8\", \"0x7917615f4519f7160de4ac556c8de805ce8bc464e5784642cc937e000512ad0f\"], \"hash\": \"0xb913521609feef2b7cc351efe0d0b359796c709176e8824622bc6dee312a227f\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x0000b9b5b60cbaa58a008425f70c3e610794e9eb9ffa7e8c9ab257c451afcc22\", \"nonce\": \"0x279486ec07bf61d6\", \"number\": \"0x6b4\", \"parentHash\": \"0xa24c81127edb0a630b13205b498d8ef0f7d47a4678e96827f8f19ffd2c470a24\", \"pointerNumber\": 1708, \"size\": \"0x101bb\", \"timestamp\": \"0x5c9194ec\" } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_snailblocknumber","text":"get current snail block number","title":"tai_snailBlockNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_44","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_44","text":"QUANTITY - integer of the current snail block number.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_44","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_snailBlockNumber\", \"params\":[],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\": \"0x38\" }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getcommittee","text":"get committee member infomation","title":"tai_getCommittee"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_45","text":"```js params: [\"0x1\"] ##### Returns - `backups`: `Array` - Array of backup committee members, each committee member info contains pubkey\u3001 coinbase\u3001flag\u3001type. - `beginNumber`: `QUANTITY` - the begin fast block number. - `beginSnailNumber`: `QUANTITY` - the begin snail block number. - `endNumber`: `QUANTITY` - the end fast block number. - `endSnailNumber`: `QUANTITY` - the end snail block number. - `id`: `QUANTITY` - committeeId. - `memberCount`: `QUANTITY` - the number of committee members . - `members`: `Array` - Array of committee members. ##### Example ```js // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getCommittee\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"backups\": [{ \"PKey\": \"0488a25849abee5921fdb581ba34cd66adc8e02b108391c4153ca8da27722e16badf4fcd5ba7f557ae76d444ccf3638e4590a181805623de1cab67f31364c79736\", \"coinbase\": \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a9a1cedb8900d893b607c4dbc834abada3fe98f247b8bcb5ef44d3d3a246c4cf41d9d792527473c30ded81fa4b81afe7030a09e093dd92746b98c79e6a204c63\", \"coinbase\": \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"040d153624462927444a8212717e4ad41ec5f5739bc36598d093d114729e1dc782d55d322699705829cf9d69f201009db797ebe8ba952f10a26fe36c64356b111b\", \"coinbase\": \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3474c26578fce00d241119758271f6a208cc987c6f37d1518dcea2a51257bafeebd93202ae499cb5a8986720d4b63a04043aadb4d03430194a81860c9ca0763\", \"coinbase\": \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04d370defb1b7b8c086f98c4a7d7b90348b088cd2effdcc27b86feebdff499a192b4a5a5b16a400625271d69b3fa7d8c42c8b2e15c910cd1f314f28eb5beb73342\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", \"coinbase\": \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", \"flag\": 160, \"type\": 161 }], \"beginNumber\": 19781, \"beginSnailNumber\": 1, \"endNumber\": 30725, \"endSnailNumber\": 168, \"id\": 1, \"memberCount\": 21, \"members\": [{ \"PKey\": \"04ad2da6433f25f5063c98fb414496bd794f3054544408a63da4c6488a35a7c7ba38e8dbae49356182dcd81f45a715feb1f7f696c3a1bd77e33ab8ab41d8177ca3\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb9577ae8e19d99f708b8d46de17220afaf2d4a89676d98c8e8558e4e10f0283733a6a4a47aee779081cedd9266d5b4edcfc4fa22a4d69e3da98f6a03ad4e372\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"0497413104d718ef592fa4526e796be092a143272f9c7b415c23c73201a9cf3da2ec928e11958246ee2f8e838ec67506e798c4e8fcec89f5e8c9696235f600e765\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04dc2a2cba3793da755d28f02336193a8e04c77cb3fdef5f04a4197c71f59f978767729ff652267e4c0fc9204c7e921931c207e32ba442ac27a20acaad49324696\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047a523df31438d3efc02c4126b891d5e1258371336decfe43a15efcb519607aa2b932f895808f4414f75b525d7a490e10be314a6b60971c7149156b9d659fb591\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04ea62525863113273df44d8b5bbbcf0c1df5d03b94dd60308b747c1894af70dd5eaf5facfb1577bb4416ba517375ce662769f69b0c5fa961ac0cd9a4a342e4f67\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04601fc9ac609d9d47d01f76bcdf496a1b3d2aaf9dc4c97319faff49e2284ad843aa5505343376db1357b9cc0d176fe828d7a07cc8cd0993aee3b76d77eda2be4b\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04b64ba599ff0e0c2418357f87ed6058f04801ce0e0f653e336aa2f0b9c9620b1ed9222648100d7cadfbbe2cadb66b94e66eeed80b0a96da7808bc55fd8dd282a2\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"044aa7cef6d282ec22e0ef6d55d36b17d607afee920668320430717552cd7d4905e07d92a0e939f96ef6d617174a136267ed6a4efcc14879abe6aa097965fb4740\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04506b3c55ac57f78b41b2e47afc8d0f8d9891803822bbc4fe35bf3be72ad91056b0aae8a5fa76309f093987202a284c67d5918ca23a31e2e6535255c58240bf59\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04a69c470e1b4ea2a05d8a70de7c15687131bbb66105049a5bbdb04645381a29899ec72af7929c645ec0d29a91b4359de2629618b763a333d52bb4f436cccf9a9d\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"046e61555ed9bd6bb08b3f5034373bfc4472a8ca8868d21e1ceb4fe3f24c42c3a5dc7cb492ca62a31bfa6c82f86fed02dfa23196c25a76673ddb7a1f3f6eaafc84\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb4c070000b1c4525e42d2cf61a0f1449ef82ce534a19ff03cf8c2a480d16e9738f5162972e15262992eb21cf561b7bae2e49e9dc8eb2b8f52dd9100f2bdce4e\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047fc0ae115cadf26b472ed4bed8785ca535c9fe53eb896bd21d7d7d7e1ee242881c50fa5eeaba4465e1992d5b917ae1f891c1e85e0bb5e0201e885886e846102b\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }] } }","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getfruitbynumber","text":"get fruit block by fruit number","title":"tai_getFruitByNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_46","text":"QUANTITY - integer of the fruit number. Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_22","text":"params: [ \"0x1\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_45","text":"Object - A fruit object, or null when no fruit was found: - difficulty : QUANTITY - integer of the difficulty for this snail reward block. - extraData : DATA - the \"extra data\" field of this reward block. - fastHash : DATA , 32 Bytes - hash of the fruit. - fastNumber : QUANTITY - fruit. - fruitDifficulty : QUANTITY - integer of all fruit difficulty for the fruit. - hash : DATA , 32 Bytes - hash of the fruit. - miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. - mixHash : DATA , 32 Bytes - the mix digest. - nonce : QUANTITY - the mining nonce. - number : QUANTITY - the fruit number. - size : QUANTITY - integer the size of the fruit in bytes. - timestamp : QUANTITY - the unix timestamp for when the fruit was collated.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_45","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getFruitByNumber\", \"params\":[\"0x1\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"difficulty\": \"0x4e20\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fastHash\": \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", \"fastNumber\": 1, \"fruitDifficulty\": \"0x64\", \"hash\": \"0xd5d8719f456a59249570bb7adf9e37c7d2e30621fbc0aab8ee2817bf591e3acc\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0xb01e70ab492dcede93395389b9193201011e950f181180f78ad98ae58184601d\", \"nonce\": \"0x033aebb6a27a911a\", \"number\": 1, \"signs\": 5, \"size\": 865, \"timestamp\": \"0x5c87b12a\" } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getfruitbyhash","text":"get fruit block by fruit hash","title":"tai_getFruitByHash"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_47","text":"DATA , 32 Bytes - hash of fast block. Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_23","text":"params: [ \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_46","text":"See tai_getFruitByNumber","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_46","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getFruitByHash\", \"params\":[\"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\",false],\"id\":100}' // Result See tai_getFruitByNumber","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getrewardblock","text":"return the fast block position where the given snail block is rewarded","title":"tai_getRewardBlock"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_48","text":"QUANTITY - integer of the snail reward block number","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_24","text":"params: [ \"0x15\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_47","text":"Object - A fast block object, or null when no snail reward block was found: committeeRoot : DATA , 32 Bytes - hash of committee members. snailHash : DATA , 32 Bytes - hash of the snail reward block. snailNumber : QUANTITY - the reward snail number. extraData : DATA - the \"extra data\" field of fast block. gasLimit : QUANTITY - the maximum gas allowed in fast block. gasUsed : QUANTITY - the maximum gas allowed in fast block. hash : DATA , 32 Bytes - hash of the fast block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. number : QUANTITY - the fast block number. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the fast block. signs : Array - Array of each committee member sign. size : QUANTITY - integer the size of the fast block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the fast block. switchInfos : Array , - Array of switch committee member. timestamp : QUANTITY - the unix timestamp for when the fast block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the fast block.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_47","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getRewardBlock\", \"params\":[\"0x15\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"committeeRoot\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"SnailHash\": \"0xeae9f91963eb64f0ca6e5bcf8551d8efd0d1c7f8d5ff207856c303faef86e419\", \"SnailNumber\": 21, \"extraData\": \"0x\", \"gasLimit\": \"0x4b99999\", \"gasUsed\": \"0x668a0\", \"hash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"number\": \"0x7e5\", \"parentHash\": \"0x3f1105c6fa853944a84fe9ef7eefcc2bcbb08860c302aed652c773d1bbc0b2f0\", \"receiptsRoot\": \"0x824c56f642d67e881555ec142168cc2364a1343129e34044dea382088cb5fa42\", \"signs\": [{ \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x763026fef783d8bfdf4b06309a1aafbebce229e846383131dc430c6c29ff42bd033d3719f4c70e96bd5a80e46a9a67d2f647fbc7c2e0a7b32c0cf8824feca29300\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x4c11748616eda54ca216fc8fd28957459c629caea7967e73f23ac02419e9dfba4650b7cbfd3fd9a0f4737724234941c98fa9a6ad00ffd3f860e9dd5be5ac366c00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x86d689580eac3ce23453dec705ed8cd5c0ed992d0a4296ebea4bc5373f90bb1a56fbc121d6146f4c7ac6416e74b5a876012e25497dd70402b3461c13c9475a2800\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0xaa1d76682f8ce81fa449819a6921808010114d4433945da40d323d5d8f57ebac78fc7096fbf0307dcdac5e8c9e6b2be80aa3959a6e6304d85d7a534e0e2714cc00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x90b4ce8a7a13d070d9b360173e1c96dd7d95c33e7f7689187117dafae46393a8764ce36db25881fcbf82ba692b18eb2450aa2f69667391e6c55025d9f6704d1701\" }], \"size\": \"0xca7\", \"stateRoot\": \"0xc422d6752c0aa8e0a773ddd5b12950f3c30361ce7320c6fa59eb77c9f36ca07e\", \"switchInfos\": [], \"timestamp\": \"0x5c87bf4c\", \"transactions\": [\"0xee311d9a6e95b0740488a8c797fc36b0ddbba97005c8623d0c8258509ad0e34b\", \"0x9be94692e83f76fbf8a9ff7a4b9caa83141bf5c7bd91b768669802b18357146c\", \"0x167c29e6b6278a999c0debe02b51407cbe9f23e701f53fa2c80e141ab42f8cd4\", \"0x481f16a6866ce56774c5a14bfbf9a19391868761d09403acaea4d9a74fe33bd7\", \"0x133457504d0c23f84b58b9f82aae15012b48c5bcb5fcff904d795fe78de1ce88\", \"0xff98231ecd6b0358d15eec72ebb8920ed5312c30305fb21845485316b1cf8ddd\", \"0x3282ec6633cb743a2e177f0a999b1f366bcf900069c33c40a4a1c3b7b4fc5ed6\", \"0x897e1b6226666a5c031bf528527e68efb63a7d3c4b6431d758858c554a3cf38a\", \"0x034bf45b679a2283deec9c3c514b0dfe6dc1ab4980864ceeafd9989bd56410f0\", \"0x129bc008bcae647a55d900068ae657e3f9073a37d03933d149ba529abd15c63c\", \"0xc5831516e417510b6f4069093c8845de24e62a1adee409c35164b8b6cf26465d\", \"0xb0ef3a7209af20990b2e346dc7f963d11e0da3a42ae04640502b81e30ac96202\", \"0x8c79698e30cbd7c50781eaa6077667428cf51027086762d9349ee9987d9ebe36\", \"0xf48839d7212c9d01684237131f68f81a30fe6635eb39b0030bab3e68c75bbefa\", \"0x94aff39d085551389a198378137e5dd694ce689e5ad326910f18f167ff81f16c\", \"0x882c79c2678a0fc0099bca068ca05bb239405c8a2f363a3b755b4049c67f41c7\", \"0xaa5855c69051b82716bdc9b7f9190ef06c06411d0d43d8786fbf14a3898446a6\", \"0x508b4357b911624c11bb5a90d880c86ed92f5f430454f64b6e63ea884cec0589\", \"0x652a73ec17dab453db88a9e292bf684a814101d7013a489fbbae98ed9c221f03\", \"0xa95cbff42440d0a000ad55969f95fc5b5ff947efd95dbb0f9607acf849dbfbd9\"], \"transactionsRoot\": \"0xcfcce7b64115b9086a78c0449ceb70aac9b08c0d221943470ffacbbdc71fba9a\" } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getsnailblockbynumber","text":"get snail block by number","title":"tai_getSnailBlockByNumber"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_49","text":"QUANTITY - integer of the snail block number,or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Boolean - whether show fruits in snail block","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_25","text":"params: [ \"0x19\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_48","text":"Object - A snail block object, or null when no snail block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail block number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated.","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_48","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailBlockByNumber\", \"params\":[\"0x19\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x5a9\", \"difficulty\": \"0x9e86\", \"endFruitNumber\": \"0x5e4\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x02c44355f9aa43305f7507efd77ab13a74b0a7bde1d923ac62135e8e3bfe4afd\", \"fruits\": 60, \"hash\": \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x000122785a555ca6b63c54e1ff398cf5ae9f6176391de526a7d3a9277b13cfaf\", \"nonce\": \"0x719c13f20436b852\", \"number\": \"0x19\", \"parentHash\": \"0x1d2361639c4b26f9481caf680e6db21af1c8d9159f804b01a37611a1e057487a\", \"pointerNumber\": 17, \"size\": \"0xcee1\", \"timestamp\": \"0x5c87bbcf\" } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getsnailblockbyhash","text":"get snail block by hash","title":"tai_getSnailBlockByHash"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_50","text":"DATA , 32 Bytes - hash of snail block . Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example-parameters_26","text":"params: [ \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_49","text":"See tai_getSnailBlockByNumber","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_49","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailBlockByHash\", \"params\":[\"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\",false],\"id\":100}' // Result See tai_getSnailBlockByNumber","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getdataset","text":"the Minverva algorithm calculates the required source of dataset, and updates the dataset every 12,000","title":"tai_getDataset"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_51","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_50","text":"[null,null,null,null,null,null....,null]. -when snailBlock number exceed 12000, return not nil","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_50","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getDataset\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { [null, null, null, null, ......, null, null] } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#tai_getsnailrewardcontent","text":"get snailBlock reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit","title":"tai_getSnailRewardContent"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#parameters_52","text":"QUANTITY - integer of a block number.","title":"Parameters"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#returns_51","text":"blockminer : -snailblock miner address and reward committeReward : -committee member address and reward for all fruit fruitminer : -fruit miner address and reward for each fruit","title":"Returns"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#example_51","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"tai_getSnailRewardContent\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"blockminer\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 61629629629629000000 }, \"committeReward\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 23111111111110999785 }, \"fruitminer\": [{ \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }] } }","title":"Example"},{"location":"source/taiyuepublic/--github.com-taiyuechain-taipublicchain-engineering-code-wiki-_new/#eth","text":"In order for more developers to participate in the truechain ecosystem and be friendly to developers, truechain is compatible with ethereum. Please refer to the instructions of ethereum for detailed rules of use","title":"Eth"},{"location":"source/taiyuepublic/Backup-%26-restore/","text":"DO NOT FORGET YOUR PASSWORD and BACKUP YOUR KEYSTORE Backup & restore Data directory Everything taipublic persists gets written inside its data directory (except for the PoW Ethash DAG, see note below). The default data directory locations are platform specific: Mac: ~/Library/taipublicchain Linux: ~/.taipublicchain Windows: %APPDATA%\\taipublicchain Accounts are stored in the keystore subdirectory. The contents of this directories should be transportable between nodes, platforms, implementations (C++, Go, Python). To configure the location of the data directory, the --datadir parameter can be specified. See CLI Options for more details. Upgrades Sometimes the internal database formats need updating. This can be run with the following command (taipublic should not be otherwise running): taipublic upgradedb Cleanup taipublic's blockchain and state databases can be removed with: taipublic removedb This is useful for deleting an old chain and sync'ing to a new one. It only affects data directories that can be re-created on synchronisation and does not touch the keystore. Blockchain import/export Export the blockchain in binary format with: taipublic export <filename> Or if you want to back up portions of the chain over time, a first and last block can be specified. For example, to back up the first epoch: taipublic export <filename> 0 29999 Note that when backing up a partial chain, the file will be appended rather than truncated. Import binary-format blockchain exports with: taipublic import <filename> And finally: DO NOT FORGET YOUR PASSWORD and BACKUP YOUR KEYSTORE","title":"Backup & restore"},{"location":"source/taiyuepublic/Backup-%26-restore/#backup-restore","text":"","title":"Backup &amp; restore"},{"location":"source/taiyuepublic/Backup-%26-restore/#data-directory","text":"Everything taipublic persists gets written inside its data directory (except for the PoW Ethash DAG, see note below). The default data directory locations are platform specific: Mac: ~/Library/taipublicchain Linux: ~/.taipublicchain Windows: %APPDATA%\\taipublicchain Accounts are stored in the keystore subdirectory. The contents of this directories should be transportable between nodes, platforms, implementations (C++, Go, Python). To configure the location of the data directory, the --datadir parameter can be specified. See CLI Options for more details.","title":"Data directory"},{"location":"source/taiyuepublic/Backup-%26-restore/#upgrades","text":"Sometimes the internal database formats need updating. This can be run with the following command (taipublic should not be otherwise running): taipublic upgradedb","title":"Upgrades"},{"location":"source/taiyuepublic/Backup-%26-restore/#cleanup","text":"taipublic's blockchain and state databases can be removed with: taipublic removedb This is useful for deleting an old chain and sync'ing to a new one. It only affects data directories that can be re-created on synchronisation and does not touch the keystore.","title":"Cleanup"},{"location":"source/taiyuepublic/Backup-%26-restore/#blockchain-importexport","text":"Export the blockchain in binary format with: taipublic export <filename> Or if you want to back up portions of the chain over time, a first and last block can be specified. For example, to back up the first epoch: taipublic export <filename> 0 29999 Note that when backing up a partial chain, the file will be appended rather than truncated. Import binary-format blockchain exports with: taipublic import <filename> And finally: DO NOT FORGET YOUR PASSWORD and BACKUP YOUR KEYSTORE","title":"Blockchain import/export"},{"location":"source/taiyuepublic/Building-taiyuechain/","text":"Installation Instructions Follow the appropriate link below to find installation instructions for your platform. Installation Instructions for Mac OS X Installation Instructions for Windows Installation Instructions for Linux/Unix Ubuntu Centos Usage instructions for Docker Docker","title":"Building taiyuechain"},{"location":"source/taiyuepublic/Building-taiyuechain/#installation-instructions","text":"Follow the appropriate link below to find installation instructions for your platform. Installation Instructions for Mac OS X Installation Instructions for Windows Installation Instructions for Linux/Unix Ubuntu Centos Usage instructions for Docker Docker","title":"Installation Instructions"},{"location":"source/taiyuepublic/Command-Line-Options/","text":"$ taipublic help NAME: taipublic - the taipublicchain command line interface Copyright 2018-2019 The taipublicchain Authors USAGE: taipublic [options] command [command options] [arguments...] VERSION: 1.1.2 -stable COMMANDS: account Manage accounts attach Start an interactive JavaScript environment (connect to node) bug opens a window to report a bug on the taipublic repo console Start an interactive JavaScript environment copydb Create a local chain from a target chaindata folder dump Dump a specific block from storage dumpconfig Show configuration values export Export blockchain into file export-preimages Export the preimage database into an RLP stream import Import a blockchain file import-preimages Import the preimage database from an RLP stream init Bootstrap and initialize a new genesis block js Execute the specified JavaScript files license Display license information monitor Monitor and visualize node metrics removedb Remove blockchain and state databases version Print version numbers wallet Manage taipublicchain presale wallets help, h Shows a list of commands or help for one command TRUCHAIN OPTIONS: --config value TOML configuration file --datadir \"/home/ligi/.taipublicchain\" Data directory for the databases and keystore --keystore Directory for the keystore (default = inside the datadir) --nousb Disables monitoring for and managing USB hardware wallets --networkid value Network identifier (default: 1) --testnet Ropsten network: pre-configured proof-of-work test network --devnet dev network: pre-configured proof-of-work develop network --syncmode \"fast\" Blockchain sync mode (\"fast\", \"full\", \"light\",or \"snapshot\") --gcmode value Blockchain garbage collection mode (\"full\", \"archive\") (default: \"full\") --stategc Delete block body and receipt --etruestats value Reporting URL of a etruestats service (nodename:secret@host:port) --identity value Custom node name --lightserv value Maximum percentage of time allowed for serving LES requests (0-90) (default: 0) --lightpeers value Maximum number of LES client peers (default: 100) --lightkdf Reduce key-derivation RAM & CPU usage at some expense of KDF strength SINGLENODE OPTIONS: --singlenode single node model start ELECTION OPTIONS: --election enable election BFT OPTIONS: --bftip committee node ip --bftport committee node port (default: 30310) --bftport2 committee node standby port (default: 30311) --bftkey committee generate bft_privatekey --bftkeyhex committee generate bft_privatekey as hex (for testing) --oldbft run bft use http TRANSACTION POOL OPTIONS: --txpool.nolocals Disables price exemptions for locally submitted transactions --txpool.journal value Disk journal for local transaction to survive node restarts (default: \"transactions.rlp\") --txpool.rejournal value Time interval to regenerate the local transaction journal (default: 1h0m0s) --txpool.pricelimit value Minimum gas price limit to enforce for acceptance into the pool (default: 1) --txpool.pricebump value Price bump percentage to replace an already existing transaction (default: 10) --txpool.accountslots value Minimum number of executable transaction slots guaranteed per account (default: 16 * 5) --txpool.globalslots value Maximum number of executable transaction slots for all accounts (default: 4096 * 5) --txpool.accountqueue value Maximum number of non-executable transaction slots permitted per account (default: 64 * 5) --txpool.globalqueue value Maximum number of non-executable transaction slots for all accounts (default: 1024 * 5) --txpool.lifetime value Maximum amount of time non-executable transaction are queued (default: 3h0m0s) FRUIT POOL OPTIONS: --fruitpool.journal Disk journal for local fruit to survive node restarts (default: \"fruits.rlp\") --fruitpool.rejournal Time interval to regenerate the local fruit journal (default: 1h0m0s) --fruitpool.count Maximum amount of fruits in fruitPending (default: 8192) PERFORMANCE TUNING OPTIONS: --cache value Megabytes of memory allocated to internal caching (default: 1024) --cache.database value Percentage of cache memory allowance to use for database io (default: 75) --cache.gc value Percentage of cache memory allowance to use for trie pruning (default: 25) --trie-cache-gens value Number of trie node generations to keep in memory (default: 120) ACCOUNT OPTIONS: --unlock value Comma separated list of accounts to unlock --password value Password file to use for non-interactive password input API AND CONSOLE OPTIONS: --rpc Enable the HTTP-RPC server --rpcaddr value HTTP-RPC server listening interface (default: \"localhost\") --rpcport value HTTP-RPC server listening port (default: 8545) --rpcapi value API's offered over the HTTP-RPC interface --ws Enable the WS-RPC server --wsaddr value WS-RPC server listening interface (default: \"localhost\") --wsport value WS-RPC server listening port (default: 8546) --wsapi value API's offered over the WS-RPC interface --wsorigins value Origins from which to accept websockets requests --ipcdisable Disable the IPC-RPC server --ipcpath Filename for IPC socket/pipe within the datadir (explicit paths escape it) --rpccorsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced) --rpcvhosts value Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default: \"localhost\") --jspath loadScript JavaScript root path for loadScript (default: \".\") --exec value Execute JavaScript statement --preload value Comma separated list of JavaScript files to preload into the console NETWORKING OPTIONS: --bootnodes value Comma separated enode URLs for P2P discovery bootstrap (set v4+v5 instead for light servers) --port value Network listening port (default: 30303) --maxpeers value Maximum number of network peers (network disabled if set to 0) (default: 25) --maxpendpeers value Maximum number of pending connection attempts (defaults used if set to 0) (default: 0) --nat value NAT port mapping mechanism (any|none|upnp|pmp|extip:<IP>) (default: \"any\") --nodiscover Disables the peer discovery mechanism (manual peer addition) --v5disc Enables the experimental RLPx V5 (Topic Discovery) mechanism --netrestrict value Restricts network communication to the given IP networks (CIDR masks) --nodekey value P2P node key file --nodekeyhex value P2P node key as hex (for testing) MINER OPTIONS: --mine Enable mining --minefruit only mine fruit --minerthreads value Number of CPU threads to use for mining (default: 8) --coinbase value Public address for block mining rewards (default = first account created) (default: \"0\") --gastarget value Target gas floor for fast block (default: 12000000) --gaslimit value Target gas ceiling for fast block (default: 16000000) --gasprice \"1000000\" Minimal gas price to accept for transactions by other nodes --extradata value Block extra data set by the miner (default = client version) --remote Enable remote mining GAS PRICE ORACLE OPTIONS: --gpoblocks value Number of recent blocks to check for gas prices (default: 20) --gpopercentile value Suggested gas price is the given percentile of a set of recent transaction gas prices (default: 60) VIRTUAL MACHINE OPTIONS: --vmdebug Record information useful for VM and contract debugging --vm.ewasm External ewasm configuration (default = built-in interpreter) --vm.evm External EVM configuration (default = built-in interpreter) LOGGING AND DEBUGGING OPTIONS: --metrics Enable metrics collection and reporting --fakepow Disables proof-of-work verification --nocompaction Disables db compaction after import --verbosity value Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail (default: 3) --vmodule value Per-module verbosity: comma-separated list of <pattern>=<level> (e.g. etrue/*=5,p2p=4) --backtrace value Request a stack trace at a specific logging statement (e.g. \"block.go:271\") --debug Prepends log messages with call-site location (file and line number) --pprof Enable the pprof HTTP server --pprofaddr value pprof HTTP server listening interface (default: \"127.0.0.1\") --pprofport value pprof HTTP server listening port (default: 6060) --memprofilerate value Turn on memory profiling with the given rate (default: 524288) --blockprofilerate value Turn on block profiling with the given rate (default: 0) --cpuprofile value Write CPU profile to the given file --trace value Write execution trace to the given file MISC OPTIONS: --help, -h show help COPYRIGHT: Copyright 2018-2019 The taipublicchain Authors","title":"Command Line Options"},{"location":"source/taiyuepublic/Home/","text":"Welcome to the taipublicchain wiki! Main entry points: Installation Instructions Developer/Management API Managing Accounts Command Line Options Developers' Guide JSON RPC API","title":"Home"},{"location":"source/taiyuepublic/Impawn-CLI/","text":"Impawn CLI TaipublicChain Impawn CLI is a tool, which can call deposit contract participate in POS. Building the source Building impawn requires both a Go (version 1.9 or later) and a C compiler. You can install them using your favourite package manager. Once the dependencies are installed, run go build -o impawn main.go query_stake.go impawn.go Command The impawn project comes with several Sub Command. SubCommand Description append After deposit, if you want continue to participate in deposit, you can use append command, no fix fee and pubkey. cancel If you want withdraw you money, First of all, you must cancel it. delegate You can find a validator address to delegate, contain sub command deposit , cancel , withdraw . querystaking If you want withdraw you money, you should send tx after lock height,which will print this height. querytx If there no have validator to process your transaction, you can waiting some minutes and use it to query. send If you want send no contract transaction, you can use send command. updatefee If you want modify delegate fee, you only use this. withdraw After send a cancel transaction, you can withdraw you money in correct height. ### Flag * --key If you use private key, you need specify a file which contains private key. * --keystore If you use private key, you need specify a file which contains private key. * --rpcaddr HTTP-RPC server listening interface (default: localhost ) * --rpcport HTTP-RPC server listening port (default: 8545 ) * --value Staking value units one true no wei * --fee Staking fee 0 - 10000(default: 0) * --address Transfer address or validator address in delegate * --txhash query tx exec result ## Running CLI Impawn $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 50000 --fee 100 This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, this node should you run validator node, because of it will use your local bft pk to election. Deposit 50000 true to staking address, fee(0-10000) set to 100, feeRate = fee / 10000. If you want become a validator candidate, you must deposit balance > 50000(true). Cancel $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 cancel This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Due to withdraw must call cancel first, sub command cancel represent you will cancel 10 true to locked state, next epoch you can withdraw. withdraw $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 withdraw This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command append represent you want withdraw 10 true to your address. Append $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 append This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and deposit 10 true to staking address. Sub command append represent you want continue staking after already having deposit. UpdateFee $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --fee 10 updatefee This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command only update validator fee(0-10000), which will influence delegator benefit. Send $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command send is send normal transaction not contract,value is transfer value, address is To address. QueryStaking $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 querystaking This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. querystaking will print in staking count(Staked), already cancel count(Locked), can withdraw count(Unlocked). Print withdraw height, after this, you can call withdraw. QueryTx $ impawn --rpcaddr 39.100.97.129 --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx This command will: Connect http://39.100.97.129:8545 node, and use querytx command specify txhash to query. Delegate deposit ``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate deposit ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate deposit express this is delegate call, address is you select validator address. Delegate cancel ``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate deposit ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate cancel express this is cancel call, address is you select validator address. Delegate withdraw ``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate withdraw ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate withdraw express this is withdraw call, address is you select validator address.","title":"Impawn CLI"},{"location":"source/taiyuepublic/Impawn-CLI/#impawn-cli","text":"TaipublicChain Impawn CLI is a tool, which can call deposit contract participate in POS.","title":"Impawn CLI"},{"location":"source/taiyuepublic/Impawn-CLI/#building-the-source","text":"Building impawn requires both a Go (version 1.9 or later) and a C compiler. You can install them using your favourite package manager. Once the dependencies are installed, run go build -o impawn main.go query_stake.go impawn.go","title":"Building the source"},{"location":"source/taiyuepublic/Impawn-CLI/#command","text":"The impawn project comes with several Sub Command. SubCommand Description append After deposit, if you want continue to participate in deposit, you can use append command, no fix fee and pubkey. cancel If you want withdraw you money, First of all, you must cancel it. delegate You can find a validator address to delegate, contain sub command deposit , cancel , withdraw . querystaking If you want withdraw you money, you should send tx after lock height,which will print this height. querytx If there no have validator to process your transaction, you can waiting some minutes and use it to query. send If you want send no contract transaction, you can use send command. updatefee If you want modify delegate fee, you only use this. withdraw After send a cancel transaction, you can withdraw you money in correct height. ### Flag * --key If you use private key, you need specify a file which contains private key. * --keystore If you use private key, you need specify a file which contains private key. * --rpcaddr HTTP-RPC server listening interface (default: localhost ) * --rpcport HTTP-RPC server listening port (default: 8545 ) * --value Staking value units one true no wei * --fee Staking fee 0 - 10000(default: 0) * --address Transfer address or validator address in delegate * --txhash query tx exec result ## Running CLI","title":"Command"},{"location":"source/taiyuepublic/Impawn-CLI/#impawn","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 50000 --fee 100 This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, this node should you run validator node, because of it will use your local bft pk to election. Deposit 50000 true to staking address, fee(0-10000) set to 100, feeRate = fee / 10000. If you want become a validator candidate, you must deposit balance > 50000(true).","title":"Impawn"},{"location":"source/taiyuepublic/Impawn-CLI/#cancel","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 cancel This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Due to withdraw must call cancel first, sub command cancel represent you will cancel 10 true to locked state, next epoch you can withdraw.","title":"Cancel"},{"location":"source/taiyuepublic/Impawn-CLI/#withdraw","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 withdraw This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command append represent you want withdraw 10 true to your address.","title":"withdraw"},{"location":"source/taiyuepublic/Impawn-CLI/#append","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 append This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and deposit 10 true to staking address. Sub command append represent you want continue staking after already having deposit.","title":"Append"},{"location":"source/taiyuepublic/Impawn-CLI/#updatefee","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --fee 10 updatefee This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command only update validator fee(0-10000), which will influence delegator benefit.","title":"UpdateFee"},{"location":"source/taiyuepublic/Impawn-CLI/#send","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. Sub command send is send normal transaction not contract,value is transfer value, address is To address.","title":"Send"},{"location":"source/taiyuepublic/Impawn-CLI/#querystaking","text":"$ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 querystaking This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node. querystaking will print in staking count(Staked), already cancel count(Locked), can withdraw count(Unlocked). Print withdraw height, after this, you can call withdraw.","title":"QueryStaking"},{"location":"source/taiyuepublic/Impawn-CLI/#querytx","text":"$ impawn --rpcaddr 39.100.97.129 --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx This command will: Connect http://39.100.97.129:8545 node, and use querytx command specify txhash to query.","title":"QueryTx"},{"location":"source/taiyuepublic/Impawn-CLI/#delegate-deposit","text":"``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate deposit ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate deposit express this is delegate call, address is you select validator address.","title":"Delegate deposit"},{"location":"source/taiyuepublic/Impawn-CLI/#delegate-cancel","text":"``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate deposit ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate cancel express this is cancel call, address is you select validator address.","title":"Delegate cancel"},{"location":"source/taiyuepublic/Impawn-CLI/#delegate-withdraw","text":"``` $ impawn --key key/bftkey --rpcaddr 39.100.97.129 --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 delegate withdraw ``` This command will: Load private key in key/bftkey file, connect http://39.100.97.129:8545 node, and delegate 10 true to staking address. Sub command delegate withdraw express this is withdraw call, address is you select validator address.","title":"Delegate withdraw"},{"location":"source/taiyuepublic/Installation-Instructions-for-Centos/","text":"Building from source Building taipublic (command line client) Clone the repository to a directory of your choosing: git clone https://github.com/taiyuechain/taipublicchain Install latest distribution of Go if you don't have it already. BuilGettaipublictattaipublico and C compilers to be installed: yum install -y build-essential Finally, build the taipublic program using the following command. cd truechain-engineering-code git checkout release/2.0 make taipublic You can now run build/bin/taipublic to start your node.","title":"Installation Instructions for Centos"},{"location":"source/taiyuepublic/Installation-Instructions-for-Centos/#building-from-source","text":"","title":"Building from source"},{"location":"source/taiyuepublic/Installation-Instructions-for-Centos/#building-taipublic-command-line-client","text":"Clone the repository to a directory of your choosing: git clone https://github.com/taiyuechain/taipublicchain Install latest distribution of Go if you don't have it already. BuilGettaipublictattaipublico and C compilers to be installed: yum install -y build-essential Finally, build the taipublic program using the following command. cd truechain-engineering-code git checkout release/2.0 make taipublic You can now run build/bin/taipublic to start your node.","title":"Building taipublic (command line client)"},{"location":"source/taiyuepublic/Installation-Instructions-for-Mac-OS-X/","text":"Building from source Building (command line client) Clone the repository to a directory of your choosing: git clone Taipublic Building getrue requires the Go compiler: brew install go Finally, build the getrue program using the following command. cd truechain-engineering-code git checkout release/2.0 make getrue If you see some errors related to header files of Mac OS system library, install XCode Command Line Tools, and try again. xcode-select --install You can now run build/bin/getrue to start your node.","title":"Installation Instructions for Mac OS X"},{"location":"source/taiyuepublic/Installation-Instructions-for-Mac-OS-X/#building-from-source","text":"","title":"Building from source"},{"location":"source/taiyuepublic/Installation-Instructions-for-Mac-OS-X/#building-command-line-client","text":"Clone the repository to a directory of your choosing: git clone Taipublic Building getrue requires the Go compiler: brew install go Finally, build the getrue program using the following command. cd truechain-engineering-code git checkout release/2.0 make getrue If you see some errors related to header files of Mac OS system library, install XCode Command Line Tools, and try again. xcode-select --install You can now run build/bin/getrue to start your node.","title":"Building  (command line client)"},{"location":"source/taiyuepublic/Installation-Instructions-for-Ubuntu/","text":"Building from source Building taipublic (command line client) Clone the repository to a directory of your choosing: git clone github.com/taiyuechain/taipublicchain Install latest distribution of Go if you don't have it already. Building taipublic requires Go and C compilers to be installed: sudo apt-get install -y build-essential Checkout the lasted release branch: cd taipublicchain git checkout release/2.0 Finally, build the taipublic program using the following command. make taipublic You can now run build/bin/taipublic to start your node.","title":"Installation Instructions for Ubuntu"},{"location":"source/taiyuepublic/Installation-Instructions-for-Ubuntu/#building-from-source","text":"","title":"Building from source"},{"location":"source/taiyuepublic/Installation-Instructions-for-Ubuntu/#building-taipublic-command-line-client","text":"Clone the repository to a directory of your choosing: git clone github.com/taiyuechain/taipublicchain Install latest distribution of Go if you don't have it already. Building taipublic requires Go and C compilers to be installed: sudo apt-get install -y build-essential Checkout the lasted release branch: cd taipublicchain git checkout release/2.0 Finally, build the taipublic program using the following command. make taipublic You can now run build/bin/taipublic to start your node.","title":"Building taipublic (command line client)"},{"location":"source/taiyuepublic/Installation-Instructions-for-Windows/","text":"Source Compiling getrue with tools from chocolatey The Chocolatey package manager provides an easy way to get the required build tools installed. If you don't have chocolatey yet, follow the instructions on https://chocolatey.org to install it first. Then open an Administrator command prompt and install the build tools we need: C:\\Windows\\system32> choco install git C:\\Windows\\system32> choco install golang C:\\Windows\\system32> choco install mingw Installing these packages will set up the Path environment variable. Open a new command prompt to get the new Path . The following steps don't need Administrator privileges. Please ensure that the installed Go version is 1.8 (or any later version). First we'll create and set up a Go workspace directory layout, then clone the source. OBS If, during the commands below, you get the following message: WARNING: The data being saved is truncated to 1024 characters. Then that means that the setx command will fail, and proceeding will truncate the Path / GOPATH . If this happens, it's better to abort, and try to make some more room in Path before trying again. 1 C:\\Users\\xxx> set \"GOPATH=%USERPROFILE%\" 2 C:\\Users\\xxx> set \"Path=%USERPROFILE%\\bin;%Path%\" 3 C:\\Users\\xxx> setx GOPATH \"%GOPATH%\" 4 C:\\Users\\xxx> setx Path \"%Path%\" 5 C:\\Users\\xxx> mkdir src\\github.com\\truechain 6 C:\\Users\\xxx> git clone https://github.com/truechain/truechain-engineering-code src\\github.com/taiyuechain/taipublicchain 7 C:\\Users\\xxx> cd src\\github.com/taiyuechain/taipublicchain 8 C:\\Users\\xxx> go get -u -v golang.org/x/net/context if the step 8 ran error, can execute the next commands: C:\\Users\\xxx> mkdir -p \"%GOPATH%\"/src/golang.org/x/ C:\\Users\\xxx> cd \"%GOPATH%\"/src/golang.org/x/ C:\\Users\\xxx> git clone https://github.com/golang/net.git net C:\\Users\\xxx> go install net Finally, the command to compile getrue is: C:\\Users\\xxx\\src\\github.com/taiyuechain/taipublicchain> go install -v ./cmd/...","title":"Source"},{"location":"source/taiyuepublic/Installation-Instructions-for-Windows/#source","text":"","title":"Source"},{"location":"source/taiyuepublic/Installation-Instructions-for-Windows/#compiling-getrue-with-tools-from-chocolatey","text":"The Chocolatey package manager provides an easy way to get the required build tools installed. If you don't have chocolatey yet, follow the instructions on https://chocolatey.org to install it first. Then open an Administrator command prompt and install the build tools we need: C:\\Windows\\system32> choco install git C:\\Windows\\system32> choco install golang C:\\Windows\\system32> choco install mingw Installing these packages will set up the Path environment variable. Open a new command prompt to get the new Path . The following steps don't need Administrator privileges. Please ensure that the installed Go version is 1.8 (or any later version). First we'll create and set up a Go workspace directory layout, then clone the source. OBS If, during the commands below, you get the following message: WARNING: The data being saved is truncated to 1024 characters. Then that means that the setx command will fail, and proceeding will truncate the Path / GOPATH . If this happens, it's better to abort, and try to make some more room in Path before trying again. 1 C:\\Users\\xxx> set \"GOPATH=%USERPROFILE%\" 2 C:\\Users\\xxx> set \"Path=%USERPROFILE%\\bin;%Path%\" 3 C:\\Users\\xxx> setx GOPATH \"%GOPATH%\" 4 C:\\Users\\xxx> setx Path \"%Path%\" 5 C:\\Users\\xxx> mkdir src\\github.com\\truechain 6 C:\\Users\\xxx> git clone https://github.com/truechain/truechain-engineering-code src\\github.com/taiyuechain/taipublicchain 7 C:\\Users\\xxx> cd src\\github.com/taiyuechain/taipublicchain 8 C:\\Users\\xxx> go get -u -v golang.org/x/net/context if the step 8 ran error, can execute the next commands: C:\\Users\\xxx> mkdir -p \"%GOPATH%\"/src/golang.org/x/ C:\\Users\\xxx> cd \"%GOPATH%\"/src/golang.org/x/ C:\\Users\\xxx> git clone https://github.com/golang/net.git net C:\\Users\\xxx> go install net Finally, the command to compile getrue is: C:\\Users\\xxx\\src\\github.com/taiyuechain/taipublicchain> go install -v ./cmd/...","title":"Compiling getrue with tools from chocolatey"},{"location":"source/taiyuepublic/Management-API/","text":"The APIs supported by TaipublicChain are mainly based on function modules: admin, miner, personal, etc. These APIs are provided using JSON-RPC. Enabling the management APIs Taipublic comes with a JavaScript console that supports all of the APIs described here. To provide these APIs through taipublic RPC, specify them with the --${interface}api command line argument. Where ${interface} can be HTTP rpc, WebSocket ws and Unix socket ipc or Windows pipe For example: taipublic --ipcapi admin, tai,miner --rpc api tai,web3 --rpc Enable administrators, official DApp and miner APIs via IPC interface Enable official DApp and web3 API via HTTP interface The HTTP RPC interface must be explicitly enabled using the --rpc flag. Please note, offering an API over the HTTP ( rpc ) or WebSocket ( ws ) interfaces will give everyone access to the APIs who can access this interface (DApps, browser tabs, etc). Be careful which APIs you enable. By default taipublic enables all APIs over the IPC ( ipc ) interface and only the db , tai , net and web3 APIs over the HTTP and WebSocket interfaces. To determine which APIs an interface provides, the modules JSON-RPC method can be invoked. For example over an ipc interface on unix systems: echo '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_modules\",\"params\":[],\"id\":1}' | nc -U $datadir/ taipublic.ipc will give all enabled modules including the version number: { \"id\":1, \"jsonrpc\":\"2.0\", \"result\":{ \"admin\":\"1.0\", \"debug\":\"1.0\", \"tai\":\"1.0\", \"miner\":\"1.0\", \"net\":\"1.0\", \"personal\":\"1.0\", \"rpc\":\"1.0\", \"txpool\":\"1.0\", \"web3\":\"1.0\" } } API List admin debug miner personal Txpool fruitpool tai addPeer backtraceAt setExtra listAccounts content content protocolVersion datadir blockProfile setGasPrice lockAccount inspect inspect syncing nodeInfo cpuProfile start newAccount status status coinbase peers dumpBlock stop unlockAccount mining startRPC gcStats setCoinbase sign hashrate startWS getBlockRlp setElection ecRecover gasPrice stopRPC goTrace accounts stopWS memStats blockNumber seedHash getBalance setHead getStorageAt setBlockProfileRate getTransactionCount stacks getBlockTransactionCount startCPUProfile getCode startGoTrace sign stopCPUProfile sendTransaction stopGoTrace sendRawTransaction traceBlock call traceBlockByNumber estimateGas traceBlockByHash getBlock traceBlockFromFile getTransaction traceTransaction getTransactionReceipt verbosity compile vmodule getWork writeBlockProfile defaultBlock writeMemProfile pendingTransactions fruitNumber rewardSnailBlock snailBlockNumber getCommittee committeeNumber getCurrentState getFruit getRewardBlock getSnall snailBlockNumber Admin The admin API gives you access to several non-standard RPC methods, which will allow you to have a fine grained control over your taipublic instance, including but not limited to network peer and RPC endpoint management. admin_addPeer The addPeer administrative method requests adding a new remote node to the list of tracked static nodes. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down. The method accepts a single argument, the enode URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred. Client Method invocation Go admin.AddPeer(url string) (bool, error) Console admin.addPeer(url) RPC {\"method\": \"admin_addPeer\", \"params\": [url]} Example > admin.addPeer(\"enode://0adc97d2046e0b96956feed699b92fc34d2e5ba1f7ab411c884786ded213f70c0e78f0acce7a548ab32e1c2a817b63c43d0d7209f3f9050749a0720825631b55@192.168.46.59:30313\") true admin_datadir The datadir administrative property can be queried for the absolute path the running taipublic node currently uses to store all its databases. Client Method invocation Go admin.Datadir() (string, error ) Console admin.datadir RPC {\"method\": \"admin_datadir\"} Example > admin.datadir \"/home/truechain/truechain-engineering-code/cmd/ taipublic/data\" admin_nodeInfo The nodeInfo administrative property can be queried for all the information known about the running taipublic node at the networking granularity. These include general information about the node itself as a participant of the P2P overlay protocol, as well as specialized information added by each of the running application protocols (e.g. tai , les , shh ). Client Method invocation Go admin.NodeInfo() (*p2p.NodeInfo, error ) Console admin.nodeInfo RPC {\"method\": \"admin_nodeInfo\"} Example > admin.nodeInfo { enode: \"enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@[::]:30303\", id: \"44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d\", ip: \"::\", listenAddr: \"[::]:30303\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", ports: { discovery: 30303, listener: 30303 }, protocols: { tai: { difficulty: null, genesis: \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\", head: \"0xb83f73fbe6220c111136aefd27b160bf4a34085c65ba89f24246b3162257c36a\", network: 20 } } } admin_peers You can query the peers property for information about all remote nodes that are connected. Client Method invocation Go admin.Peers() ([]*p2p.PeerInfo, error ) Console admin.peers RPC {\"method\": \"admin_peers\"} Example > admin.peers [{ caps: [\"tai/61\", \"tai/62\", \"tai/63\"], id: \"08a6b39263470c78d3e4f58e3c997cd2e7af623afce64656cfc56480babcea7a9138f3d09d7b9879344c2d2e457679e3655d4b56eaff5fd4fd7f147bdb045124\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", network: { localAddress: \"192.168.0.104:51068\", remoteAddress: \"71.62.31.72:30303\" }, protocols: { tai: { difficulty: null, head: \"5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\", version: 63 } } }, /* ... */ { caps: [\"tai/61\", \"tai/62\", \"tai/63\"], id: \"fcad9f6d3faf89a0908a11ddae9d4be3a1039108263b06c96171eb3b0f3ba85a7095a03bb65198c35a04829032d198759edfca9b63a8b69dc47a205d94fce7cc\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", network: { localAddress: \"192.168.0.104:55968\", remoteAddress: \"121.196.232.205:30303\" }, protocols: { tai: { difficulty: null, head: \"5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\", version: 63 } } }] admin_startRPC The startRPC administrative method starts an HTTP based JSON RPC API webserver to handle client requests. All the parameters are optional: host : network interface to open the listener socket on (defaults to \"localhost\" ) port : network port to open the listener socket on (defaults to 8545 ) cors : cross-origin resource sharing header to use (defaults to \"\" ) apis : API modules to offer over this interface (defaults to \"tai,net,web3\" ) The method returns a boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time. Client Method invocation Go admin.StartRPC(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error) Console admin.startRPC(host, port, cors, apis) RPC {\"method\": \"admin_startRPC\", \"params\": [host, port, cors, apis]} Example > admin.startRPC(\"127.0.0.1\", 8545) true admin_startWS The startWS administrative method starts an WebSocket based JSON RPC API webserver to handle client requests. All the parameters are optional: host : network interface to open the listener socket on (defaults to \"localhost\" ) port : network port to open the listener socket on (defaults to 8546 ) cors : cross-origin resource sharing header to use (defaults to \"\" ) apis : API modules to offer over this interface (defaults to \"tai,net,web3\" ) The method returns a boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time. Client Method invocation Go admin.StartWS(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error) Console admin.startWS(host, port, cors, apis) RPC {\"method\": \"admin_startWS\", \"params\": [host, port, cors, apis]} Example > admin.startWS(\"127.0.0.1\", 8546) true admin_stopRPC The stopRPC administrative method closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not. Client Method invocation Go admin.StopRPC() (bool, error ) Console admin.stopRPC() RPC {\"method\": \"admin_stopRPC\" Example > admin.stopRPC() true admin_stopWS The stopWS administrative method closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not. Client Method invocation Go admin.StopWS() (bool, error ) Console admin.stopWS() RPC {\"method\": \"admin_stopWS\" Example > admin.stopWS() true Miner The miner API allows you to remote control the node's mining operation and set various mining specific settings. miner_setExtra Sets the extra data string that is included when this miner mines a block. Client Method invocation Go miner.setExtra(extra string) (bool, error) Console miner.setExtra(string) RPC {\"method\": \"miner_setExtra\", \"params\": [string]} Example > miner.setExtra(\"it's my block\") true miner_setGasPrice Sets the minimal accepted gas price when mining transactions. Any transactions that are below this limit are excluded from the mining process. Client Method invocation Go miner.setGasPrice(number *rpc.HexNumber) bool Console miner.setGasPrice(number) RPC {\"method\": \"miner_setGasPrice\", \"params\": [number]} Example > miner.setGasPrice(10000000) true miner_start Start the CPU mining process with the given number of threads and generate a new DAG if need be. Client Method invocation Go miner.Start(threads *rpc.HexNumber) (bool, error) Console miner.start(number) RPC {\"method\": \"miner_start\", \"params\": [number]} Example > miner.start(8) null miner_stop Stop the CPU mining operation. Client Method invocation Go miner.Stop() bool Console miner.stop() RPC {\"method\": \"miner_stop\", \"params\": []} Example > miner.stop() true miner_setCoinbase Sets the coinbase, where mining rewards will go. Client Method invocation Go miner.Setcoinbase(common.Address) bool Console miner.setCoinbase(address) RPC {\"method\": \"miner_setcoinbase\", \"params\": [address]} Example > miner.setCoinbase(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") true miner_setElection Sets the election,To vote or not to vote Client Method invocation Go miner.SetElection(toElect bool, pubkey []byte) (bool, error) Console miner.setElection(toElect\uff0cpubkey) RPC {\"method\": \"miner_setElection\", \"params\": [toElect,pubkey]} Example > miner.setElection(true,\"0x04044308742b61976de7344edb8662d6d10be1c477dd46e8e4c433c1288442a79183480894107299ff7b0706490f1fb9c9b7c9e62ae62d57bd84a1e469460d8ac1\") true Personal personal_listAccounts Returns all the Truechain account addresses of all keys in the key store. Client Method invocation Console personal.listAccounts RPC {\"method\": \"personal_listAccounts\", \"params\": []} Example > personal.listAccounts [\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"0xaf1dd3a5135bcdd38079927a80c75ad05cfd140b\", \"0x4a98debf425a2fd4f56ef6674c72c3606b615e75\"] personal_lockAccount Removes the private key with given address from memory. The account can no longer be used to send transactions. Client Method invocation Console personal.lockAccount(address) RPC {\"method\": \"personal_lockAccount\", \"params\": [string]} Example > personal.lockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") true personal_newAccount Generates a new private key and stores it in the key store directory. The key file is encrypted with the given passphrase. Returns the address of the new account. At the taipublic console, newAccount will prompt for a passphrase when it is not supplied as the argument. Client Method invocation Console personal.newAccount() RPC {\"method\": \"personal_newAccount\", \"params\": [string]} Example > personal.newAccount() Passphrase: Repeat passphrase: \"0x5e97870f263700f46aa00d967821199b9bc5a120\" The passphrase can also be supplied as a string. > personal.newAccount(\"h4ck3r\") \"0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc\" personal_unlockAccount Decrypts the key with the given address from the key store. Both passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not supplied as an argument, the console will prompt for the passphrase interactively. The unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to 300 seconds. An explicit duration of zero seconds unlocks the key until taipublic exits. The account can be used with tai_sign and tai_sendTransaction while it is unlocked. Client Method invocation Console personal.unlockAccount(address, passphrase, duration) RPC {\"method\": \"personal_unlockAccount\", \"params\": [string, string, number]} Examples > personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\") Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true Supplying the passphrase and unlock duration as arguments: > personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\", \"foo\", 30) true If you want to type in the passphrase and stil override the default unlock duration, pass null as the passphrase. > personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\", null, 30) Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true personal_sendTransaction Validate the given passphrase and submit transaction. The transaction is the same argument as for tai_sendTransaction and contains the from address. If the passphrase can be used to decrypt the private key belogging to tx.from the transaction is verified, signed and send onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls. Client Method invocation Console personal.sendTransaction(tx, passphrase) RPC {\"method\": \"personal_sendTransaction\", \"params\": [tx, string]} Examples > var tx = {from: \"0x391694e7e0b0cce554cb130d723a9d27458f9298\", to: \"0xafa3f8684e54059998bc3a7b0d2b0da075154d66\", value: web3.toWei(1.23, \"true\")} undefined > personal.sendTransaction(tx, \"passphrase\") 0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f personal_sign The sign method calculates an Truechain specific signature with: sign(keccack256(\"\\x19TrueCchain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. See ecRecover to verify the signature. Client Method invocation Console personal.sign(message, account, [password]) RPC {\"method\": \"personal_sign\", \"params\": [message, account, password]} Examples > personal.sign(\"0xdeadbeaf\", \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\" personal_ecRecover ecRecover returns the address associated with the private key that was used to calculate the signature in personal_sign . Client Method invocation Console personal.ecRecover(message, signature) RPC {\"method\": \"personal_ecRecover\", \"params\": [message, signature]} Examples > personal.sign(\"0xdeadbeaf\", \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\" > personal.ecRecover(\"0xdeadbeaf\", \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\") \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\" Txpool The txpool API gives you access to several non-standard RPC methods to inspect the contents of the transaction pool containing all the currently pending transactions as well as the ones queued for future processing. txpool_content Content returns the transactions contained within the transaction pool. Client Method invocation Go txpool.Content() (map[string]map[string]map[string][]*RPCTransaction) Console txpool.content RPC {\"method\": \"txpool_content\"} Example > txpool.content { pending: { 0xbE7e39Fa0645F6eaf501Ad02318A7fDa5c4DF6C6: { 25421: { blockHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", blockNumber: null, from: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", gas: \"0x15f90\", gasPrice: \"0x430e23400\", hash: \"0xf6d3aefa3bad795a58fbf7afcc82f0cccb4419828c8f4dde5df5c9c2f494affb\", input: \"0x\", nonce: \"0x634d\", r: \"0xf70109404e86563118a585eaf7aa7643549d9bb0e903b7761dac36a1aacb27a3\", s: \"0x74d4091f7c18ab01d8c647090d0e77766578f19690390379fdc86e3fd4e0d8ee\", to: \"0x3216e8c10ad02ebb828aaf3b2dbc47fdbe24d336\", transactionIndex: \"0x0\", v: \"0x37\", value: \"0x2100\" }, 25465: { blockHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", blockNumber: null, from: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", gas: \"0x15f90\", gasPrice: \"0x430e23400\", hash: \"0x80bc09cd8414a6a9b139860709fedbb0a1714ff72c99ca02f3a28b2c3f387f02\", input: \"0x\", nonce: \"0x6379\", r: \"0x78f88d00d391c5087ad8d7d96451545c3e5ad4edb675bb1162f2bb0953b3c53f\", s: \"0x20234bc4790b06863f9d277d5afe4967fc84b9959715fb8b669434a23ac4182a\", to: \"0x95e5478957995d52da5f5e01cf907bbd3a739c51\", transactionIndex: \"0x0\", v: \"0x38\", value: \"0x2100\" } } }, queued: {} } txpool_inspect The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. This is a method specifically tailored to developers to quickly see the transactions in the pool and find any potential issues. The result is an object with two fields pending and queued . Each of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with transactions summary strings. Please note, there may be multiple transactions associated with the same account and nonce. This can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions). Client Method invocation Go txpool.Inspect() (map[string]map[string]map[string][]string) Console txpool.inspect RPC {\"method\": \"txpool_inspect\"} Example > txpool.inspect { pending: {}, queued: {} } txpool_status The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. The result is an object with two fields pending and queued , each of which is a counter representing the number of transactions in that particular state. Client Method invocation Go txpool.Status() (map[string]*rpc.HexNumber) Console txpool.status RPC {\"method\": \"txpool_status\"} Example > txpool.status { pending: 100, queued: 0 } Fruitpool fruitpool_content Content returns the pendingFruits contained within the snail pool. Client Method invocation Go fruitpool.Content() ([]*RPCFruit) Console fruitpool.content RPC {\"method\": \"fruitpool_content\"} Example > fruitpool.content [{ fastHash: \"0xbf847397758ea1280a82c667c1cdda7604d12a15f062a3d82e4b8e3b7f372af8\", fastNumber: 126, fruitDifficulty: 2000, fruitHash: \"0xbc839c8efd9117a565ba16c0cee9644c83304f7c333be1d28bce282a3a61ae9d\", number: 2, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0xca046c8d3dfea13c4c5b8224ce3bc2fc4230ea12135483a15de7d11157d40805\" }, { fastHash: \"0x2558e2ef0d0df2ff11353ecc85fb4ae6982da71f464a0ecbf59ec297443aa259\", fastNumber: 127, fruitDifficulty: 2000, fruitHash: \"0x608b5237ec8a572c8168ab050981ca840271447a6cae8ac2f9693e7e6680abfc\", number: 3, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0xe6bd08a4475a566d7e0659697563f7e65d3e6ea633e6908a8f6aa94bdba3632f\" }, { fastHash: \"0xea22558ecc9c92591f6379bc766fec8af55a0641b22508bf5431d5d499b794ce\", fastNumber: 128, fruitDifficulty: 2000, fruitHash: \"0xf5e45e78c58061c327782f49fee6cdbf8874d4e20d7082f99cbbb32f06a46bb9\", number: 3, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0x18e13d804ac9966c48e4d7e70e6ff2d16ac53b0d23d644a54fc3201566ae0857\" }] fruitpool_inspect Inspect returns the unVerifiedFruits contained within the snail pool. Client Method invocation Go fruitpool.Inspect() ([]*RPCFruit) Console fruitpool.inspect RPC {\"method\": \"fruitpool_inspect\"} Example > fruitpool.inspect [{ fastHash: \"0xa71cfac04c172f29b6c300758df80d2a238f62918616cfe951dbcbb564e075cd\", fastNumber: 153632, fruitDifficulty: 100, fruitHash: \"0x0f23c22f5446c696d142a8e582dd255ee622d2f27894305f8fd4ef6ea281c5ee\", number: 2480, pointerHash: \"0x0582995b001c00afa5446b6a410b177685fbabb89f69430b5e6a4d9953041377\", pointerNumber: 2472, signHash: \"0x7622c3e1c58f83c80565779a5eeeb4d710bd1533d28c130718c8ecb470649856\" }, { fastHash: \"0xde0b0918bb97c9314ae511d141d05b2bf9ba8727c2a9c9b0989acbecb4e2bdce\", fastNumber: 153633, fruitDifficulty: 100, fruitHash: \"0xed8890352230a6a9524e090628899a315f7be70f06849d031a48c47cd615b0a9\", number: 2480, pointerHash: \"0x0582995b001c00afa5446b6a410b177685fbabb89f69430b5e6a4d9953041377\", pointerNumber: 2472, signHash: \"0x54885fc9f07162ecc23e9656f75977e474b41384294b0cc1cfe222a2b1eedede\" }, { fastHash: \"0x9b5d0dd3b3d1b33daf29d007b7f7525f60e4c254979fc8b4ed81e585390eebc7\", fastNumber: 155138, fruitDifficulty: 100, fruitHash: \"0xbf25a17ec04585626a6da4ebe6d12dfb26120d99d523bd5a7c199ac6b5fd9af5\", number: 2504, pointerHash: \"0xf99a75e82d1ecdb5f55841276aa4708b7425ec9ed93681f20c03392b36b3497b\", pointerNumber: 2496, signHash: \"0x4030b0467603334a57bf6b7e76b042dcfb1c06376a214c1c299cb053e48a85c6\" }] fruitpool_status Status returns the number of pending and unVerified Fruits in the pool. Client Method invocation Go fruitpool.Status() (map[string]hexutil.Uint) Console fruitpool.status RPC {\"method\": \"fruitpool_status\"} Example > fruitpool.status { pending: \"0x3f\", unverified: \"0x69a\" } Debug The debug API gives you access to several non-standard RPC methods, which will allow you to inspect, debug and set certain debugging flags during runtime. debug_backtraceAt Sets the logging backtrace location. When a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr. The location is specified as <filename>:<line> . Client Method invocation Console debug.backtraceAt(string) RPC {\"method\": \"debug_backtraceAt\", \"params\": [string]} Example: > debug.backtraceAt(\"server.go:443\") debug_blockProfile Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile . Client Method invocation Console debug.blockProfile(file, seconds) RPC {\"method\": \"debug_blockProfile\", \"params\": [string, number]} debug_cpuProfile Turns on CPU profiling for the given duration and writes profile data to disk. Client Method invocation Console debug.cpuProfile(file, seconds) RPC {\"method\": \"debug_cpuProfile\", \"params\": [string, number]} debug_dumpBlock Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code). Client Method invocation Go debug.DumpBlock(number uint64) (state.World, error) Console debug.traceBlockByHash(number, [options]) RPC {\"method\": \"debug_dumpBlock\", \"params\": [number]} Example > debug.dumpBlock(\"0xa\") { fff7ac99c8e4feb60c9750054bdc14ce1857f181: { balance: \"49358640978154672\", code: \"\", codeHash: \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\", nonce: 2, root: \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", storage: {} }, fffbca3a38c3c5fcb3adbb8e63c04c3e629aafce: { balance: \"3460945928\", code: \"\", codeHash: \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\", nonce: 657, root: \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", storage: {} } }, root: \"19f4ed94e188dd9c7eb04226bd240fa6b449401a6c656d6d2816a87ccaf206f1\" } debug_gcStats Returns GC statistics. See https://golang.org/pkg/runtime/debug/#GCStats for information about the fields of the returned object. Client Method invocation Console debug.gcStats() RPC {\"method\": \"debug_gcStats\", \"params\": []} debug_getBlockRlp Retrieves and returns the RLP encoded block by number. Client Method invocation Go debug.GetBlockRlp(number uint64) (string, error) Console debug.getBlockRlp(number, [options]) RPC {\"method\": \"debug_getBlockRlp\", \"params\": [number]} debug_goTrace Turns on Go runtime tracing for the given duration and writes trace data to disk. Client Method invocation Console debug.goTrace(file, seconds) RPC {\"method\": \"debug_goTrace\", \"params\": [string, number]} debug_memStats Returns detailed runtime memory statistics. See https://golang.org/pkg/runtime/#MemStats for information about the fields of the returned object. Client Method invocation Console debug.memStats() RPC {\"method\": \"debug_memStats\", \"params\": []} debug_seedHash Fetches and retrieves the seed hash of the block by number Client Method invocation Go debug.SeedHash(number uint64) (string, error) Console debug.seedHash(number, [options]) RPC {\"method\": \"debug_seedHash\", \"params\": [number]} debug_setHead Sets the current head of the local snail chain by snailBlock number. Note , this is a destructive action and may severely damage your snail chain. Use with extreme caution. Client Method invocation Go debug.SetHead(number uint64) Console debug.setHead(number) RPC {\"method\": \"debug_setHead\", \"params\": [number]} warn: it may cause the console quit and may destory the database,just for debug and test. debug_setBlockProfileRate Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile . Client Method invocation Console debug.setBlockProfileRate(rate) RPC {\"method\": \"debug_setBlockProfileRate\", \"params\": [number]} debug_stacks Returns a printed representation of the stacks of all goroutines. Note that the web3 wrapper for this method takes care of the printing and does not return the string. Client Method invocation Console debug.stacks() RPC {\"method\": \"debug_stacks\", \"params\": []} debug_startCPUProfile Turns on CPU profiling indefinitely, writing to the given file. Client Method invocation Console debug.startCPUProfile(file) RPC {\"method\": \"debug_startCPUProfile\", \"params\": [string]} debug_startGoTrace Starts writing a Go runtime trace to the given file. Client Method invocation Console debug.startGoTrace(file) RPC {\"method\": \"debug_startGoTrace\", \"params\": [string]} debug_stopCPUProfile Stops an ongoing CPU profile. Client Method invocation Console debug.stopCPUProfile() RPC {\"method\": \"debug_stopCPUProfile\", \"params\": []} debug_stopGoTrace Stops writing the Go runtime trace. Client Method invocation Console debug.stopGoTrace() RPC {\"method\": \"debug_stopGoTrace\", \"params\": []} debug_traceBlock The traceBlock method will return a full stack trace of all invoked opcodes of all transaction that were included included in this block. Note , the parent of this block must be present or it will fail. Client Method invocation Go debug.TraceBlock(blockRlp []byte, config. *vm.Config) BlockTraceResult Console debug.traceBlock(tblockRlp, [options]) RPC {\"method\": \"debug_traceBlock\", \"params\": [blockRlp, {}]} Example > debug.traceBlock(\"0xblock_rlp\") { gas: 85301, returnValue: \"\", structLogs: [{ depth: 1, error: \"\", gas: 162106, gasCost: 3, memory: null, op: \"PUSH1\", pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \"\", gas: 100000, gasCost: 0, memory: [\"0000000000000000000000000000000000000000000000000000000000000006\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"0000000000000000000000000000000000000000000000000000000000000060\"], op: \"STOP\", pc: 120, stack: [\"00000000000000000000000000000000000000000000000000000000d67cbec9\"], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \"8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\", 0000000000000000000000000000000000000000000000000000000000000006: \"0000000000000000000000000000000000000000000000000000000000000001\", f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \"00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\" } }] debug_traceBlockByNumber Similar to debug_traceBlock\uff0c traceBlockByNumber accepts a block number and will replay the block that is already present in the database. Client Method invocation Go debug.TraceBlockByNumber(number uint64, config. *vm.Config) BlockTraceResult Console debug.traceBlockByNumber(number, [options]) RPC {\"method\": \"debug_traceBlockByNumber\", \"params\": [number, {}]} debug_traceBlockByHash Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database. Client Method invocation Go debug.TraceBlockByHash(hash common.Hash, config. *vm.Config) BlockTraceResult Console debug.traceBlockByHash(hash, [options]) RPC {\"method\": \"debug_traceBlockByHash\", \"params\": [hash {}]} debug_traceBlockFromFile Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block. Client Method invocation Go debug.TraceBlockFromFile(fileName string, config. *vm.Config) BlockTraceResult Console debug.traceBlockFromFile(fileName, [options]) RPC {\"method\": \"debug_traceBlockFromFile\", \"params\": [fileName, {}]} debug_traceTransaction The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash. In addition to the hash of the transaction you may give it a secondary optional argument, which specifies the options for this specific call. The possible options are: disableStorage : BOOL . Setting this to true will disable storage capture (default = false). disableMemory : BOOL . Setting this to true will disable memory capture (default = false). disableStack : BOOL . Setting this to true will disable stack capture (default = false). tracer : STRING . Setting this will enable JavaScript-based transaction tracing, described below. If set, the previous four arguments will be ignored. timeout : STRING . Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Valid values are described here . Client Method invocation Go debug.TraceTransaction(txHash common.Hash, logger *vm.LogConfig) (*ExecutionResurt, error) Console debug.traceTransaction(txHash, [options]) RPC {\"method\": \"debug_traceTransaction\", \"params\": [txHash, {}]} Example > debug.traceTransaction(\"0x2059dd53ecac9827faad14d364f9e04b1d5fe5b506e3acc886eff7a6f88a696a\") { gas: 85301, returnValue: \"\", structLogs: [{ depth: 1, error: \"\", gas: 162106, gasCost: 3, memory: null, op: \"PUSH1\", pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \"\", gas: 100000, gasCost: 0, memory: [\"0000000000000000000000000000000000000000000000000000000000000006\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"0000000000000000000000000000000000000000000000000000000000000060\"], op: \"STOP\", pc: 120, stack: [\"00000000000000000000000000000000000000000000000000000000d67cbec9\"], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \"8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\", 0000000000000000000000000000000000000000000000000000000000000006: \"0000000000000000000000000000000000000000000000000000000000000001\", f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \"00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\" } }] JavaScript-based tracing Specifying the tracer option in the second argument enables JavaScript-based tracing. In this mode, tracer is interpreted as a JavaScript expression that is expected to evaluate to an object with (at least) two methods, named step and result . step is a function that takes two arguments, log and db, and is called for each step of the EVM, or when an error occurs, as the specified transaction is traced. log has the following fields: pc : Number, the current program counter op : Object, an OpCode object representing the current opcode gas : Number, the amount of gas remaining gasPrice : Number, the cost in wei of each unit of gas memory : Object, a structure representing the contract's memory space stack : array[big.Int], the EVM execution stack depth : The execution depth account : The address of the account executing the current operation err : If an error occured, information about the error If err is non-null, all other fields should be ignored. For efficiency, the same log object is reused on each execution step, updated with current values; make sure to copy values you want to preserve beyond the current call. For instance, this step function will not work: function(log) { this.logs.append(log); } But this step function will: function(log) { this.logs.append({gas: log.gas, pc: log.pc, ...}); } log.op has the following methods: isPush() - returns true iff the opcode is a PUSHn toString() - returns the string representation of the opcode toNumber() - returns the opcode's number log.memory has the following methods: slice(start, stop) - returns the specified segment of memory as a byte slice length() - returns the length of the memory log.stack has the following methods: peek(idx) - returns the idx-th element from the top of the stack (0 is the topmost element) as a big.Int length() - returns the number of elements in the stack db has the following methods: getBalance(address) - returns a big.Int with the specified account's balance getNonce(address) - returns a Number with the specified account's nonce getCode(address) - returns a byte slice with the code for the specified account getState(address, hash) - returns the state value for the specified account and the specified hash exists(address) - returns true if the specified address exists The second function, 'result', takes no arguments, and is expected to return a JSON-serializable value to return to the RPC caller. If the step function throws an exception or executes an illegal operation at any point, it will not be called on any further VM steps, and the error will be returned to the caller. Note that several values are Golang big.Int objects, not JavaScript numbers or JS bigints. As such, they have the same interface as described in the godocs. Their default serialization to JSON is as a Javascript number; to serialize large numbers accurately call .String() on them. For convenience, big.NewInt(x) is provided, and will convert a uint to a Go BigInt. Usage example, returns the top element of the stack at each CALL opcode only: debug.traceTransaction(txhash, {tracer: '{data: [], step: function(log) { if(log.op.toString() == \"CALL\") this.data.push(log.stack.peek(0)); }, result: function() { return this.data; }}'}); debug_verbosity Sets the logging verbosity ceiling. Log messages with level up to and including the given level will be printed. The verbosity of individual packages and source files can be raised using debug_vmodule . Client Method invocation Console debug.verbosity(level) RPC {\"method\": \"debug_vmodule\", \"params\": [number]} debug_vmodule Sets the logging verbosity pattern. Client Method invocation Console debug.vmodule(string) RPC {\"method\": \"debug_vmodule\", \"params\": [string]} Examples If you want to see messages from a particular Go package (directory) and all subdirectories, use: > debug.vmodule(\"tai/*=6\") If you want to restrict messages to a particular package (e.g. p2p) but exclude subdirectories, use: > debug.vmodule(\"p2p=6\") If you want to see log messages from a particular source file, use > debug.vmodule(\"server.go=6\") You can compose these basic patterns. If you want to see all output from peer.go in a package below tai (tai/peer.go, tai/downloader/peer.go) as well as output from package p2p at level <= 5, use: debug.vmodule(\"tai/*/peer.go=6,p2p=5\") debug_writeBlockProfile Writes a goroutine blocking profile to the given file. Client Method invocation Console debug.writeBlockProfile(file) RPC {\"method\": \"debug_writeBlockProfile\", \"params\": [string]} debug_writeMemProfile Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag. Client Method invocation Console debug.writeMemProfile(file string) RPC {\"method\": \"debug_writeBlockProfile\", \"params\": [string]} tai tai_protocolVersion Returns the current Truechain protocol version. Client Method invocation Console tai.protocolVersion RPC {\"method\": \"tai_protocolVersion\"} tai_syncing Returns an object with data about the sync status or false Client Method invocation Go tai.syncing() (interface{}, error ) Console tai.syncing RPC {\"method\": \"tai_syncing \"}` Example > tai.syncing { currentBlock: 961, highestBlock: 7092, knownStates: 0, pulledStates: 0, startingBlock: 0 } tai_coinbase Returns the client coinbase address. Client Method invocation Console tai.coinbase RPC {\"method\": \"tai_coinbase\"} Example > tai.coinbase \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\" tai_mining Returns true if client is actively mining new blocks. Client Method invocation Console tai.mining RPC {\"method\": \"tai_mining\"} tai_hashrate Returns the number of hashes per second that the node is mining with. Client Method invocation Console tai.hashrate RPC {\"method\": \"tai_hashrate\"} tai_gasPrice Returns the current price per gas in wei. Client Method invocation Console tai.gasPrice RPC {\"method\": \"tai_gasPrice\"} Example > tai.gasPrice 18000000000 tai_accounts Returns a list of addresses owned by client. Client Method invocation Console tai.accounts RPC {\"method\": \"tai_accounts\"} Example > tai.accounts [\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"0xaf1dd3a5135bcdd38079927a80c75ad05cfd140b\", \"0x4a98debf425a2fd4f56ef6674c72c3606b615e75\"] tai_blockNumber Returns the number of most recent block. Client Method invocation Console tai.blockNumber RPC {\"method\": \"tai_blockNumber\"} Example > tai.blockNumber 82917 tai_getBalance Returns the balance of the account of given address.integer of the current balance in wei. Client Method invocation Console tai.getBalance(address) RPC {\"method\": \"tai_startCPUProfile\", \"params\": [string, latest]} Example > tai.getBalance(\"0xbE7e39Fa0645F6eaf501Ad02318A7fDa5c4DF6C6\") 10000000000000000000 tai_getStorageAt GetStorageAt returns the storage from the state at the given address, key and block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed. Client Method invocation Go `tai.getStorageAt(address,key,blockNr) (hexutil.Bytes, error) Console tai.getStorageAt(address, key) RPC {\"method\": \"tai_getStorageAt\", \"params\": [address, key, latest]} Example > tai.getStorageAt(\"0x295a70b2de5e3953354a6a8344e616ed314d7251\",\"0x0\",\"latest\") \"0x0000000000000000000000000000000000000000000000000000000000000000\" tai_getTransactionCount GetTransactionCount returns the number of transactions the given address has sent for the given block number Client Method invocation Console tai.getTransactionCount(address) RPC {\"method\": \"tai_getTransactionCount\", \"params\": [address, latest]} Example > tai.getTransactionCount(\"0x295a70b2de5e3953354a6a8344e616ed314d7251\") 12 tai_getBlockTransactionCount Returns the number of transactions in a block matching the given block number. Client Method invocation Console tai.getBlockTransactionCount(number) RPC {\"method\": \"tai_getBlockTransactionCountByNumber\", \"params\": [string]} Example > tai.getBlockTransactionCount(12) 10 > tai.getBlockTransactionCount(\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\") 10 tai_getCode Returns code at a given address. Divided into ordinary account and contract account address Ordinary account return \"0x\" Where the contract account returns the binary code Client Method invocation Console tai.getCode(address) RPC {\"method\": \"tai_getCode\", \"params\": [address, latest]} Example > tai.getCode(\"0xB824adf0Bad5E49bB214922F4499bD2cf08ef519\") \"0x\" tai_sign The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))). By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked. Client Method invocation Console tai.sign(address,message) RPC {\"method\": \"tai_sign\", \"params\": [address, message]} Example > personal.unlockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") Unlock account 0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6 Passphrase: true > tai.sign(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"0xdeadbeaf\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\" tai_sendTransaction Creates new message call transaction or a contract creation, if the data field contains code. params: Object - The transaction object from: DATA, 20 Bytes - The address the transaction is send from. to: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas: QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see Truechain Contract ABI nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. Client Method invocation Console tai.sendTransaction(params) RPC {\"method\": \"tai_sendTransaction\", \"params\": [params]} Example > personal.unlockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") Unlock account 0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6 Passphrase: true > tai.sendTransaction({\"from\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"to\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"value\":\"1000000000000000\"}) \"0xcf3d3adb9a6b875e3adb966bc436a963f689f9dbf2ea18a3955fed263d865dd1\" tai_sendRawTransaction SendRawTransaction will add the signed transaction to the transaction pool. The sender is responsible for signing the transaction and using the correct nonce. Client Method invocation Console tai.sendRawTransaction(params) RPC {\"method\": \"tai_sendRawTransaction\", \"params\": [params]} Example > tai.sendRawTransaction({see above}) \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" tai_call Call executes the given transaction on the state for the given block number. It doesn't make and changes in the state/blockchain and is useful to execute and retrieve values. Parameters Object - The transaction call object from: DATA, 20 Bytes - (optional) The address the transaction is sent from. to: DATA, 20 Bytes - The address the transaction is directed to. gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. tai_call consumes zero gas, but this parameter may be needed by some executions. gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - (optional) Hash of the method signature and encoded parameters. For details see Truechain Contract ABI QUANTITY|TAG - integer block number, or the string \"latest\", \"earliest\" or \"pending\", see the default block parameter Client Method invocation Console tai.call(params) RPC {\"method\": \"tai_call\", \"params\": [params]} Example > tai.call({\"to\":\"0x199e7f5314d01c19fa19f220bb19f5b55d26dc33\"}) \"0x\" tai_estimateGas Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. Client Method invocation Console tai.estimateGas(options) RPC {\"method\": \"tai_estimateGasl\", \"params\": [options]} Example > tai.estimateGas({\"from\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\"}) 53000 tai_getBlock Returns information about a block by hash or number Client Method invocation Console tai.getBlock(Parameters) RPC {\"method\": \"tai_getBlock\", \"params\": [Parameters]} Parameters can be integer of a block number,or hash of a block,or the string \"earliest\", \"latest\" or \"pending\". Example > tai.getBlock(2) { SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: \"0x0\", difficulty: 0, extraData: \"0x\", gasLimit: 21977111, gasUsed: 0, hash: \"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\", logsBloom: \"0xnumber: 2, parentHash: \"0x3247a1fff229e6a3b5f9d48e1dd4f534d59bedc83b8c62f034df7e4421da3392\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ result: 1, sign: \"0x2575eb8dc39067c35cabc2a803215a93857e5ba63f70b571b188fb5e34c4020863e84ff448ef5cef0bb7a379c50c8a27e30a63ab73714be4ef66ed7402f36f7c01\" }], size: 572, stateRoot: \"0x47e15682f9a8bad160ae6c983327f7ecf0dc319e35362f7c7a23825f713f9202\", timestamp: 1544147499, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" } > tai.getBlock(\"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\") { SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: \"0x0\", difficulty: 0, extraData: \"0x\", gasLimit: 21977111, gasUsed: 0, hash: \"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\", logsBloom: \"0xnumber: 2, parentHash: \"0x3247a1fff229e6a3b5f9d48e1dd4f534d59bedc83b8c62f034df7e4421da3392\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ result: 1, sign: \"0x2575eb8dc39067c35cabc2a803215a93857e5ba63f70b571b188fb5e34c4020863e84ff448ef5cef0bb7a379c50c8a27e30a63ab73714be4ef66ed7402f36f7c01\" }], size: 572, stateRoot: \"0x47e15682f9a8bad160ae6c983327f7ecf0dc319e35362f7c7a23825f713f9202\", timestamp: 1544147499, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" } > tai.getBlock(\"latest\") { CommitteeHash: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: 0, difficulty: 0, extraData: \"0x\", gasLimit: 79272345, gasUsed: 0, hash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", logsBloom: \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", number: 106178, parentHash: \"0xbbc548feed020abba4f22a28f1f91713f1e6be80726d5e65d2ccdaaeea2d59f3\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x4cab89f8ca069f249752c7b9fad1e003e7cbc1a75b593b03364870ad148da04f447a969d6a968b2a72c05ce170ef9236c83b5c27b2c99e171caa1a3d6c4f407e00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xb45a6a6fc093526a40c6949b2b6a8172b84dde26dcdc1f80abedc466bab37478136bf360b940da6faf1ac656b3c7177639d7eb6a4642813614a83424b1aae13001\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x50581788f64cc3ca0c8e03d8dad419fd75f53d79ca71970380da86918d45479c636acb60d9c30f1a3ac9d9654c0897d256d73e46ee157542b357856b3532bb0f00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x40d9a42c5906118600df4e6b9fb641bc682769b6f16fe7f39529b0de8e7c4c10773132e7f790b70962a32b27fa7e178de532abeb8e91f119bcc538801f4a671401\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xd7dec860b864e680f13ceec2ab9e977a7a1c905a26fa09679557d4665e2c38f74a5436b4d62a607e6490465295d312c7ec480fce521be3da4bbeb8c2e173501b00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xfd151b1ade2601125120a43a7f21284d4ae36d3c68df5d53425baa4985a32f4451906ba5860331cc98f0f093eaf24fb2bfaeef1e253b9af04b488e39f56f6e7100\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xfd4e6c2356095a749e686145ce537b4b5216aaf279c08cf0c5ae5b9aa06f01c307ec0817e3a43a7d4c6fbee5008d24e69a7de82572e03b6e46864290e030b20f01\" }], size: 1255, stateRoot: \"0x7b89895f05fb321ad8fd4f9286c0deb848f7b09e8b1727d870521b9468d805c7\", switchInfos: [], timestamp: 1553064924, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" } tai_getTransaction Returns the information about a transaction requested by transaction hash Client Method invocation Console tai.getTransaction(hash) RPC {\"method\": \"tai_getTransaction\", \"params\": [hash]} tai_getTransactionReceipt Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Client Method invocation Console tai.getTransactionReceipt(hash) RPC {\"method\": \"tai_getTransactionReceipt\", \"params\": [hash]} Example > tai.getTransactionReceipt(\"0x389f4ea234928502ab7a3066593a810aa9a03957b806527dfba5c55d67cbf427\") { blockHash: \"0x5c60cb0ad195b9c35bfb5f4efb2d97bf5d0b91ae05d1072167613e9b1c892454\", blockNumber: 1022, contractAddress: null, cumulativeGasUsed: 21000, from: \"0xb824adf0bad5e49bb214922f4499bd2cf08ef519\", gasUsed: 21000, logs: [], logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", status: \"0x1\", to: \"0xb42669609d9932f89c16c7c1803cb03130a7b193\", transactionHash: \"0x389f4ea234928502ab7a3066593a810aa9a03957b806527dfba5c55d67cbf427\", transactionIndex: 0 } tai_compile Returns a list of available compilers in the client. Client Method invocation Console tai.compile RPC {\"method\": \"tai_compile\", \"params\": []} Example > tai.compile { lll: function(), serpent: function(), solidity: function() } tai_getWork GetWork returns a work package for external miner. The work package consists of 3 strings result[0], 32 bytes hex encoded current block header pow-hash result[1], 32 bytes hex encoded seed hash used for DAG result[2], 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty Client Method invocation Console tai.getWork RPC {\"method\": \"tai_getWork\", \"params\": []} Example > tai.getWork function() tai_defaultBlock Return latest block marking Client Method invocation Console tai.defaultBlock RPC {\"method\": \"tai_defaultBlock\", \"params\": []} Example > tai.defaultBlock \"latest\" tai_PendingTransactions PendingTransactions returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages. Client Method invocation Console tai.pendingTransactions RPC {\"method\": \"tai_PendingTransactions\", \"params\": []} Example > tai.pendingTransactions [] tai_committeeNumber Return the current number of sessions of the committee Client Method invocation Console tai.committeeNumber RPC {\"method\": \"tai_committeeNumber\", \"params\": []} Example > tai.committeeNumber 41 tai_fruitNumber Returns the height of the current fruit Client Method invocation Console tai.fruitNumber RPC {\"method\": \"tai_fruitNumber\", \"params\": []} Example > tai.fruitNumber 477899 tai_rewardSnailBlock RewardSnailBlock return the latest snail block rewarded. Client Method invocation Console tai.rewardSnailBlock RPC {\"method\": \"tai_rewardSnailBlock\", \"params\": []} Example > tai.rewardSnailBlock { beginFruitNumber: \"0x312e\", difficulty: \"0x2934\", endFruitNumber: \"0x3169\", extraData: \"0xd98209008667657472756588676f312e31302e34856c696e7578\", fruitDifficulty: \"0x64\", fruits: [\"0xa632b2a2cb8dbea61af5c4061b506013f262c4fcdae6cfcd4539d4fb8d135295\", \"0x53e280a0f4566a2a9bc12faec2991059ffd993284e1688b563b95845db0d9d49\", \"0x82282660c6b20d778dd1c1667f4fc6bf6c29a38d17a53fc7ba638f4b950e1da8\", \"0xcc30df9962ea9cd0184a1a3a4076198b6936d7c79b3025521fc0b787808b9a69\", \"0xba1645a82012600e80f3d396da15826152e45c23b25386ac9c828855ef879fc8\", \"0x5ad1f91b6b40a386f2a06d6478c60395c70f484947de0491f4bd7c0e717472da\", \"0xb93179ddf6004f7f4a7a1a97e278a4c29170f3bb07cf7b41163f16b33d634898\", \"0xfbbf8ee6385b4102edfa8a539b91c83e7be2c0aa9a1487e465c6c20fe081d94b\", \"0x2bea7825294cdebf9b593bb9271d6d4c051111f470b7719f0b23f8d75ee450a8\", \"0x6123b3a6685f0e92f32d05ee437ed0df2f6a3e79a6af43964495c67e8d1f0dd3\", \"0xaeb33d2c1eca870093bb9f1f99e67c13411fdddaa598ca12ad1ede94c50ed2ad\", \"0x1df10f96d711eb500d9a2c5377ca5dbf2dbbe16df9f3faac12159e83a4b53847\", \"0xbbbf861be37e70d07eec9376d30db13c1704d2517d5cc312fe66b0027a27b65e\", \"0xf8ba7c14737c7bee419614ad7e2c9bb1ede9efe3cbe6f158d88cc8599c5d7a0b\", \"0x5258d8a47c1bea863b31cca6b3862da2e57fb752868358837a28fb32fb5c7864\", \"0xc965f1ba667f88a4370f7f40ee9090a1c66a66c2a58136b1e3653521f7892525\", \"0xe936d14ef8688abc507e147de72a65f83347273dce93dd19f3b2d55a1d9abe8f\", \"0xa8d6040922b821164902a6a33196802dc94feabcc3f82fe765c1d88bed96d662\", \"0x30f1f6c414afc24e4ffd1abf7757f583cca31fe187b7184630e8f1ca5dc52f9d\", \"0x4e5225be5985de4b6f7a64173d79277d725d236d0448d4d75076aa3ed6e7fa56\", \"0x7bd8b912b1e4bbc3fd4c73bde1767f5fe14f86c6b3cb041b317f6ce6f06cd542\", \"0xbc77f4d7e1e49f8afc8aa7d596f3d7981b5abe96d4d4a54a7d7a1010244f79b1\", \"0xde7998ff1ad4f9871b730d0e720d00153a2c93914d9a16acdad39765f384891f\", \"0xf91977e68d726fa08ded0407e0b5d590a85e1768261a9f952e236ed225dbcc75\", \"0x81fb25e55f5ccadca129b3b171c31e246aa00fe6bbf296436cfd70fb0e08c1a3\", \"0x6b49f2bc587371714436ce122cc137aaf750f394ca3bcf73659960a7b4f571f1\", \"0xfd13f6b303f6c6e756bd565d3ca42528e0c8de3aaa770775bc9a099361b3dfb6\", \"0x7d5225d125a763a5ae11470025ba9f3b1d68746786ebd384392d0784017be3b9\", \"0xb00a74429a42fdc7e407ff38c3a41f10e93709592cf244b861d8cef850cc8927\", \"0x90832895a34142519811238c7c115ac2f82f3e2bdf320f9a89ea3cc1fa16a8b3\", \"0x093e1df98b9a55add7da1381402adc8658e35e8d883595f3bc569f056af5ce03\", \"0x0c6c129571db51f9eaeec3bda70bcb817ab6d09367c33fb013fb09b8388b2c6a\", \"0x136f55cc75bb589a2abd9cb093c372c6c581ab30c89404f5384418caf6c5fabc\", \"0x6a5b44ad24be50f63e082e3cb64c804450cfd5a9813c5bb86b2daf1596b0db3d\", \"0x74e2f61da5829be385aaf3446e4e29a9d1269742c69885fc9188e84187e07a9e\", \"0x651921c1da81d4b0969796910593323c3b0b60ca816f2a938fb0d7bcb562f596\", \"0xc42a9d609c0bac5b1d91fdca1da86be796902b7be1990bde3a711d720eb0e367\", \"0x0dc661bf73cbd9b83b56a1122d7edb431993b3271e8d6ed17467130ca432816f\", \"0xc88d51e6a04362f45f0b8a550b33a468ae958f2018e143a295b6b867707688d9\", \"0xe0722964ee80138d3d16a7bb13c10b4c472ff6685244b884b6ab906ff38cf6ae\", \"0x9f46ce3f8d225182b09047d0c0f0e01085bbb51fb1bdd194cd0155e7543ceb2b\", \"0x46fc7058e2b154740d0c049e6d9730dad9dd1a45a33ddc9d9ef89ac32bbfe1f4\", \"0xdba7a8c2b4d90c4e2a04c7f500deeacd80670cffab96f4df01574f965a978418\", \"0xdc72664ddf9fd72554ea3a23bc2ec5c84a9d893a6cec0488ab9a138c30bc3e46\", \"0x5cdd96b3ea923246887057ededac7e5fd443b7acab2e4969195d6b2b206c80d4\", \"0xf8b785b944cf4d2ec01b553a9fe6c2821565496aec04601a11e5dbed47eeae6a\", \"0x788b53e9fb263765c91b539085d15a125649275d82ca5a7f9763039c473492e9\", \"0x1409fa39b9c5cb2275c53c13caf63551fdb42dfb37016d60459dd119ecbeecd2\", \"0x84542b65c9e5280f60bac640ce90807abae1a1fcaa66452c6d65035ac73eaf10\", \"0x4e0b52178228ed76ebeddb207ad8b736a36ae18c04bf2c9bf4658aba7b2e58a6\", \"0x6b7f21f8f28b99df7019ccf3713d948bd7ad0c333682fe3218cd8040d3f4c6b7\", \"0x416e7a921069bcd44aa1c9e1e71908ea84b455ba4fe3a780e54ae3d5d9bb75d6\", \"0x47dabc583d57ad3a76c6f92fcda8ef339809ba3dbb0d8abeff559bf80eaec92a\", \"0x243db458d30bbf33f8bb363b86373523a53bf6020609c753a88018cbff2cab57\", \"0xb6c52f12fc0f6d2505e425a7e0800d19ef2bb364f34024a5c3bd004ea37bbe2b\", \"0xd325781116caef391b51c25b360e8b3d6555277655ed26d9ab7767250304ce54\", \"0xda3eddfaeda14df7e4b764981aef139e7a89250d24a6bec2451db1615a65678e\", \"0x160259fc30aabae838bd1ef16f8901caeea8cea856ec60d18b340429d75e02a8\", \"0x27a87a5f3728a7b96efbc8c4ccbcdd9238b8b35ecdc85f171dcde05f1a244324\", \"0x21fba42ad5a1f5a45dadb70086485f1c97289d7dc8de49eebf490f53ff230dd7\"], hash: \"0xf81745232836e516bc1b4f6297ea39739b8335d8ac34503cf6378b0d9dcd3426\", miner: \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", mixHash: \"0x000046d43e8286cf44b3c3e07c810646dc04c210268800a7ce005218663bf35b\", nonce: \"0x78b361ba385128ed\", number: \"0xd1\", parentHash: \"0x530de9d24cb1c49faac6f70ad6e52119026e6ad5af397895a27e7e68ca302b76\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", size: \"0xe3bf\", timestamp: \"0x5be95387\", uncles: [] } tai_snailBlockNumber SnailBlockNumber returns the block number of the snailchain head. Client Method invocation Console tai.snailBlockNumber RPC {\"method\": \"tai_snailBlockNumber\", \"params\": []} Example > tai.snailBlockNumber 7512 tai_getCommittee Returns information about the specified session of the committee Client Method invocation Console tai.getCommittee(number) RPC {\"method\": \"tai_getCommittee\", \"params\": [number]} Example > tai.getCommittee(41) { beginNumber: 475537, beginSnailNumber: 7189, endSnailNumber: 7368, id: 41, memberCount: 4, members: [{ PKey: \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", coinbase: \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\" }, { PKey: \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", coinbase: \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\" }, { PKey: \"04b82f569c74364daf1767b251608950ac49c83256f5dcde771255919c8c8489da550a5c24dcfc8a735b335dff5715ca424672c81bb10e5a55ddac5204f38ab94c\", coinbase: \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\" }, { PKey: \"0490bc06f4e4e5af179ea599b0793282070b9abd023a283cdda9b4edf3e596996f32843d37dcb1c3ee3dfebfe05d03dc13cfa19abe7b88a259619ea233d63778f8\", coinbase: \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\" }] } tai_getCurrentState Returns the current membership of the committee Client Method invocation Console tai.getCurrentState() RPC {\"method\": \"tai_getCurrentState\", \"params\": [number]} Example > tai.getCurrentState() null tai_getFruit Returns the specified fruit information Client Method invocation Console tai.getFruit(number) RPC {\"method\": \"tai_getFruit\", \"params\": [number]} Example > tai.getFruit(6) { difficulty: \"0x4e20\", extraData: \"0xd98209008667657472756588676f312e31302e34856c696e7578\", fastHash: \"0x8597125fd0f47fa439120ebe74b4c351f5b7c5cc6a1caafdb4c00c8b75454941\", fastNumber: 6, fruitDifficulty: \"0x64\", hash: \"0x2634dd54c2e3a391b986ab8966373d1fe5b9d808244d52e141cf26124d9a2714\", miner: \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", mixHash: \"0x1819250f9a0c71736da23f43c7f25fbd0087bd375bdc83d4dc8a7343e23d2586\", nonce: \"0x049e8f65e6e153ff\", number: \"0x1\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", signs: 3, size: \"0x3b7\", timestamp: \"0x5be53627\" } tai_getRewardBlock GetRewardBlock return the fast block position where the given snail block is rewarded. Client Method invocation Console tai.getRewardBlock(number) RPC {\"method\": \"tai_getRewardBlock\", \"params\": [number]} Example > tai.getRewardBlock(11) tai_getSnail Returns the requested snail block. When blockNr is -1 the chain head is returned. Client Method invocation Console tai.getSnail(number) RPC {\"method\": \"tai_getSnail\", \"params\": [number]} Example > tai.getSnail(1) tai.getSnail(1) { beginFruitNumber: 1, difficulty: 256, endFruitNumber: 60, extraData: \"0xda8209018667657472756588676f312e31302e338664617277696e\", fruitDifficulty: 50, fruits: 60, hash: \"0xb0c1cd521377ba71784573af8b50192c0319fada9d5d381109ea2467c1e2c6c0\", miner: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", mixHash: \"0x00974c04ddfe45ae0519128a5926d478ee16d2556af6013b61b3c2723c8c0b94\", nonce: \"0x7b2d50ad27c3ec29\", number: 1, parentHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", size: 45220, timestamp: 1544164238, uncles: [] } tai_snailBlockNumber SnailBlockNumber returns the block number of the snailchain head. Client Method invocation Console tai.snailBlockNumber RPC {\"method\": \"tai_snailBlockNumber\", \"params\": []} Example > tai.snailBlockNumber 227","title":"Management API"},{"location":"source/taiyuepublic/Management-API/#enabling-the-management-apis","text":"Taipublic comes with a JavaScript console that supports all of the APIs described here. To provide these APIs through taipublic RPC, specify them with the --${interface}api command line argument. Where ${interface} can be HTTP rpc, WebSocket ws and Unix socket ipc or Windows pipe For example: taipublic --ipcapi admin, tai,miner --rpc api tai,web3 --rpc Enable administrators, official DApp and miner APIs via IPC interface Enable official DApp and web3 API via HTTP interface The HTTP RPC interface must be explicitly enabled using the --rpc flag. Please note, offering an API over the HTTP ( rpc ) or WebSocket ( ws ) interfaces will give everyone access to the APIs who can access this interface (DApps, browser tabs, etc). Be careful which APIs you enable. By default taipublic enables all APIs over the IPC ( ipc ) interface and only the db , tai , net and web3 APIs over the HTTP and WebSocket interfaces. To determine which APIs an interface provides, the modules JSON-RPC method can be invoked. For example over an ipc interface on unix systems: echo '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_modules\",\"params\":[],\"id\":1}' | nc -U $datadir/ taipublic.ipc will give all enabled modules including the version number: { \"id\":1, \"jsonrpc\":\"2.0\", \"result\":{ \"admin\":\"1.0\", \"debug\":\"1.0\", \"tai\":\"1.0\", \"miner\":\"1.0\", \"net\":\"1.0\", \"personal\":\"1.0\", \"rpc\":\"1.0\", \"txpool\":\"1.0\", \"web3\":\"1.0\" } }","title":"Enabling the management APIs"},{"location":"source/taiyuepublic/Management-API/#api-list","text":"admin debug miner personal Txpool fruitpool tai addPeer backtraceAt setExtra listAccounts content content protocolVersion datadir blockProfile setGasPrice lockAccount inspect inspect syncing nodeInfo cpuProfile start newAccount status status coinbase peers dumpBlock stop unlockAccount mining startRPC gcStats setCoinbase sign hashrate startWS getBlockRlp setElection ecRecover gasPrice stopRPC goTrace accounts stopWS memStats blockNumber seedHash getBalance setHead getStorageAt setBlockProfileRate getTransactionCount stacks getBlockTransactionCount startCPUProfile getCode startGoTrace sign stopCPUProfile sendTransaction stopGoTrace sendRawTransaction traceBlock call traceBlockByNumber estimateGas traceBlockByHash getBlock traceBlockFromFile getTransaction traceTransaction getTransactionReceipt verbosity compile vmodule getWork writeBlockProfile defaultBlock writeMemProfile pendingTransactions fruitNumber rewardSnailBlock snailBlockNumber getCommittee committeeNumber getCurrentState getFruit getRewardBlock getSnall snailBlockNumber","title":"API List"},{"location":"source/taiyuepublic/Management-API/#admin","text":"The admin API gives you access to several non-standard RPC methods, which will allow you to have a fine grained control over your taipublic instance, including but not limited to network peer and RPC endpoint management.","title":"Admin"},{"location":"source/taiyuepublic/Management-API/#admin_addpeer","text":"The addPeer administrative method requests adding a new remote node to the list of tracked static nodes. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down. The method accepts a single argument, the enode URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred. Client Method invocation Go admin.AddPeer(url string) (bool, error) Console admin.addPeer(url) RPC {\"method\": \"admin_addPeer\", \"params\": [url]}","title":"admin_addPeer"},{"location":"source/taiyuepublic/Management-API/#example","text":"> admin.addPeer(\"enode://0adc97d2046e0b96956feed699b92fc34d2e5ba1f7ab411c884786ded213f70c0e78f0acce7a548ab32e1c2a817b63c43d0d7209f3f9050749a0720825631b55@192.168.46.59:30313\") true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_datadir","text":"The datadir administrative property can be queried for the absolute path the running taipublic node currently uses to store all its databases. Client Method invocation Go admin.Datadir() (string, error ) Console admin.datadir RPC {\"method\": \"admin_datadir\"}","title":"admin_datadir"},{"location":"source/taiyuepublic/Management-API/#example_1","text":"> admin.datadir \"/home/truechain/truechain-engineering-code/cmd/ taipublic/data\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_nodeinfo","text":"The nodeInfo administrative property can be queried for all the information known about the running taipublic node at the networking granularity. These include general information about the node itself as a participant of the P2P overlay protocol, as well as specialized information added by each of the running application protocols (e.g. tai , les , shh ). Client Method invocation Go admin.NodeInfo() (*p2p.NodeInfo, error ) Console admin.nodeInfo RPC {\"method\": \"admin_nodeInfo\"}","title":"admin_nodeInfo"},{"location":"source/taiyuepublic/Management-API/#example_2","text":"> admin.nodeInfo { enode: \"enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@[::]:30303\", id: \"44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d\", ip: \"::\", listenAddr: \"[::]:30303\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", ports: { discovery: 30303, listener: 30303 }, protocols: { tai: { difficulty: null, genesis: \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\", head: \"0xb83f73fbe6220c111136aefd27b160bf4a34085c65ba89f24246b3162257c36a\", network: 20 } } }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_peers","text":"You can query the peers property for information about all remote nodes that are connected. Client Method invocation Go admin.Peers() ([]*p2p.PeerInfo, error ) Console admin.peers RPC {\"method\": \"admin_peers\"}","title":"admin_peers"},{"location":"source/taiyuepublic/Management-API/#example_3","text":"> admin.peers [{ caps: [\"tai/61\", \"tai/62\", \"tai/63\"], id: \"08a6b39263470c78d3e4f58e3c997cd2e7af623afce64656cfc56480babcea7a9138f3d09d7b9879344c2d2e457679e3655d4b56eaff5fd4fd7f147bdb045124\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", network: { localAddress: \"192.168.0.104:51068\", remoteAddress: \"71.62.31.72:30303\" }, protocols: { tai: { difficulty: null, head: \"5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\", version: 63 } } }, /* ... */ { caps: [\"tai/61\", \"tai/62\", \"tai/63\"], id: \"fcad9f6d3faf89a0908a11ddae9d4be3a1039108263b06c96171eb3b0f3ba85a7095a03bb65198c35a04829032d198759edfca9b63a8b69dc47a205d94fce7cc\", name: \" taipublic/v0.7.2-unstable-46f28475/linux-amd64/go1.10.1\", network: { localAddress: \"192.168.0.104:55968\", remoteAddress: \"121.196.232.205:30303\" }, protocols: { tai: { difficulty: null, head: \"5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852\", version: 63 } } }]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_startrpc","text":"The startRPC administrative method starts an HTTP based JSON RPC API webserver to handle client requests. All the parameters are optional: host : network interface to open the listener socket on (defaults to \"localhost\" ) port : network port to open the listener socket on (defaults to 8545 ) cors : cross-origin resource sharing header to use (defaults to \"\" ) apis : API modules to offer over this interface (defaults to \"tai,net,web3\" ) The method returns a boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time. Client Method invocation Go admin.StartRPC(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error) Console admin.startRPC(host, port, cors, apis) RPC {\"method\": \"admin_startRPC\", \"params\": [host, port, cors, apis]}","title":"admin_startRPC"},{"location":"source/taiyuepublic/Management-API/#example_4","text":"> admin.startRPC(\"127.0.0.1\", 8545) true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_startws","text":"The startWS administrative method starts an WebSocket based JSON RPC API webserver to handle client requests. All the parameters are optional: host : network interface to open the listener socket on (defaults to \"localhost\" ) port : network port to open the listener socket on (defaults to 8546 ) cors : cross-origin resource sharing header to use (defaults to \"\" ) apis : API modules to offer over this interface (defaults to \"tai,net,web3\" ) The method returns a boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time. Client Method invocation Go admin.StartWS(host *string, port *rpc.HexNumber, cors *string, apis *string) (bool, error) Console admin.startWS(host, port, cors, apis) RPC {\"method\": \"admin_startWS\", \"params\": [host, port, cors, apis]}","title":"admin_startWS"},{"location":"source/taiyuepublic/Management-API/#example_5","text":"> admin.startWS(\"127.0.0.1\", 8546) true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_stoprpc","text":"The stopRPC administrative method closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not. Client Method invocation Go admin.StopRPC() (bool, error ) Console admin.stopRPC() RPC {\"method\": \"admin_stopRPC\"","title":"admin_stopRPC"},{"location":"source/taiyuepublic/Management-API/#example_6","text":"> admin.stopRPC() true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#admin_stopws","text":"The stopWS administrative method closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not. Client Method invocation Go admin.StopWS() (bool, error ) Console admin.stopWS() RPC {\"method\": \"admin_stopWS\"","title":"admin_stopWS"},{"location":"source/taiyuepublic/Management-API/#example_7","text":"> admin.stopWS() true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner","text":"The miner API allows you to remote control the node's mining operation and set various mining specific settings.","title":"Miner"},{"location":"source/taiyuepublic/Management-API/#miner_setextra","text":"Sets the extra data string that is included when this miner mines a block. Client Method invocation Go miner.setExtra(extra string) (bool, error) Console miner.setExtra(string) RPC {\"method\": \"miner_setExtra\", \"params\": [string]}","title":"miner_setExtra"},{"location":"source/taiyuepublic/Management-API/#example_8","text":"> miner.setExtra(\"it's my block\") true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner_setgasprice","text":"Sets the minimal accepted gas price when mining transactions. Any transactions that are below this limit are excluded from the mining process. Client Method invocation Go miner.setGasPrice(number *rpc.HexNumber) bool Console miner.setGasPrice(number) RPC {\"method\": \"miner_setGasPrice\", \"params\": [number]}","title":"miner_setGasPrice"},{"location":"source/taiyuepublic/Management-API/#example_9","text":"> miner.setGasPrice(10000000) true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner_start","text":"Start the CPU mining process with the given number of threads and generate a new DAG if need be. Client Method invocation Go miner.Start(threads *rpc.HexNumber) (bool, error) Console miner.start(number) RPC {\"method\": \"miner_start\", \"params\": [number]}","title":"miner_start"},{"location":"source/taiyuepublic/Management-API/#example_10","text":"> miner.start(8) null","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner_stop","text":"Stop the CPU mining operation. Client Method invocation Go miner.Stop() bool Console miner.stop() RPC {\"method\": \"miner_stop\", \"params\": []}","title":"miner_stop"},{"location":"source/taiyuepublic/Management-API/#example_11","text":"> miner.stop() true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner_setcoinbase","text":"Sets the coinbase, where mining rewards will go. Client Method invocation Go miner.Setcoinbase(common.Address) bool Console miner.setCoinbase(address) RPC {\"method\": \"miner_setcoinbase\", \"params\": [address]}","title":"miner_setCoinbase"},{"location":"source/taiyuepublic/Management-API/#example_12","text":"> miner.setCoinbase(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#miner_setelection","text":"Sets the election,To vote or not to vote Client Method invocation Go miner.SetElection(toElect bool, pubkey []byte) (bool, error) Console miner.setElection(toElect\uff0cpubkey) RPC {\"method\": \"miner_setElection\", \"params\": [toElect,pubkey]}","title":"miner_setElection"},{"location":"source/taiyuepublic/Management-API/#example_13","text":"> miner.setElection(true,\"0x04044308742b61976de7344edb8662d6d10be1c477dd46e8e4c433c1288442a79183480894107299ff7b0706490f1fb9c9b7c9e62ae62d57bd84a1e469460d8ac1\") true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#personal","text":"","title":"Personal"},{"location":"source/taiyuepublic/Management-API/#personal_listaccounts","text":"Returns all the Truechain account addresses of all keys in the key store. Client Method invocation Console personal.listAccounts RPC {\"method\": \"personal_listAccounts\", \"params\": []}","title":"personal_listAccounts"},{"location":"source/taiyuepublic/Management-API/#example_14","text":"> personal.listAccounts [\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"0xaf1dd3a5135bcdd38079927a80c75ad05cfd140b\", \"0x4a98debf425a2fd4f56ef6674c72c3606b615e75\"]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#personal_lockaccount","text":"Removes the private key with given address from memory. The account can no longer be used to send transactions. Client Method invocation Console personal.lockAccount(address) RPC {\"method\": \"personal_lockAccount\", \"params\": [string]}","title":"personal_lockAccount"},{"location":"source/taiyuepublic/Management-API/#example_15","text":"> personal.lockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") true","title":"Example"},{"location":"source/taiyuepublic/Management-API/#personal_newaccount","text":"Generates a new private key and stores it in the key store directory. The key file is encrypted with the given passphrase. Returns the address of the new account. At the taipublic console, newAccount will prompt for a passphrase when it is not supplied as the argument. Client Method invocation Console personal.newAccount() RPC {\"method\": \"personal_newAccount\", \"params\": [string]}","title":"personal_newAccount"},{"location":"source/taiyuepublic/Management-API/#example_16","text":"> personal.newAccount() Passphrase: Repeat passphrase: \"0x5e97870f263700f46aa00d967821199b9bc5a120\" The passphrase can also be supplied as a string. > personal.newAccount(\"h4ck3r\") \"0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#personal_unlockaccount","text":"Decrypts the key with the given address from the key store. Both passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not supplied as an argument, the console will prompt for the passphrase interactively. The unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to 300 seconds. An explicit duration of zero seconds unlocks the key until taipublic exits. The account can be used with tai_sign and tai_sendTransaction while it is unlocked. Client Method invocation Console personal.unlockAccount(address, passphrase, duration) RPC {\"method\": \"personal_unlockAccount\", \"params\": [string, string, number]}","title":"personal_unlockAccount"},{"location":"source/taiyuepublic/Management-API/#examples","text":"> personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\") Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true Supplying the passphrase and unlock duration as arguments: > personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\", \"foo\", 30) true If you want to type in the passphrase and stil override the default unlock duration, pass null as the passphrase. > personal.unlockAccount(\"0x5e97870f263700f46aa00d967821199b9bc5a120\", null, 30) Unlock account 0x5e97870f263700f46aa00d967821199b9bc5a120 Passphrase: true","title":"Examples"},{"location":"source/taiyuepublic/Management-API/#personal_sendtransaction","text":"Validate the given passphrase and submit transaction. The transaction is the same argument as for tai_sendTransaction and contains the from address. If the passphrase can be used to decrypt the private key belogging to tx.from the transaction is verified, signed and send onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls. Client Method invocation Console personal.sendTransaction(tx, passphrase) RPC {\"method\": \"personal_sendTransaction\", \"params\": [tx, string]}","title":"personal_sendTransaction"},{"location":"source/taiyuepublic/Management-API/#examples_1","text":"> var tx = {from: \"0x391694e7e0b0cce554cb130d723a9d27458f9298\", to: \"0xafa3f8684e54059998bc3a7b0d2b0da075154d66\", value: web3.toWei(1.23, \"true\")} undefined > personal.sendTransaction(tx, \"passphrase\") 0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f","title":"Examples"},{"location":"source/taiyuepublic/Management-API/#personal_sign","text":"The sign method calculates an Truechain specific signature with: sign(keccack256(\"\\x19TrueCchain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. See ecRecover to verify the signature. Client Method invocation Console personal.sign(message, account, [password]) RPC {\"method\": \"personal_sign\", \"params\": [message, account, password]}","title":"personal_sign"},{"location":"source/taiyuepublic/Management-API/#examples_2","text":"> personal.sign(\"0xdeadbeaf\", \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\"","title":"Examples"},{"location":"source/taiyuepublic/Management-API/#personal_ecrecover","text":"ecRecover returns the address associated with the private key that was used to calculate the signature in personal_sign . Client Method invocation Console personal.ecRecover(message, signature) RPC {\"method\": \"personal_ecRecover\", \"params\": [message, signature]}","title":"personal_ecRecover"},{"location":"source/taiyuepublic/Management-API/#examples_3","text":"> personal.sign(\"0xdeadbeaf\", \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\" > personal.ecRecover(\"0xdeadbeaf\", \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\") \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\"","title":"Examples"},{"location":"source/taiyuepublic/Management-API/#txpool","text":"The txpool API gives you access to several non-standard RPC methods to inspect the contents of the transaction pool containing all the currently pending transactions as well as the ones queued for future processing.","title":"Txpool"},{"location":"source/taiyuepublic/Management-API/#txpool_content","text":"Content returns the transactions contained within the transaction pool. Client Method invocation Go txpool.Content() (map[string]map[string]map[string][]*RPCTransaction) Console txpool.content RPC {\"method\": \"txpool_content\"}","title":"txpool_content"},{"location":"source/taiyuepublic/Management-API/#example_17","text":"> txpool.content { pending: { 0xbE7e39Fa0645F6eaf501Ad02318A7fDa5c4DF6C6: { 25421: { blockHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", blockNumber: null, from: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", gas: \"0x15f90\", gasPrice: \"0x430e23400\", hash: \"0xf6d3aefa3bad795a58fbf7afcc82f0cccb4419828c8f4dde5df5c9c2f494affb\", input: \"0x\", nonce: \"0x634d\", r: \"0xf70109404e86563118a585eaf7aa7643549d9bb0e903b7761dac36a1aacb27a3\", s: \"0x74d4091f7c18ab01d8c647090d0e77766578f19690390379fdc86e3fd4e0d8ee\", to: \"0x3216e8c10ad02ebb828aaf3b2dbc47fdbe24d336\", transactionIndex: \"0x0\", v: \"0x37\", value: \"0x2100\" }, 25465: { blockHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", blockNumber: null, from: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", gas: \"0x15f90\", gasPrice: \"0x430e23400\", hash: \"0x80bc09cd8414a6a9b139860709fedbb0a1714ff72c99ca02f3a28b2c3f387f02\", input: \"0x\", nonce: \"0x6379\", r: \"0x78f88d00d391c5087ad8d7d96451545c3e5ad4edb675bb1162f2bb0953b3c53f\", s: \"0x20234bc4790b06863f9d277d5afe4967fc84b9959715fb8b669434a23ac4182a\", to: \"0x95e5478957995d52da5f5e01cf907bbd3a739c51\", transactionIndex: \"0x0\", v: \"0x38\", value: \"0x2100\" } } }, queued: {} }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#txpool_inspect","text":"The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. This is a method specifically tailored to developers to quickly see the transactions in the pool and find any potential issues. The result is an object with two fields pending and queued . Each of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with transactions summary strings. Please note, there may be multiple transactions associated with the same account and nonce. This can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions). Client Method invocation Go txpool.Inspect() (map[string]map[string]map[string][]string) Console txpool.inspect RPC {\"method\": \"txpool_inspect\"}","title":"txpool_inspect"},{"location":"source/taiyuepublic/Management-API/#example_18","text":"> txpool.inspect { pending: {}, queued: {} }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#txpool_status","text":"The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. The result is an object with two fields pending and queued , each of which is a counter representing the number of transactions in that particular state. Client Method invocation Go txpool.Status() (map[string]*rpc.HexNumber) Console txpool.status RPC {\"method\": \"txpool_status\"}","title":"txpool_status"},{"location":"source/taiyuepublic/Management-API/#example_19","text":"> txpool.status { pending: 100, queued: 0 }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#fruitpool","text":"","title":"Fruitpool"},{"location":"source/taiyuepublic/Management-API/#fruitpool_content","text":"Content returns the pendingFruits contained within the snail pool. Client Method invocation Go fruitpool.Content() ([]*RPCFruit) Console fruitpool.content RPC {\"method\": \"fruitpool_content\"}","title":"fruitpool_content"},{"location":"source/taiyuepublic/Management-API/#example_20","text":"> fruitpool.content [{ fastHash: \"0xbf847397758ea1280a82c667c1cdda7604d12a15f062a3d82e4b8e3b7f372af8\", fastNumber: 126, fruitDifficulty: 2000, fruitHash: \"0xbc839c8efd9117a565ba16c0cee9644c83304f7c333be1d28bce282a3a61ae9d\", number: 2, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0xca046c8d3dfea13c4c5b8224ce3bc2fc4230ea12135483a15de7d11157d40805\" }, { fastHash: \"0x2558e2ef0d0df2ff11353ecc85fb4ae6982da71f464a0ecbf59ec297443aa259\", fastNumber: 127, fruitDifficulty: 2000, fruitHash: \"0x608b5237ec8a572c8168ab050981ca840271447a6cae8ac2f9693e7e6680abfc\", number: 3, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0xe6bd08a4475a566d7e0659697563f7e65d3e6ea633e6908a8f6aa94bdba3632f\" }, { fastHash: \"0xea22558ecc9c92591f6379bc766fec8af55a0641b22508bf5431d5d499b794ce\", fastNumber: 128, fruitDifficulty: 2000, fruitHash: \"0xf5e45e78c58061c327782f49fee6cdbf8874d4e20d7082f99cbbb32f06a46bb9\", number: 3, pointerHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", pointerNumber: 0, signHash: \"0x18e13d804ac9966c48e4d7e70e6ff2d16ac53b0d23d644a54fc3201566ae0857\" }]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#fruitpool_inspect","text":"Inspect returns the unVerifiedFruits contained within the snail pool. Client Method invocation Go fruitpool.Inspect() ([]*RPCFruit) Console fruitpool.inspect RPC {\"method\": \"fruitpool_inspect\"}","title":"fruitpool_inspect"},{"location":"source/taiyuepublic/Management-API/#example_21","text":"> fruitpool.inspect [{ fastHash: \"0xa71cfac04c172f29b6c300758df80d2a238f62918616cfe951dbcbb564e075cd\", fastNumber: 153632, fruitDifficulty: 100, fruitHash: \"0x0f23c22f5446c696d142a8e582dd255ee622d2f27894305f8fd4ef6ea281c5ee\", number: 2480, pointerHash: \"0x0582995b001c00afa5446b6a410b177685fbabb89f69430b5e6a4d9953041377\", pointerNumber: 2472, signHash: \"0x7622c3e1c58f83c80565779a5eeeb4d710bd1533d28c130718c8ecb470649856\" }, { fastHash: \"0xde0b0918bb97c9314ae511d141d05b2bf9ba8727c2a9c9b0989acbecb4e2bdce\", fastNumber: 153633, fruitDifficulty: 100, fruitHash: \"0xed8890352230a6a9524e090628899a315f7be70f06849d031a48c47cd615b0a9\", number: 2480, pointerHash: \"0x0582995b001c00afa5446b6a410b177685fbabb89f69430b5e6a4d9953041377\", pointerNumber: 2472, signHash: \"0x54885fc9f07162ecc23e9656f75977e474b41384294b0cc1cfe222a2b1eedede\" }, { fastHash: \"0x9b5d0dd3b3d1b33daf29d007b7f7525f60e4c254979fc8b4ed81e585390eebc7\", fastNumber: 155138, fruitDifficulty: 100, fruitHash: \"0xbf25a17ec04585626a6da4ebe6d12dfb26120d99d523bd5a7c199ac6b5fd9af5\", number: 2504, pointerHash: \"0xf99a75e82d1ecdb5f55841276aa4708b7425ec9ed93681f20c03392b36b3497b\", pointerNumber: 2496, signHash: \"0x4030b0467603334a57bf6b7e76b042dcfb1c06376a214c1c299cb053e48a85c6\" }]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#fruitpool_status","text":"Status returns the number of pending and unVerified Fruits in the pool. Client Method invocation Go fruitpool.Status() (map[string]hexutil.Uint) Console fruitpool.status RPC {\"method\": \"fruitpool_status\"}","title":"fruitpool_status"},{"location":"source/taiyuepublic/Management-API/#example_22","text":"> fruitpool.status { pending: \"0x3f\", unverified: \"0x69a\" }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#debug","text":"The debug API gives you access to several non-standard RPC methods, which will allow you to inspect, debug and set certain debugging flags during runtime.","title":"Debug"},{"location":"source/taiyuepublic/Management-API/#debug_backtraceat","text":"Sets the logging backtrace location. When a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr. The location is specified as <filename>:<line> . Client Method invocation Console debug.backtraceAt(string) RPC {\"method\": \"debug_backtraceAt\", \"params\": [string]} Example: > debug.backtraceAt(\"server.go:443\")","title":"debug_backtraceAt"},{"location":"source/taiyuepublic/Management-API/#debug_blockprofile","text":"Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile . Client Method invocation Console debug.blockProfile(file, seconds) RPC {\"method\": \"debug_blockProfile\", \"params\": [string, number]}","title":"debug_blockProfile"},{"location":"source/taiyuepublic/Management-API/#debug_cpuprofile","text":"Turns on CPU profiling for the given duration and writes profile data to disk. Client Method invocation Console debug.cpuProfile(file, seconds) RPC {\"method\": \"debug_cpuProfile\", \"params\": [string, number]}","title":"debug_cpuProfile"},{"location":"source/taiyuepublic/Management-API/#debug_dumpblock","text":"Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code). Client Method invocation Go debug.DumpBlock(number uint64) (state.World, error) Console debug.traceBlockByHash(number, [options]) RPC {\"method\": \"debug_dumpBlock\", \"params\": [number]}","title":"debug_dumpBlock"},{"location":"source/taiyuepublic/Management-API/#example_23","text":"> debug.dumpBlock(\"0xa\") { fff7ac99c8e4feb60c9750054bdc14ce1857f181: { balance: \"49358640978154672\", code: \"\", codeHash: \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\", nonce: 2, root: \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", storage: {} }, fffbca3a38c3c5fcb3adbb8e63c04c3e629aafce: { balance: \"3460945928\", code: \"\", codeHash: \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\", nonce: 657, root: \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", storage: {} } }, root: \"19f4ed94e188dd9c7eb04226bd240fa6b449401a6c656d6d2816a87ccaf206f1\" }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#debug_gcstats","text":"Returns GC statistics. See https://golang.org/pkg/runtime/debug/#GCStats for information about the fields of the returned object. Client Method invocation Console debug.gcStats() RPC {\"method\": \"debug_gcStats\", \"params\": []}","title":"debug_gcStats"},{"location":"source/taiyuepublic/Management-API/#debug_getblockrlp","text":"Retrieves and returns the RLP encoded block by number. Client Method invocation Go debug.GetBlockRlp(number uint64) (string, error) Console debug.getBlockRlp(number, [options]) RPC {\"method\": \"debug_getBlockRlp\", \"params\": [number]}","title":"debug_getBlockRlp"},{"location":"source/taiyuepublic/Management-API/#debug_gotrace","text":"Turns on Go runtime tracing for the given duration and writes trace data to disk. Client Method invocation Console debug.goTrace(file, seconds) RPC {\"method\": \"debug_goTrace\", \"params\": [string, number]}","title":"debug_goTrace"},{"location":"source/taiyuepublic/Management-API/#debug_memstats","text":"Returns detailed runtime memory statistics. See https://golang.org/pkg/runtime/#MemStats for information about the fields of the returned object. Client Method invocation Console debug.memStats() RPC {\"method\": \"debug_memStats\", \"params\": []}","title":"debug_memStats"},{"location":"source/taiyuepublic/Management-API/#debug_seedhash","text":"Fetches and retrieves the seed hash of the block by number Client Method invocation Go debug.SeedHash(number uint64) (string, error) Console debug.seedHash(number, [options]) RPC {\"method\": \"debug_seedHash\", \"params\": [number]}","title":"debug_seedHash"},{"location":"source/taiyuepublic/Management-API/#debug_sethead","text":"Sets the current head of the local snail chain by snailBlock number. Note , this is a destructive action and may severely damage your snail chain. Use with extreme caution. Client Method invocation Go debug.SetHead(number uint64) Console debug.setHead(number) RPC {\"method\": \"debug_setHead\", \"params\": [number]} warn: it may cause the console quit and may destory the database,just for debug and test.","title":"debug_setHead"},{"location":"source/taiyuepublic/Management-API/#debug_setblockprofilerate","text":"Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile . Client Method invocation Console debug.setBlockProfileRate(rate) RPC {\"method\": \"debug_setBlockProfileRate\", \"params\": [number]}","title":"debug_setBlockProfileRate"},{"location":"source/taiyuepublic/Management-API/#debug_stacks","text":"Returns a printed representation of the stacks of all goroutines. Note that the web3 wrapper for this method takes care of the printing and does not return the string. Client Method invocation Console debug.stacks() RPC {\"method\": \"debug_stacks\", \"params\": []}","title":"debug_stacks"},{"location":"source/taiyuepublic/Management-API/#debug_startcpuprofile","text":"Turns on CPU profiling indefinitely, writing to the given file. Client Method invocation Console debug.startCPUProfile(file) RPC {\"method\": \"debug_startCPUProfile\", \"params\": [string]}","title":"debug_startCPUProfile"},{"location":"source/taiyuepublic/Management-API/#debug_startgotrace","text":"Starts writing a Go runtime trace to the given file. Client Method invocation Console debug.startGoTrace(file) RPC {\"method\": \"debug_startGoTrace\", \"params\": [string]}","title":"debug_startGoTrace"},{"location":"source/taiyuepublic/Management-API/#debug_stopcpuprofile","text":"Stops an ongoing CPU profile. Client Method invocation Console debug.stopCPUProfile() RPC {\"method\": \"debug_stopCPUProfile\", \"params\": []}","title":"debug_stopCPUProfile"},{"location":"source/taiyuepublic/Management-API/#debug_stopgotrace","text":"Stops writing the Go runtime trace. Client Method invocation Console debug.stopGoTrace() RPC {\"method\": \"debug_stopGoTrace\", \"params\": []}","title":"debug_stopGoTrace"},{"location":"source/taiyuepublic/Management-API/#debug_traceblock","text":"The traceBlock method will return a full stack trace of all invoked opcodes of all transaction that were included included in this block. Note , the parent of this block must be present or it will fail. Client Method invocation Go debug.TraceBlock(blockRlp []byte, config. *vm.Config) BlockTraceResult Console debug.traceBlock(tblockRlp, [options]) RPC {\"method\": \"debug_traceBlock\", \"params\": [blockRlp, {}]}","title":"debug_traceBlock"},{"location":"source/taiyuepublic/Management-API/#example_24","text":"> debug.traceBlock(\"0xblock_rlp\") { gas: 85301, returnValue: \"\", structLogs: [{ depth: 1, error: \"\", gas: 162106, gasCost: 3, memory: null, op: \"PUSH1\", pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \"\", gas: 100000, gasCost: 0, memory: [\"0000000000000000000000000000000000000000000000000000000000000006\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"0000000000000000000000000000000000000000000000000000000000000060\"], op: \"STOP\", pc: 120, stack: [\"00000000000000000000000000000000000000000000000000000000d67cbec9\"], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \"8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\", 0000000000000000000000000000000000000000000000000000000000000006: \"0000000000000000000000000000000000000000000000000000000000000001\", f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \"00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\" } }]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#debug_traceblockbynumber","text":"Similar to debug_traceBlock\uff0c traceBlockByNumber accepts a block number and will replay the block that is already present in the database. Client Method invocation Go debug.TraceBlockByNumber(number uint64, config. *vm.Config) BlockTraceResult Console debug.traceBlockByNumber(number, [options]) RPC {\"method\": \"debug_traceBlockByNumber\", \"params\": [number, {}]}","title":"debug_traceBlockByNumber"},{"location":"source/taiyuepublic/Management-API/#debug_traceblockbyhash","text":"Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database. Client Method invocation Go debug.TraceBlockByHash(hash common.Hash, config. *vm.Config) BlockTraceResult Console debug.traceBlockByHash(hash, [options]) RPC {\"method\": \"debug_traceBlockByHash\", \"params\": [hash {}]}","title":"debug_traceBlockByHash"},{"location":"source/taiyuepublic/Management-API/#debug_traceblockfromfile","text":"Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block. Client Method invocation Go debug.TraceBlockFromFile(fileName string, config. *vm.Config) BlockTraceResult Console debug.traceBlockFromFile(fileName, [options]) RPC {\"method\": \"debug_traceBlockFromFile\", \"params\": [fileName, {}]}","title":"debug_traceBlockFromFile"},{"location":"source/taiyuepublic/Management-API/#debug_tracetransaction","text":"The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash. In addition to the hash of the transaction you may give it a secondary optional argument, which specifies the options for this specific call. The possible options are: disableStorage : BOOL . Setting this to true will disable storage capture (default = false). disableMemory : BOOL . Setting this to true will disable memory capture (default = false). disableStack : BOOL . Setting this to true will disable stack capture (default = false). tracer : STRING . Setting this will enable JavaScript-based transaction tracing, described below. If set, the previous four arguments will be ignored. timeout : STRING . Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Valid values are described here . Client Method invocation Go debug.TraceTransaction(txHash common.Hash, logger *vm.LogConfig) (*ExecutionResurt, error) Console debug.traceTransaction(txHash, [options]) RPC {\"method\": \"debug_traceTransaction\", \"params\": [txHash, {}]}","title":"debug_traceTransaction"},{"location":"source/taiyuepublic/Management-API/#example_25","text":"> debug.traceTransaction(\"0x2059dd53ecac9827faad14d364f9e04b1d5fe5b506e3acc886eff7a6f88a696a\") { gas: 85301, returnValue: \"\", structLogs: [{ depth: 1, error: \"\", gas: 162106, gasCost: 3, memory: null, op: \"PUSH1\", pc: 0, stack: [], storage: {} }, /* snip */ { depth: 1, error: \"\", gas: 100000, gasCost: 0, memory: [\"0000000000000000000000000000000000000000000000000000000000000006\", \"0000000000000000000000000000000000000000000000000000000000000000\", \"0000000000000000000000000000000000000000000000000000000000000060\"], op: \"STOP\", pc: 120, stack: [\"00000000000000000000000000000000000000000000000000000000d67cbec9\"], storage: { 0000000000000000000000000000000000000000000000000000000000000004: \"8241fa522772837f0d05511f20caa6da1d5a3209000000000000000400000001\", 0000000000000000000000000000000000000000000000000000000000000006: \"0000000000000000000000000000000000000000000000000000000000000001\", f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f: \"00000000000000000000000002e816afc1b5c0f39852131959d946eb3b07b5ad\" } }]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#javascript-based-tracing","text":"Specifying the tracer option in the second argument enables JavaScript-based tracing. In this mode, tracer is interpreted as a JavaScript expression that is expected to evaluate to an object with (at least) two methods, named step and result . step is a function that takes two arguments, log and db, and is called for each step of the EVM, or when an error occurs, as the specified transaction is traced. log has the following fields: pc : Number, the current program counter op : Object, an OpCode object representing the current opcode gas : Number, the amount of gas remaining gasPrice : Number, the cost in wei of each unit of gas memory : Object, a structure representing the contract's memory space stack : array[big.Int], the EVM execution stack depth : The execution depth account : The address of the account executing the current operation err : If an error occured, information about the error If err is non-null, all other fields should be ignored. For efficiency, the same log object is reused on each execution step, updated with current values; make sure to copy values you want to preserve beyond the current call. For instance, this step function will not work: function(log) { this.logs.append(log); } But this step function will: function(log) { this.logs.append({gas: log.gas, pc: log.pc, ...}); } log.op has the following methods: isPush() - returns true iff the opcode is a PUSHn toString() - returns the string representation of the opcode toNumber() - returns the opcode's number log.memory has the following methods: slice(start, stop) - returns the specified segment of memory as a byte slice length() - returns the length of the memory log.stack has the following methods: peek(idx) - returns the idx-th element from the top of the stack (0 is the topmost element) as a big.Int length() - returns the number of elements in the stack db has the following methods: getBalance(address) - returns a big.Int with the specified account's balance getNonce(address) - returns a Number with the specified account's nonce getCode(address) - returns a byte slice with the code for the specified account getState(address, hash) - returns the state value for the specified account and the specified hash exists(address) - returns true if the specified address exists The second function, 'result', takes no arguments, and is expected to return a JSON-serializable value to return to the RPC caller. If the step function throws an exception or executes an illegal operation at any point, it will not be called on any further VM steps, and the error will be returned to the caller. Note that several values are Golang big.Int objects, not JavaScript numbers or JS bigints. As such, they have the same interface as described in the godocs. Their default serialization to JSON is as a Javascript number; to serialize large numbers accurately call .String() on them. For convenience, big.NewInt(x) is provided, and will convert a uint to a Go BigInt. Usage example, returns the top element of the stack at each CALL opcode only: debug.traceTransaction(txhash, {tracer: '{data: [], step: function(log) { if(log.op.toString() == \"CALL\") this.data.push(log.stack.peek(0)); }, result: function() { return this.data; }}'});","title":"JavaScript-based tracing"},{"location":"source/taiyuepublic/Management-API/#debug_verbosity","text":"Sets the logging verbosity ceiling. Log messages with level up to and including the given level will be printed. The verbosity of individual packages and source files can be raised using debug_vmodule . Client Method invocation Console debug.verbosity(level) RPC {\"method\": \"debug_vmodule\", \"params\": [number]}","title":"debug_verbosity"},{"location":"source/taiyuepublic/Management-API/#debug_vmodule","text":"Sets the logging verbosity pattern. Client Method invocation Console debug.vmodule(string) RPC {\"method\": \"debug_vmodule\", \"params\": [string]}","title":"debug_vmodule"},{"location":"source/taiyuepublic/Management-API/#examples_4","text":"If you want to see messages from a particular Go package (directory) and all subdirectories, use: > debug.vmodule(\"tai/*=6\") If you want to restrict messages to a particular package (e.g. p2p) but exclude subdirectories, use: > debug.vmodule(\"p2p=6\") If you want to see log messages from a particular source file, use > debug.vmodule(\"server.go=6\") You can compose these basic patterns. If you want to see all output from peer.go in a package below tai (tai/peer.go, tai/downloader/peer.go) as well as output from package p2p at level <= 5, use: debug.vmodule(\"tai/*/peer.go=6,p2p=5\")","title":"Examples"},{"location":"source/taiyuepublic/Management-API/#debug_writeblockprofile","text":"Writes a goroutine blocking profile to the given file. Client Method invocation Console debug.writeBlockProfile(file) RPC {\"method\": \"debug_writeBlockProfile\", \"params\": [string]}","title":"debug_writeBlockProfile"},{"location":"source/taiyuepublic/Management-API/#debug_writememprofile","text":"Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag. Client Method invocation Console debug.writeMemProfile(file string) RPC {\"method\": \"debug_writeBlockProfile\", \"params\": [string]}","title":"debug_writeMemProfile"},{"location":"source/taiyuepublic/Management-API/#tai","text":"","title":"tai"},{"location":"source/taiyuepublic/Management-API/#tai_protocolversion","text":"Returns the current Truechain protocol version. Client Method invocation Console tai.protocolVersion RPC {\"method\": \"tai_protocolVersion\"}","title":"tai_protocolVersion"},{"location":"source/taiyuepublic/Management-API/#tai_syncing","text":"Returns an object with data about the sync status or false Client Method invocation Go tai.syncing() (interface{}, error ) Console tai.syncing RPC {\"method\": \"tai_syncing \"}`","title":"tai_syncing"},{"location":"source/taiyuepublic/Management-API/#example_26","text":"> tai.syncing { currentBlock: 961, highestBlock: 7092, knownStates: 0, pulledStates: 0, startingBlock: 0 }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_coinbase","text":"Returns the client coinbase address. Client Method invocation Console tai.coinbase RPC {\"method\": \"tai_coinbase\"}","title":"tai_coinbase"},{"location":"source/taiyuepublic/Management-API/#example_27","text":"> tai.coinbase \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_mining","text":"Returns true if client is actively mining new blocks. Client Method invocation Console tai.mining RPC {\"method\": \"tai_mining\"}","title":"tai_mining"},{"location":"source/taiyuepublic/Management-API/#tai_hashrate","text":"Returns the number of hashes per second that the node is mining with. Client Method invocation Console tai.hashrate RPC {\"method\": \"tai_hashrate\"}","title":"tai_hashrate"},{"location":"source/taiyuepublic/Management-API/#tai_gasprice","text":"Returns the current price per gas in wei. Client Method invocation Console tai.gasPrice RPC {\"method\": \"tai_gasPrice\"}","title":"tai_gasPrice"},{"location":"source/taiyuepublic/Management-API/#example_28","text":"> tai.gasPrice 18000000000","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_accounts","text":"Returns a list of addresses owned by client. Client Method invocation Console tai.accounts RPC {\"method\": \"tai_accounts\"}","title":"tai_accounts"},{"location":"source/taiyuepublic/Management-API/#example_29","text":"> tai.accounts [\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", \"0xaf1dd3a5135bcdd38079927a80c75ad05cfd140b\", \"0x4a98debf425a2fd4f56ef6674c72c3606b615e75\"]","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_blocknumber","text":"Returns the number of most recent block. Client Method invocation Console tai.blockNumber RPC {\"method\": \"tai_blockNumber\"}","title":"tai_blockNumber"},{"location":"source/taiyuepublic/Management-API/#example_30","text":"> tai.blockNumber 82917","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getbalance","text":"Returns the balance of the account of given address.integer of the current balance in wei. Client Method invocation Console tai.getBalance(address) RPC {\"method\": \"tai_startCPUProfile\", \"params\": [string, latest]}","title":"tai_getBalance"},{"location":"source/taiyuepublic/Management-API/#example_31","text":"> tai.getBalance(\"0xbE7e39Fa0645F6eaf501Ad02318A7fDa5c4DF6C6\") 10000000000000000000","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getstorageat","text":"GetStorageAt returns the storage from the state at the given address, key and block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block numbers are also allowed. Client Method invocation Go `tai.getStorageAt(address,key,blockNr) (hexutil.Bytes, error) Console tai.getStorageAt(address, key) RPC {\"method\": \"tai_getStorageAt\", \"params\": [address, key, latest]}","title":"tai_getStorageAt"},{"location":"source/taiyuepublic/Management-API/#example_32","text":"> tai.getStorageAt(\"0x295a70b2de5e3953354a6a8344e616ed314d7251\",\"0x0\",\"latest\") \"0x0000000000000000000000000000000000000000000000000000000000000000\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_gettransactioncount","text":"GetTransactionCount returns the number of transactions the given address has sent for the given block number Client Method invocation Console tai.getTransactionCount(address) RPC {\"method\": \"tai_getTransactionCount\", \"params\": [address, latest]}","title":"tai_getTransactionCount"},{"location":"source/taiyuepublic/Management-API/#example_33","text":"> tai.getTransactionCount(\"0x295a70b2de5e3953354a6a8344e616ed314d7251\") 12","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getblocktransactioncount","text":"Returns the number of transactions in a block matching the given block number. Client Method invocation Console tai.getBlockTransactionCount(number) RPC {\"method\": \"tai_getBlockTransactionCountByNumber\", \"params\": [string]}","title":"tai_getBlockTransactionCount"},{"location":"source/taiyuepublic/Management-API/#example_34","text":"> tai.getBlockTransactionCount(12) 10 > tai.getBlockTransactionCount(\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\") 10","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getcode","text":"Returns code at a given address. Divided into ordinary account and contract account address Ordinary account return \"0x\" Where the contract account returns the binary code Client Method invocation Console tai.getCode(address) RPC {\"method\": \"tai_getCode\", \"params\": [address, latest]}","title":"tai_getCode"},{"location":"source/taiyuepublic/Management-API/#example_35","text":"> tai.getCode(\"0xB824adf0Bad5E49bB214922F4499bD2cf08ef519\") \"0x\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_sign","text":"The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))). By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked. Client Method invocation Console tai.sign(address,message) RPC {\"method\": \"tai_sign\", \"params\": [address, message]}","title":"tai_sign"},{"location":"source/taiyuepublic/Management-API/#example_36","text":"> personal.unlockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") Unlock account 0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6 Passphrase: true > tai.sign(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"0xdeadbeaf\") \"0x0d7d2150b38dc30ba0aa8db9171abb1bd31b6cf39f4edf2b93de0a2b6ba05a81034aa81b462fb5b8b09c74dba29172c9ad098607d7898a3aa8412b40ef2686841b\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_sendtransaction","text":"Creates new message call transaction or a contract creation, if the data field contains code. params: Object - The transaction object from: DATA, 20 Bytes - The address the transaction is send from. to: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas: QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see Truechain Contract ABI nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. Client Method invocation Console tai.sendTransaction(params) RPC {\"method\": \"tai_sendTransaction\", \"params\": [params]}","title":"tai_sendTransaction"},{"location":"source/taiyuepublic/Management-API/#example_37","text":"> personal.unlockAccount(\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\") Unlock account 0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6 Passphrase: true > tai.sendTransaction({\"from\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"to\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\",\"value\":\"1000000000000000\"}) \"0xcf3d3adb9a6b875e3adb966bc436a963f689f9dbf2ea18a3955fed263d865dd1\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_sendrawtransaction","text":"SendRawTransaction will add the signed transaction to the transaction pool. The sender is responsible for signing the transaction and using the correct nonce. Client Method invocation Console tai.sendRawTransaction(params) RPC {\"method\": \"tai_sendRawTransaction\", \"params\": [params]}","title":"tai_sendRawTransaction"},{"location":"source/taiyuepublic/Management-API/#example_38","text":"> tai.sendRawTransaction({see above}) \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_call","text":"Call executes the given transaction on the state for the given block number. It doesn't make and changes in the state/blockchain and is useful to execute and retrieve values. Parameters Object - The transaction call object from: DATA, 20 Bytes - (optional) The address the transaction is sent from. to: DATA, 20 Bytes - The address the transaction is directed to. gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. tai_call consumes zero gas, but this parameter may be needed by some executions. gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas value: QUANTITY - (optional) Integer of the value sent with this transaction data: DATA - (optional) Hash of the method signature and encoded parameters. For details see Truechain Contract ABI QUANTITY|TAG - integer block number, or the string \"latest\", \"earliest\" or \"pending\", see the default block parameter Client Method invocation Console tai.call(params) RPC {\"method\": \"tai_call\", \"params\": [params]}","title":"tai_call"},{"location":"source/taiyuepublic/Management-API/#example_39","text":"> tai.call({\"to\":\"0x199e7f5314d01c19fa19f220bb19f5b55d26dc33\"}) \"0x\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_estimategas","text":"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. Client Method invocation Console tai.estimateGas(options) RPC {\"method\": \"tai_estimateGasl\", \"params\": [options]}","title":"tai_estimateGas"},{"location":"source/taiyuepublic/Management-API/#example_40","text":"> tai.estimateGas({\"from\":\"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\"}) 53000","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getblock","text":"Returns information about a block by hash or number Client Method invocation Console tai.getBlock(Parameters) RPC {\"method\": \"tai_getBlock\", \"params\": [Parameters]} Parameters can be integer of a block number,or hash of a block,or the string \"earliest\", \"latest\" or \"pending\".","title":"tai_getBlock"},{"location":"source/taiyuepublic/Management-API/#example_41","text":"> tai.getBlock(2) { SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: \"0x0\", difficulty: 0, extraData: \"0x\", gasLimit: 21977111, gasUsed: 0, hash: \"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\", logsBloom: \"0xnumber: 2, parentHash: \"0x3247a1fff229e6a3b5f9d48e1dd4f534d59bedc83b8c62f034df7e4421da3392\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ result: 1, sign: \"0x2575eb8dc39067c35cabc2a803215a93857e5ba63f70b571b188fb5e34c4020863e84ff448ef5cef0bb7a379c50c8a27e30a63ab73714be4ef66ed7402f36f7c01\" }], size: 572, stateRoot: \"0x47e15682f9a8bad160ae6c983327f7ecf0dc319e35362f7c7a23825f713f9202\", timestamp: 1544147499, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" } > tai.getBlock(\"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\") { SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: \"0x0\", difficulty: 0, extraData: \"0x\", gasLimit: 21977111, gasUsed: 0, hash: \"0xe3af910ef0b1e6385f44b03a88bfa91ae2e6c4409e275151a4fb46670db5c798\", logsBloom: \"0xnumber: 2, parentHash: \"0x3247a1fff229e6a3b5f9d48e1dd4f534d59bedc83b8c62f034df7e4421da3392\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ result: 1, sign: \"0x2575eb8dc39067c35cabc2a803215a93857e5ba63f70b571b188fb5e34c4020863e84ff448ef5cef0bb7a379c50c8a27e30a63ab73714be4ef66ed7402f36f7c01\" }], size: 572, stateRoot: \"0x47e15682f9a8bad160ae6c983327f7ecf0dc319e35362f7c7a23825f713f9202\", timestamp: 1544147499, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" } > tai.getBlock(\"latest\") { CommitteeHash: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", SnailHash: \"0x0000000000000000000000000000000000000000000000000000000000000000\", SnailNumber: 0, difficulty: 0, extraData: \"0x\", gasLimit: 79272345, gasUsed: 0, hash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", logsBloom: \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", number: 106178, parentHash: \"0xbbc548feed020abba4f22a28f1f91713f1e6be80726d5e65d2ccdaaeea2d59f3\", receiptsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", signs: [{ fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x4cab89f8ca069f249752c7b9fad1e003e7cbc1a75b593b03364870ad148da04f447a969d6a968b2a72c05ce170ef9236c83b5c27b2c99e171caa1a3d6c4f407e00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xb45a6a6fc093526a40c6949b2b6a8172b84dde26dcdc1f80abedc466bab37478136bf360b940da6faf1ac656b3c7177639d7eb6a4642813614a83424b1aae13001\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x50581788f64cc3ca0c8e03d8dad419fd75f53d79ca71970380da86918d45479c636acb60d9c30f1a3ac9d9654c0897d256d73e46ee157542b357856b3532bb0f00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0x40d9a42c5906118600df4e6b9fb641bc682769b6f16fe7f39529b0de8e7c4c10773132e7f790b70962a32b27fa7e178de532abeb8e91f119bcc538801f4a671401\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xd7dec860b864e680f13ceec2ab9e977a7a1c905a26fa09679557d4665e2c38f74a5436b4d62a607e6490465295d312c7ec480fce521be3da4bbeb8c2e173501b00\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xfd151b1ade2601125120a43a7f21284d4ae36d3c68df5d53425baa4985a32f4451906ba5860331cc98f0f093eaf24fb2bfaeef1e253b9af04b488e39f56f6e7100\" }, { fastHash: \"0xd42db5fa19c087b85df80970ad31aa5e1e93080358e210afac7d59098d0cbb73\", fastHeight: \"0x19ec2\", result: 1, sign: \"0xfd4e6c2356095a749e686145ce537b4b5216aaf279c08cf0c5ae5b9aa06f01c307ec0817e3a43a7d4c6fbee5008d24e69a7de82572e03b6e46864290e030b20f01\" }], size: 1255, stateRoot: \"0x7b89895f05fb321ad8fd4f9286c0deb848f7b09e8b1727d870521b9468d805c7\", switchInfos: [], timestamp: 1553064924, transactions: [], transactionsRoot: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_gettransaction","text":"Returns the information about a transaction requested by transaction hash Client Method invocation Console tai.getTransaction(hash) RPC {\"method\": \"tai_getTransaction\", \"params\": [hash]}","title":"tai_getTransaction"},{"location":"source/taiyuepublic/Management-API/#tai_gettransactionreceipt","text":"Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Client Method invocation Console tai.getTransactionReceipt(hash) RPC {\"method\": \"tai_getTransactionReceipt\", \"params\": [hash]}","title":"tai_getTransactionReceipt"},{"location":"source/taiyuepublic/Management-API/#example_42","text":"> tai.getTransactionReceipt(\"0x389f4ea234928502ab7a3066593a810aa9a03957b806527dfba5c55d67cbf427\") { blockHash: \"0x5c60cb0ad195b9c35bfb5f4efb2d97bf5d0b91ae05d1072167613e9b1c892454\", blockNumber: 1022, contractAddress: null, cumulativeGasUsed: 21000, from: \"0xb824adf0bad5e49bb214922f4499bd2cf08ef519\", gasUsed: 21000, logs: [], logsBloom: \"0xstatus: \"0x1\", to: \"0xb42669609d9932f89c16c7c1803cb03130a7b193\", transactionHash: \"0x389f4ea234928502ab7a3066593a810aa9a03957b806527dfba5c55d67cbf427\", transactionIndex: 0 }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_compile","text":"Returns a list of available compilers in the client. Client Method invocation Console tai.compile RPC {\"method\": \"tai_compile\", \"params\": []}","title":"tai_compile"},{"location":"source/taiyuepublic/Management-API/#example_43","text":"> tai.compile { lll: function(), serpent: function(), solidity: function() }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getwork","text":"GetWork returns a work package for external miner. The work package consists of 3 strings result[0], 32 bytes hex encoded current block header pow-hash result[1], 32 bytes hex encoded seed hash used for DAG result[2], 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty Client Method invocation Console tai.getWork RPC {\"method\": \"tai_getWork\", \"params\": []}","title":"tai_getWork"},{"location":"source/taiyuepublic/Management-API/#example_44","text":"> tai.getWork function()","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_defaultblock","text":"Return latest block marking Client Method invocation Console tai.defaultBlock RPC {\"method\": \"tai_defaultBlock\", \"params\": []}","title":"tai_defaultBlock"},{"location":"source/taiyuepublic/Management-API/#example_45","text":"> tai.defaultBlock \"latest\"","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_pendingtransactions","text":"PendingTransactions returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages. Client Method invocation Console tai.pendingTransactions RPC {\"method\": \"tai_PendingTransactions\", \"params\": []}","title":"tai_PendingTransactions"},{"location":"source/taiyuepublic/Management-API/#example_46","text":"> tai.pendingTransactions []","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_committeenumber","text":"Return the current number of sessions of the committee Client Method invocation Console tai.committeeNumber RPC {\"method\": \"tai_committeeNumber\", \"params\": []}","title":"tai_committeeNumber"},{"location":"source/taiyuepublic/Management-API/#example_47","text":"> tai.committeeNumber 41","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_fruitnumber","text":"Returns the height of the current fruit Client Method invocation Console tai.fruitNumber RPC {\"method\": \"tai_fruitNumber\", \"params\": []}","title":"tai_fruitNumber"},{"location":"source/taiyuepublic/Management-API/#example_48","text":"> tai.fruitNumber 477899","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_rewardsnailblock","text":"RewardSnailBlock return the latest snail block rewarded. Client Method invocation Console tai.rewardSnailBlock RPC {\"method\": \"tai_rewardSnailBlock\", \"params\": []}","title":"tai_rewardSnailBlock"},{"location":"source/taiyuepublic/Management-API/#example_49","text":"> tai.rewardSnailBlock { beginFruitNumber: \"0x312e\", difficulty: \"0x2934\", endFruitNumber: \"0x3169\", extraData: \"0xd98209008667657472756588676f312e31302e34856c696e7578\", fruitDifficulty: \"0x64\", fruits: [\"0xa632b2a2cb8dbea61af5c4061b506013f262c4fcdae6cfcd4539d4fb8d135295\", \"0x53e280a0f4566a2a9bc12faec2991059ffd993284e1688b563b95845db0d9d49\", \"0x82282660c6b20d778dd1c1667f4fc6bf6c29a38d17a53fc7ba638f4b950e1da8\", \"0xcc30df9962ea9cd0184a1a3a4076198b6936d7c79b3025521fc0b787808b9a69\", \"0xba1645a82012600e80f3d396da15826152e45c23b25386ac9c828855ef879fc8\", \"0x5ad1f91b6b40a386f2a06d6478c60395c70f484947de0491f4bd7c0e717472da\", \"0xb93179ddf6004f7f4a7a1a97e278a4c29170f3bb07cf7b41163f16b33d634898\", \"0xfbbf8ee6385b4102edfa8a539b91c83e7be2c0aa9a1487e465c6c20fe081d94b\", \"0x2bea7825294cdebf9b593bb9271d6d4c051111f470b7719f0b23f8d75ee450a8\", \"0x6123b3a6685f0e92f32d05ee437ed0df2f6a3e79a6af43964495c67e8d1f0dd3\", \"0xaeb33d2c1eca870093bb9f1f99e67c13411fdddaa598ca12ad1ede94c50ed2ad\", \"0x1df10f96d711eb500d9a2c5377ca5dbf2dbbe16df9f3faac12159e83a4b53847\", \"0xbbbf861be37e70d07eec9376d30db13c1704d2517d5cc312fe66b0027a27b65e\", \"0xf8ba7c14737c7bee419614ad7e2c9bb1ede9efe3cbe6f158d88cc8599c5d7a0b\", \"0x5258d8a47c1bea863b31cca6b3862da2e57fb752868358837a28fb32fb5c7864\", \"0xc965f1ba667f88a4370f7f40ee9090a1c66a66c2a58136b1e3653521f7892525\", \"0xe936d14ef8688abc507e147de72a65f83347273dce93dd19f3b2d55a1d9abe8f\", \"0xa8d6040922b821164902a6a33196802dc94feabcc3f82fe765c1d88bed96d662\", \"0x30f1f6c414afc24e4ffd1abf7757f583cca31fe187b7184630e8f1ca5dc52f9d\", \"0x4e5225be5985de4b6f7a64173d79277d725d236d0448d4d75076aa3ed6e7fa56\", \"0x7bd8b912b1e4bbc3fd4c73bde1767f5fe14f86c6b3cb041b317f6ce6f06cd542\", \"0xbc77f4d7e1e49f8afc8aa7d596f3d7981b5abe96d4d4a54a7d7a1010244f79b1\", \"0xde7998ff1ad4f9871b730d0e720d00153a2c93914d9a16acdad39765f384891f\", \"0xf91977e68d726fa08ded0407e0b5d590a85e1768261a9f952e236ed225dbcc75\", \"0x81fb25e55f5ccadca129b3b171c31e246aa00fe6bbf296436cfd70fb0e08c1a3\", \"0x6b49f2bc587371714436ce122cc137aaf750f394ca3bcf73659960a7b4f571f1\", \"0xfd13f6b303f6c6e756bd565d3ca42528e0c8de3aaa770775bc9a099361b3dfb6\", \"0x7d5225d125a763a5ae11470025ba9f3b1d68746786ebd384392d0784017be3b9\", \"0xb00a74429a42fdc7e407ff38c3a41f10e93709592cf244b861d8cef850cc8927\", \"0x90832895a34142519811238c7c115ac2f82f3e2bdf320f9a89ea3cc1fa16a8b3\", \"0x093e1df98b9a55add7da1381402adc8658e35e8d883595f3bc569f056af5ce03\", \"0x0c6c129571db51f9eaeec3bda70bcb817ab6d09367c33fb013fb09b8388b2c6a\", \"0x136f55cc75bb589a2abd9cb093c372c6c581ab30c89404f5384418caf6c5fabc\", \"0x6a5b44ad24be50f63e082e3cb64c804450cfd5a9813c5bb86b2daf1596b0db3d\", \"0x74e2f61da5829be385aaf3446e4e29a9d1269742c69885fc9188e84187e07a9e\", \"0x651921c1da81d4b0969796910593323c3b0b60ca816f2a938fb0d7bcb562f596\", \"0xc42a9d609c0bac5b1d91fdca1da86be796902b7be1990bde3a711d720eb0e367\", \"0x0dc661bf73cbd9b83b56a1122d7edb431993b3271e8d6ed17467130ca432816f\", \"0xc88d51e6a04362f45f0b8a550b33a468ae958f2018e143a295b6b867707688d9\", \"0xe0722964ee80138d3d16a7bb13c10b4c472ff6685244b884b6ab906ff38cf6ae\", \"0x9f46ce3f8d225182b09047d0c0f0e01085bbb51fb1bdd194cd0155e7543ceb2b\", \"0x46fc7058e2b154740d0c049e6d9730dad9dd1a45a33ddc9d9ef89ac32bbfe1f4\", \"0xdba7a8c2b4d90c4e2a04c7f500deeacd80670cffab96f4df01574f965a978418\", \"0xdc72664ddf9fd72554ea3a23bc2ec5c84a9d893a6cec0488ab9a138c30bc3e46\", \"0x5cdd96b3ea923246887057ededac7e5fd443b7acab2e4969195d6b2b206c80d4\", \"0xf8b785b944cf4d2ec01b553a9fe6c2821565496aec04601a11e5dbed47eeae6a\", \"0x788b53e9fb263765c91b539085d15a125649275d82ca5a7f9763039c473492e9\", \"0x1409fa39b9c5cb2275c53c13caf63551fdb42dfb37016d60459dd119ecbeecd2\", \"0x84542b65c9e5280f60bac640ce90807abae1a1fcaa66452c6d65035ac73eaf10\", \"0x4e0b52178228ed76ebeddb207ad8b736a36ae18c04bf2c9bf4658aba7b2e58a6\", \"0x6b7f21f8f28b99df7019ccf3713d948bd7ad0c333682fe3218cd8040d3f4c6b7\", \"0x416e7a921069bcd44aa1c9e1e71908ea84b455ba4fe3a780e54ae3d5d9bb75d6\", \"0x47dabc583d57ad3a76c6f92fcda8ef339809ba3dbb0d8abeff559bf80eaec92a\", \"0x243db458d30bbf33f8bb363b86373523a53bf6020609c753a88018cbff2cab57\", \"0xb6c52f12fc0f6d2505e425a7e0800d19ef2bb364f34024a5c3bd004ea37bbe2b\", \"0xd325781116caef391b51c25b360e8b3d6555277655ed26d9ab7767250304ce54\", \"0xda3eddfaeda14df7e4b764981aef139e7a89250d24a6bec2451db1615a65678e\", \"0x160259fc30aabae838bd1ef16f8901caeea8cea856ec60d18b340429d75e02a8\", \"0x27a87a5f3728a7b96efbc8c4ccbcdd9238b8b35ecdc85f171dcde05f1a244324\", \"0x21fba42ad5a1f5a45dadb70086485f1c97289d7dc8de49eebf490f53ff230dd7\"], hash: \"0xf81745232836e516bc1b4f6297ea39739b8335d8ac34503cf6378b0d9dcd3426\", miner: \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", mixHash: \"0x000046d43e8286cf44b3c3e07c810646dc04c210268800a7ce005218663bf35b\", nonce: \"0x78b361ba385128ed\", number: \"0xd1\", parentHash: \"0x530de9d24cb1c49faac6f70ad6e52119026e6ad5af397895a27e7e68ca302b76\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", size: \"0xe3bf\", timestamp: \"0x5be95387\", uncles: [] }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_snailblocknumber","text":"SnailBlockNumber returns the block number of the snailchain head. Client Method invocation Console tai.snailBlockNumber RPC {\"method\": \"tai_snailBlockNumber\", \"params\": []}","title":"tai_snailBlockNumber"},{"location":"source/taiyuepublic/Management-API/#example_50","text":"> tai.snailBlockNumber 7512","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getcommittee","text":"Returns information about the specified session of the committee Client Method invocation Console tai.getCommittee(number) RPC {\"method\": \"tai_getCommittee\", \"params\": [number]}","title":"tai_getCommittee"},{"location":"source/taiyuepublic/Management-API/#example_51","text":"> tai.getCommittee(41) { beginNumber: 475537, beginSnailNumber: 7189, endSnailNumber: 7368, id: 41, memberCount: 4, members: [{ PKey: \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", coinbase: \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\" }, { PKey: \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", coinbase: \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\" }, { PKey: \"04b82f569c74364daf1767b251608950ac49c83256f5dcde771255919c8c8489da550a5c24dcfc8a735b335dff5715ca424672c81bb10e5a55ddac5204f38ab94c\", coinbase: \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\" }, { PKey: \"0490bc06f4e4e5af179ea599b0793282070b9abd023a283cdda9b4edf3e596996f32843d37dcb1c3ee3dfebfe05d03dc13cfa19abe7b88a259619ea233d63778f8\", coinbase: \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\" }] }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getcurrentstate","text":"Returns the current membership of the committee Client Method invocation Console tai.getCurrentState() RPC {\"method\": \"tai_getCurrentState\", \"params\": [number]}","title":"tai_getCurrentState"},{"location":"source/taiyuepublic/Management-API/#example_52","text":"> tai.getCurrentState() null","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getfruit","text":"Returns the specified fruit information Client Method invocation Console tai.getFruit(number) RPC {\"method\": \"tai_getFruit\", \"params\": [number]}","title":"tai_getFruit"},{"location":"source/taiyuepublic/Management-API/#example_53","text":"> tai.getFruit(6) { difficulty: \"0x4e20\", extraData: \"0xd98209008667657472756588676f312e31302e34856c696e7578\", fastHash: \"0x8597125fd0f47fa439120ebe74b4c351f5b7c5cc6a1caafdb4c00c8b75454941\", fastNumber: 6, fruitDifficulty: \"0x64\", hash: \"0x2634dd54c2e3a391b986ab8966373d1fe5b9d808244d52e141cf26124d9a2714\", miner: \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", mixHash: \"0x1819250f9a0c71736da23f43c7f25fbd0087bd375bdc83d4dc8a7343e23d2586\", nonce: \"0x049e8f65e6e153ff\", number: \"0x1\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", signs: 3, size: \"0x3b7\", timestamp: \"0x5be53627\" }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getrewardblock","text":"GetRewardBlock return the fast block position where the given snail block is rewarded. Client Method invocation Console tai.getRewardBlock(number) RPC {\"method\": \"tai_getRewardBlock\", \"params\": [number]}","title":"tai_getRewardBlock"},{"location":"source/taiyuepublic/Management-API/#example_54","text":"> tai.getRewardBlock(11)","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_getsnail","text":"Returns the requested snail block. When blockNr is -1 the chain head is returned. Client Method invocation Console tai.getSnail(number) RPC {\"method\": \"tai_getSnail\", \"params\": [number]}","title":"tai_getSnail"},{"location":"source/taiyuepublic/Management-API/#example_55","text":"> tai.getSnail(1) tai.getSnail(1) { beginFruitNumber: 1, difficulty: 256, endFruitNumber: 60, extraData: \"0xda8209018667657472756588676f312e31302e338664617277696e\", fruitDifficulty: 50, fruits: 60, hash: \"0xb0c1cd521377ba71784573af8b50192c0319fada9d5d381109ea2467c1e2c6c0\", miner: \"0xbe7e39fa0645f6eaf501ad02318a7fda5c4df6c6\", mixHash: \"0x00974c04ddfe45ae0519128a5926d478ee16d2556af6013b61b3c2723c8c0b94\", nonce: \"0x7b2d50ad27c3ec29\", number: 1, parentHash: \"0x5b445e49ca5b67eeca43a46420d6400a9ba90a3a3520927114d7d734683fa0e2\", sha3Uncles: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", size: 45220, timestamp: 1544164238, uncles: [] }","title":"Example"},{"location":"source/taiyuepublic/Management-API/#tai_snailblocknumber_1","text":"SnailBlockNumber returns the block number of the snailchain head. Client Method invocation Console tai.snailBlockNumber RPC {\"method\": \"tai_snailBlockNumber\", \"params\": []}","title":"tai_snailBlockNumber"},{"location":"source/taiyuepublic/Management-API/#example_56","text":"> tai.snailBlockNumber 227","title":"Example"},{"location":"source/taiyuepublic/Managing-your-accounts/","text":"WARNING Remember your password. If you lose the password you use to encrypt your account, you will not be able to access that account. Repeat: It is NOT possible to access your account without a password and there is no forgot my password option here. Do not forget it. The truechain CLI taipublic provides account management via the account command: $ taipublic account <command> [options...] [arguments...] Manage accounts lets you create new accounts, list all existing accounts, import a private key into a new account, migrate to newest key format and change your password. It supports interactive mode, when you are prompted for password as well as non-interactive mode where passwords are supplied via a given password file. Non-interactive mode is only meant for scripted use on test networks or known safe environments. Make sure you remember the password you gave when creating a new account (with new, update or import). Without it you are not able to unlock your account. Note that exporting your key in unencrypted format is NOT supported. Keys are stored under <DATADIR>/keystore . Make sure you backup your keys regularly! See DATADIR backup & restore for more information. If a custom datadir and keystore option are given the keystore option takes preference over the datadir option. The newest format of the keyfiles is: UTC--<created_at UTC ISO8601>-<address hex> . The order of accounts when listing, is lexicographic, but as a consequence of the timespamp format, it is actually order of creation It is safe to transfer the entire directory or the individual keys therein between truechain nodes. Note that in case you are adding keys to your node from a different node, the order of accounts may change. So make sure you do not rely or change the index in your scripts or code snippets. And again. DO NOT FORGET YOUR PASSWORD COMMANDS: list Print summary of existing accounts new Create a new account update Update an existing account import Import a private key into a new account You can get info about subcommands by taipublic account <command> --help . $ taipublic account list --help list [command options] [arguments...] Print a short summary of all accounts OPTIONS: --datadir \"/home/bas/.truechain\" Data directory for the databases and keystore --keystore Directory for the keystore (default = inside the datadir) Examples Interactive use creating an account $ taipublic account new Your new account is locked with a password. Please give a password. Do not forget this password. Passphrase: Repeat Passphrase: Address: {168bc315a2ee09042d83d7c5811b533620531f67} Listing accounts in a custom keystore directory $ taipublic account list --keystore /tmp/mykeystore/ Account #0: {5afdd78bdacb56ab1dad28741ea2a0e47fe41331} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-27.437847599Z--5afdd78bdacb56ab1dad28741ea2a0e47fe41331 Account #1: {9acb9ff906641a434803efb474c96a837756287f} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-52.180688336Z--9acb9ff906641a434803efb474c96a837756287f Import private key into a node with a custom datadir $ taipublic account import --datadir /someOtherEthDataDir ./key.prv The new account will be encrypted with a passphrase. Please enter a passphrase now. Passphrase: Repeat Passphrase: Address: {7f444580bfef4b9bc7e14eb7fb2a029336b07c9d} Account update $ taipublic account update a94f5374fce5edbc8e2a8697c15331677e6ebf0b Unlocking account a94f5374fce5edbc8e2a8697c15331677e6ebf0b | Attempt 1/3 Passphrase: 0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b Account 'a94f5374fce5edbc8e2a8697c15331677e6ebf0b' unlocked. Please give a new password. Do not forget this password. Passphrase: Repeat Passphrase: 0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b Non-interactive use You supply a plaintext password file as argument to the --password flag. The data in the file consists of the raw characters of the password, followed by a single newline. Note : Supplying the password directly as part of the command line is not recommended, but you can always use shell trickery to get round this restriction. $ taipublic account new --password /path/to/password $ taipublic account import --datadir /someOtherEthDataDir --password /path/to/anotherpassword ./key.prv Creating accounts Creating a new account $ taipublic account new $ taipublic account new --password /path/to/passwdfile $ taipublic account new --password <(echo $mypassword) Creates a new account and prints the address. On the console, use: > personal.NewAccount() ... you will be prompted for a password ... or > personal.newAccount(\"passphrase\") The account is saved in encrypted format. You must remember this passphrase to unlock your account in the future. For non-interactive use the passphrase can be specified with the --password flag: taipublic account new --password <passwordfile> Note, this is meant to be used for testing only, it is a bad idea to save your password to file or expose in any other way. Creating an account by importing a private key taipublic account import <keyfile> Imports an unencrypted private key from <keyfile> and creates a new account and prints the address. The keyfile is assumed to contain an unencrypted private key as canonical EC raw bytes encoded into hex. The account is saved in encrypted format, you are prompted for a passphrase. You must remember this passphrase to unlock your account in the future. For non-interactive use the passphrase can be specified with the --password flag: taipublic account import --password <passwordfile> <keyfile> Note : Since you can directly copy your encrypted accounts to another truechain instance, this import/export mechanism is not needed when you transfer an account between nodes. Warning: when you copy keys into an existing node's keystore, the order of accounts you are used to may change. Therefore you make sure you either do not rely on the account order or doublecheck and update the indexes used in your scripts. Warning: If you use the password flag with a password file, best to make sure the file is not readable or even listable for anyone but you. You achieve this with: touch /path/to/password chmod 700 /path/to/password cat > /path/to/password >I type my pass here^D Updating an existing account You can update an existing account on the command line with the update subcommand with the account address or index as parameter. You can specify multiple accounts at once. taipublic account update 5afdd78bdacb56ab1dad28741ea2a0e47fe41331 9acb9ff906641a434803efb474c96a837756287f taipublic account update 0 1 2 The account is saved in the newest version in encrypted format, you are prompted for a passphrase to unlock the account and another to save the updated file. This same command can therefore be used to migrate an account of a deprecated format to the newest format or change the password for an account. After a successful update, all previous formats/versions of that same key are removed! Importing your presale wallet Importing your presale wallet is very easy. If you remember your password that is: taipublic wallet import /path/to/my/presale.wallet will prompt for your password and imports your tai presale account. It can be used non-interactively with the --password option taking a passwordfile as argument containing the wallet password in cleartext. Listing accounts and checking balances Listing your current accounts From the command line, call the CLI with: $ taipublic account list Account #0: {5afdd78bdacb56ab1dad28741ea2a0e47fe41331} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-27.437847599Z--5afdd78bdacb56ab1dad28741ea2a0e47fe41331 Account #1: {9acb9ff906641a434803efb474c96a837756287f} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-52.180688336Z--9acb9ff906641a434803efb474c96a837756287f to list your accounts in order of creation. Note : This order can change if you copy keyfiles from other nodes, so make sure you either do not rely on indexes or make sure if you copy keys you check and update your account indexes in your scripts. When using the console: > tai.accounts [\"0x5afdd78bdacb56ab1dad28741ea2a0e47fe41331\", \"0x9acb9ff906641a434803efb474c96a837756287f\"] or via RPC: # Request $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_accounts\",\"params\":[],\"id\":1} http://127.0.0.1:8545' # Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0x5afdd78bdacb56ab1dad28741ea2a0e47fe41331\", \"0x9acb9ff906641a434803efb474c96a837756287f\"] } If you want to use an account non-interactively, you need to unlock it. You can do this on the command line with the --unlock option which takes a comma separated list of accounts (in hex or index) as argument so you can unlock the accounts programmatically for one session. This is useful if you want to use your account from Dapps via RPC. --unlock will unlock the first account. This is useful when you created your account programmatically, you do not need to know the actual account to unlock it. Create account and start node with account unlocked: taipublic account new --password <(echo this is not secret!) taipublic --password <(echo this is not secret!) --unlock primary --rpccorsdomain localhost --verbosity 6 2>> taipublic.log Instead of the account address, you can use integer indexes which refers to the address position in the account listing (and corresponds to order of creation) The command line allows you to unlock multiple accounts. In this case the argument to unlock is a comma delimited list of accounts addresses or indexes. taipublic --unlock \"0x407d73d8a49eeb85d32cf465507dd71d507100c1,0,5,e470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32\" If this construction is used non-interactively, your password file will need to contain the respective passwords for the accounts in question, one per line. On the console you can also unlock accounts (one at a time) for a duration (in seconds). personal.unlockAccount(address, \"password\", 300) Note that we do NOT recommend using the password argument here, since the console history is logged, so you may compromise your account. You have been warned. Checking account balances To check your the coinbase account balance: > web3.fromWei(tai.getBalance(tai.coinbase), \"true\") 6.5 Print all balances with a JavaScript function: function checkAllBalances() { var totalBal = 0; for (var acctNum in tai.accounts) { var acct = tai.accounts[acctNum]; var acctBal = web3.fromWei(tai.getBalance(acct), \"true\"); totalBal += parseFloat(acctBal); console.log(\" tai.accounts[\" + acctNum + \"]: \\t\" + acct + \" \\tbalance: \" + acctBal + \" true\"); } console.log(\" Total balance: \" + totalBal + \" true\"); }; That can then be executed with: > checkAllBalances(); tai.accounts[0]: 0xd1ade25ccd3d550a7eb532ac759cac7be09c2719 balance: 63.11848 true tai.accounts[1]: 0xda65665fc30803cb1fb7e6d86691e20b1826dee0 balance: 0 true tai.accounts[2]: 0xe470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32 balance: 1 true tai.accounts[3]: 0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99 balance: 6 true","title":"Managing your accounts"},{"location":"source/taiyuepublic/Managing-your-accounts/#examples","text":"","title":"Examples"},{"location":"source/taiyuepublic/Managing-your-accounts/#interactive-use","text":"","title":"Interactive use"},{"location":"source/taiyuepublic/Managing-your-accounts/#creating-an-account","text":"$ taipublic account new Your new account is locked with a password. Please give a password. Do not forget this password. Passphrase: Repeat Passphrase: Address: {168bc315a2ee09042d83d7c5811b533620531f67}","title":"creating an account"},{"location":"source/taiyuepublic/Managing-your-accounts/#listing-accounts-in-a-custom-keystore-directory","text":"$ taipublic account list --keystore /tmp/mykeystore/ Account #0: {5afdd78bdacb56ab1dad28741ea2a0e47fe41331} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-27.437847599Z--5afdd78bdacb56ab1dad28741ea2a0e47fe41331 Account #1: {9acb9ff906641a434803efb474c96a837756287f} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-52.180688336Z--9acb9ff906641a434803efb474c96a837756287f","title":"Listing accounts in a custom keystore directory"},{"location":"source/taiyuepublic/Managing-your-accounts/#import-private-key-into-a-node-with-a-custom-datadir","text":"$ taipublic account import --datadir /someOtherEthDataDir ./key.prv The new account will be encrypted with a passphrase. Please enter a passphrase now. Passphrase: Repeat Passphrase: Address: {7f444580bfef4b9bc7e14eb7fb2a029336b07c9d}","title":"Import private key into a node with a custom datadir"},{"location":"source/taiyuepublic/Managing-your-accounts/#account-update","text":"$ taipublic account update a94f5374fce5edbc8e2a8697c15331677e6ebf0b Unlocking account a94f5374fce5edbc8e2a8697c15331677e6ebf0b | Attempt 1/3 Passphrase: 0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b Account 'a94f5374fce5edbc8e2a8697c15331677e6ebf0b' unlocked. Please give a new password. Do not forget this password. Passphrase: Repeat Passphrase: 0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b","title":"Account update"},{"location":"source/taiyuepublic/Managing-your-accounts/#non-interactive-use","text":"You supply a plaintext password file as argument to the --password flag. The data in the file consists of the raw characters of the password, followed by a single newline. Note : Supplying the password directly as part of the command line is not recommended, but you can always use shell trickery to get round this restriction. $ taipublic account new --password /path/to/password $ taipublic account import --datadir /someOtherEthDataDir --password /path/to/anotherpassword ./key.prv","title":"Non-interactive use"},{"location":"source/taiyuepublic/Managing-your-accounts/#creating-accounts","text":"","title":"Creating accounts"},{"location":"source/taiyuepublic/Managing-your-accounts/#creating-a-new-account","text":"$ taipublic account new $ taipublic account new --password /path/to/passwdfile $ taipublic account new --password <(echo $mypassword) Creates a new account and prints the address. On the console, use: > personal.NewAccount() ... you will be prompted for a password ... or > personal.newAccount(\"passphrase\") The account is saved in encrypted format. You must remember this passphrase to unlock your account in the future. For non-interactive use the passphrase can be specified with the --password flag: taipublic account new --password <passwordfile> Note, this is meant to be used for testing only, it is a bad idea to save your password to file or expose in any other way.","title":"Creating a new account"},{"location":"source/taiyuepublic/Managing-your-accounts/#creating-an-account-by-importing-a-private-key","text":"taipublic account import <keyfile> Imports an unencrypted private key from <keyfile> and creates a new account and prints the address. The keyfile is assumed to contain an unencrypted private key as canonical EC raw bytes encoded into hex. The account is saved in encrypted format, you are prompted for a passphrase. You must remember this passphrase to unlock your account in the future. For non-interactive use the passphrase can be specified with the --password flag: taipublic account import --password <passwordfile> <keyfile> Note : Since you can directly copy your encrypted accounts to another truechain instance, this import/export mechanism is not needed when you transfer an account between nodes. Warning: when you copy keys into an existing node's keystore, the order of accounts you are used to may change. Therefore you make sure you either do not rely on the account order or doublecheck and update the indexes used in your scripts. Warning: If you use the password flag with a password file, best to make sure the file is not readable or even listable for anyone but you. You achieve this with: touch /path/to/password chmod 700 /path/to/password cat > /path/to/password >I type my pass here^D","title":"Creating an account by importing a private key"},{"location":"source/taiyuepublic/Managing-your-accounts/#updating-an-existing-account","text":"You can update an existing account on the command line with the update subcommand with the account address or index as parameter. You can specify multiple accounts at once. taipublic account update 5afdd78bdacb56ab1dad28741ea2a0e47fe41331 9acb9ff906641a434803efb474c96a837756287f taipublic account update 0 1 2 The account is saved in the newest version in encrypted format, you are prompted for a passphrase to unlock the account and another to save the updated file. This same command can therefore be used to migrate an account of a deprecated format to the newest format or change the password for an account. After a successful update, all previous formats/versions of that same key are removed!","title":"Updating an existing account"},{"location":"source/taiyuepublic/Managing-your-accounts/#importing-your-presale-wallet","text":"Importing your presale wallet is very easy. If you remember your password that is: taipublic wallet import /path/to/my/presale.wallet will prompt for your password and imports your tai presale account. It can be used non-interactively with the --password option taking a passwordfile as argument containing the wallet password in cleartext.","title":"Importing your presale wallet"},{"location":"source/taiyuepublic/Managing-your-accounts/#listing-accounts-and-checking-balances","text":"","title":"Listing accounts and checking balances"},{"location":"source/taiyuepublic/Managing-your-accounts/#listing-your-current-accounts","text":"From the command line, call the CLI with: $ taipublic account list Account #0: {5afdd78bdacb56ab1dad28741ea2a0e47fe41331} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-27.437847599Z--5afdd78bdacb56ab1dad28741ea2a0e47fe41331 Account #1: {9acb9ff906641a434803efb474c96a837756287f} keystore:///tmp/mykeystore/UTC--2017-04-28T08-46-52.180688336Z--9acb9ff906641a434803efb474c96a837756287f to list your accounts in order of creation. Note : This order can change if you copy keyfiles from other nodes, so make sure you either do not rely on indexes or make sure if you copy keys you check and update your account indexes in your scripts. When using the console: > tai.accounts [\"0x5afdd78bdacb56ab1dad28741ea2a0e47fe41331\", \"0x9acb9ff906641a434803efb474c96a837756287f\"] or via RPC: # Request $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"tai_accounts\",\"params\":[],\"id\":1} http://127.0.0.1:8545' # Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0x5afdd78bdacb56ab1dad28741ea2a0e47fe41331\", \"0x9acb9ff906641a434803efb474c96a837756287f\"] } If you want to use an account non-interactively, you need to unlock it. You can do this on the command line with the --unlock option which takes a comma separated list of accounts (in hex or index) as argument so you can unlock the accounts programmatically for one session. This is useful if you want to use your account from Dapps via RPC. --unlock will unlock the first account. This is useful when you created your account programmatically, you do not need to know the actual account to unlock it. Create account and start node with account unlocked: taipublic account new --password <(echo this is not secret!) taipublic --password <(echo this is not secret!) --unlock primary --rpccorsdomain localhost --verbosity 6 2>> taipublic.log Instead of the account address, you can use integer indexes which refers to the address position in the account listing (and corresponds to order of creation) The command line allows you to unlock multiple accounts. In this case the argument to unlock is a comma delimited list of accounts addresses or indexes. taipublic --unlock \"0x407d73d8a49eeb85d32cf465507dd71d507100c1,0,5,e470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32\" If this construction is used non-interactively, your password file will need to contain the respective passwords for the accounts in question, one per line. On the console you can also unlock accounts (one at a time) for a duration (in seconds). personal.unlockAccount(address, \"password\", 300) Note that we do NOT recommend using the password argument here, since the console history is logged, so you may compromise your account. You have been warned.","title":"Listing your current accounts"},{"location":"source/taiyuepublic/Managing-your-accounts/#checking-account-balances","text":"To check your the coinbase account balance: > web3.fromWei(tai.getBalance(tai.coinbase), \"true\") 6.5 Print all balances with a JavaScript function: function checkAllBalances() { var totalBal = 0; for (var acctNum in tai.accounts) { var acct = tai.accounts[acctNum]; var acctBal = web3.fromWei(tai.getBalance(acct), \"true\"); totalBal += parseFloat(acctBal); console.log(\" tai.accounts[\" + acctNum + \"]: \\t\" + acct + \" \\tbalance: \" + acctBal + \" true\"); } console.log(\" Total balance: \" + totalBal + \" true\"); }; That can then be executed with: > checkAllBalances(); tai.accounts[0]: 0xd1ade25ccd3d550a7eb532ac759cac7be09c2719 balance: 63.11848 true tai.accounts[1]: 0xda65665fc30803cb1fb7e6d86691e20b1826dee0 balance: 0 true tai.accounts[2]: 0xe470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32 balance: 1 true tai.accounts[3]: 0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99 balance: 6 true","title":"Checking account balances"},{"location":"source/taiyuepublic/Mining/","text":"CPU Mining with taipublic CPU_Mining To mine at truechain, you'll just need truechain client, Getrue. NOTE: Ensure your blockchain is fully synchronised with the main chain before starting to mine, otherwise you will not be mining on the main chain. When you start up your taipublicchain node with getrue it is not mining by default. To start it in mining mode, you use the --mine command line option . The -minerthreads parameter can be used to set the number parallel mining threads (defaulting to the total number of processor cores). taipublic --mine --minerthreads=4 only mine fruit taipublic --minefruit --minerthreads=4 You can also start and stop CPU mining at runtime using the console. miner.start takes an optional parameter for the number of miner threads. > miner.start(8) null > miner.stop() true or > miner.startFruit(8) null > miner.stop() true Note that mining for real TRUE only makes sense if you are in sync with the network (since you mine on top of the consensus block). Therefore the truechain downloader/synchroniser will delay mining until syncing is complete, and after that mining automatically starts unless you cancel your intention with miner.stop() . In order to earn TRUE you must have your coinbase address set. This coinbase defaults to your primary account . If you don't have an coinbase address, then Getrue --mine or Getrue --minefruit will not start up. You can set your coinbase on the command line: taipublic --coinbase '0xa4d8e9cae4d04b093aac82e6cd355b6b963fb7ff' --mine 2>> getrue.log or taipublic --coinbase '0xa4d8e9cae4d04b093aac82e6cd355b6b963fb7ff' --minefruit 2>> getrue.log You can reset your coinbase on the console too: miner.setCoinbase(etrue.accounts[2]) Note that your coinbase does not need to be an address of a local account, just an existing one. There is an option to add extra Data (32 bytes only) to your mined blocks. By convention this is interpreted as a unicode string, so you can set your short vanity tag. miner.setExtra(\"trueminer\") ... debug.printBlock(131805) BLOCK(be465b020fdbedc4063756f0912b5a89bbb4735bd1d1df84363e05ade0195cb1): Size: 531.00 B TD: 643485290485 { NoNonce: ee48752c3a0bfe3d85339451a5f3f411c21c8170353e450985e1faab0a9ac4cc Header: [ ... Miner: a4d8e9cae4d04b093aac82e6cd355b6b963fb7ff Number: 131805 Extra: trueminer ... } You can check your hashrate with miner.getHashRate(), the result is in H/s (Hash operations per second). > miner.getHashRate() 30 After you successfully mined some blocks, you can check the true balance of your coinbase account. Now assuming your coinbase is a local account: > tai.getBalance(etrue.coinbase).toNumber(); '34698870000000' In order to spend your earnings you will need to have this account unlocked. > personal.unlockAccount(etrue.coinbase) Password true You can check which blocks are mined by a particular miner (address) with the following code snippet on the console: function minedBlocks(lastn, addr) { addrs = []; if (!addr) { addr = etrue.coinbase } limit = etrue.blockNumber - lastn for (i = etrue.blockNumber; i >= limit; i--) { if (etrue.getBlock(i).miner == addr) { addrs.push(i) } } return addrs } // scans the last 1000 blocks and returns the blocknumbers of blocks mined by your coinbase // (more precisely blocks the mining reward for which is sent to your coinbase). minedBlocks(1000, etrue.coinbase); //[352708, 352655, 352559] Note that it will happen often that you find a block yet it never makes it to the canonical chain. This means when you locally include your mined block, the current state will show the mining reward credited to your account, however, after a while, the better chain is discovered and we switch to a chain in which your block is not included and therefore no mining reward is credited. Therefore it is quite possible that as a miner monitoring their coinbase balance will find that it may fluctuate quite a bit. Mining success depends on the set block difficulty. Block difficulty dynamically adjusts each block in order to regulate the network hashing power to produce a 10 minute blocktime. Your chances of finding a block therefore follows from your hashrate relative to difficulty. The time you need to wait you are expected to find a block can be estimated with the following code: INCORRECT...CHECKING etrue = etrue.getBlock(\"latest\").difficulty/miner.getHashRate(); // estimated time in seconds Math.floor(etrue / 3600.) + \"h \" + Math.floor((etrue % 3600)/60) + \"m \" + Math.floor(etrue % 60) + \"s\"; // 1h 3m 30s GPU mining Hardware The GPU miner is implemented in OpenCL\uff0cto get openCL for your chipset and platform, try: * AMD SDK openCL * NVIDIA CUDA openCL On Ubuntu NVIDIA add-apt-repository ppa:graphics-drivers/ppa apt-get install nvidia-418 nvidia-418-dev nvidia-opencl-dev nvidia-opencl-icd-418 Mining Software The official release of getrue only supports a CPU miner natively. We are working on a GPU miner , Getrue however can be used in conjunction with trueminer , using the standalone miner as workers and getrue as scheduler communicating via JSON-RPC . Trueminer 0n Linux: git clone https://github.com/taipublicchain/taiminer.git GPU mining with trueminer To miner with getrue : wget https://github.com/taiyuechain/taipublicchain/releases/download/v1.0.2/taipublic-linux-amd64-1.0.2-758c849.tar.gz tar -zxvf getrue-linux-amd64-1.0.2-758c849.tar.gz the detail 'getrue' you can reference CPU_mine To install and build GPU taiminer from source: cd trueminer mkdir build cd build cmake .. cmake -budid . make install To install and build CPU taiminer from source: cd taiminer mkdir build cd build cmake .. -DETHASHCL=OFF -DBINKERN=OFF -DETHASHCUDA=OFF -DAPICORE=ON -DETHASHCPU=ON cmake -budid . make install The detail taiminer install trueminer readme.md To set up GPU mining you need a coinbase account. It can be an account created locally or remotely. Using taiminer with taipublic on solo mode start taipublic to support remote mining ./taipublic --datadir ./data --config ./data/config --rpc --rpcaddr 0.0.0.0 --rpcapi \"etrue,:net,web3,miner\" --mine --remote --coinbase <coinbase> console taipublic will listen all ip address when giving --rpcaddr 0.0.0.0 , you can give the exact ip address that want miner to connect, or --rpcaddr 127.0.01 only allow the miner running on the host to connect getrue . taiminer communicates with taipublic on port 8545 . You also can change port by giving the rpcport option to taipublic . taiminer will find taipublic on any port. Note that you need to set the param with hostname:port to connect the taipublic . Also note that you do have need to give taipublic the --mine option to start the miner , and also need use --remote to support remote getwork . taiminer solo mode using CPU taiminer --cpu -P http://hostname:port taiminer solo mode using GPU taiminer -G -P http://hostname:port Use taiminer -H get taiminer a full list of available commands. If the default command taiminer does not work, try to specify the OpenCL device with: --opencl-device X where X is 0, 1, 2, etc. When running taiminer with -M (benchmark), you should see something like: Benchmarking on platform: { \"platform\": \"NVIDIA CUDA\", \"device\": \"GeForce GTX 750 Ti\", \"version\": \"OpenCL 1.1 CUDA\" } Benchmarking on platform: { \"platform\": \"Apple\", \"device\": \"Intel(R) Xeon(R) CPU E5-1620 v2 @ 3.70GHz\", \"version\": \"OpenCL 1.2 \" } Using taiminer with getrue on stratum mode taiminer stratum mode using CPU taiminer --cpu -P stratum+tcp://WALLET.WORKER@hostname:port taiminer stratum mode using GPU taiminer -G -P stratum+tcp://WALLET.WORKER@hostname:port taiminer use stratum protocl to connect the mining pool , the hostname:port is pool hostname and port Note hashrate info is not available in taipublic ,you have use taiminer need add params -R .","title":"CPU Mining with taipublic"},{"location":"source/taiyuepublic/Mining/#cpu-mining-with-taipublic","text":"","title":"CPU Mining with taipublic"},{"location":"source/taiyuepublic/Mining/#cpu_mining","text":"To mine at truechain, you'll just need truechain client, Getrue. NOTE: Ensure your blockchain is fully synchronised with the main chain before starting to mine, otherwise you will not be mining on the main chain. When you start up your taipublicchain node with getrue it is not mining by default. To start it in mining mode, you use the --mine command line option . The -minerthreads parameter can be used to set the number parallel mining threads (defaulting to the total number of processor cores). taipublic --mine --minerthreads=4 only mine fruit taipublic --minefruit --minerthreads=4 You can also start and stop CPU mining at runtime using the console. miner.start takes an optional parameter for the number of miner threads. > miner.start(8) null > miner.stop() true or > miner.startFruit(8) null > miner.stop() true Note that mining for real TRUE only makes sense if you are in sync with the network (since you mine on top of the consensus block). Therefore the truechain downloader/synchroniser will delay mining until syncing is complete, and after that mining automatically starts unless you cancel your intention with miner.stop() . In order to earn TRUE you must have your coinbase address set. This coinbase defaults to your primary account . If you don't have an coinbase address, then Getrue --mine or Getrue --minefruit will not start up. You can set your coinbase on the command line: taipublic --coinbase '0xa4d8e9cae4d04b093aac82e6cd355b6b963fb7ff' --mine 2>> getrue.log or taipublic --coinbase '0xa4d8e9cae4d04b093aac82e6cd355b6b963fb7ff' --minefruit 2>> getrue.log You can reset your coinbase on the console too: miner.setCoinbase(etrue.accounts[2]) Note that your coinbase does not need to be an address of a local account, just an existing one. There is an option to add extra Data (32 bytes only) to your mined blocks. By convention this is interpreted as a unicode string, so you can set your short vanity tag. miner.setExtra(\"trueminer\") ... debug.printBlock(131805) BLOCK(be465b020fdbedc4063756f0912b5a89bbb4735bd1d1df84363e05ade0195cb1): Size: 531.00 B TD: 643485290485 { NoNonce: ee48752c3a0bfe3d85339451a5f3f411c21c8170353e450985e1faab0a9ac4cc Header: [ ... Miner: a4d8e9cae4d04b093aac82e6cd355b6b963fb7ff Number: 131805 Extra: trueminer ... } You can check your hashrate with miner.getHashRate(), the result is in H/s (Hash operations per second). > miner.getHashRate() 30 After you successfully mined some blocks, you can check the true balance of your coinbase account. Now assuming your coinbase is a local account: > tai.getBalance(etrue.coinbase).toNumber(); '34698870000000' In order to spend your earnings you will need to have this account unlocked. > personal.unlockAccount(etrue.coinbase) Password true You can check which blocks are mined by a particular miner (address) with the following code snippet on the console: function minedBlocks(lastn, addr) { addrs = []; if (!addr) { addr = etrue.coinbase } limit = etrue.blockNumber - lastn for (i = etrue.blockNumber; i >= limit; i--) { if (etrue.getBlock(i).miner == addr) { addrs.push(i) } } return addrs } // scans the last 1000 blocks and returns the blocknumbers of blocks mined by your coinbase // (more precisely blocks the mining reward for which is sent to your coinbase). minedBlocks(1000, etrue.coinbase); //[352708, 352655, 352559] Note that it will happen often that you find a block yet it never makes it to the canonical chain. This means when you locally include your mined block, the current state will show the mining reward credited to your account, however, after a while, the better chain is discovered and we switch to a chain in which your block is not included and therefore no mining reward is credited. Therefore it is quite possible that as a miner monitoring their coinbase balance will find that it may fluctuate quite a bit. Mining success depends on the set block difficulty. Block difficulty dynamically adjusts each block in order to regulate the network hashing power to produce a 10 minute blocktime. Your chances of finding a block therefore follows from your hashrate relative to difficulty. The time you need to wait you are expected to find a block can be estimated with the following code: INCORRECT...CHECKING etrue = etrue.getBlock(\"latest\").difficulty/miner.getHashRate(); // estimated time in seconds Math.floor(etrue / 3600.) + \"h \" + Math.floor((etrue % 3600)/60) + \"m \" + Math.floor(etrue % 60) + \"s\"; // 1h 3m 30s","title":"CPU_Mining"},{"location":"source/taiyuepublic/Mining/#gpu-mining","text":"","title":"GPU mining"},{"location":"source/taiyuepublic/Mining/#hardware","text":"The GPU miner is implemented in OpenCL\uff0cto get openCL for your chipset and platform, try: * AMD SDK openCL * NVIDIA CUDA openCL","title":"Hardware"},{"location":"source/taiyuepublic/Mining/#on-ubuntu","text":"","title":"On Ubuntu"},{"location":"source/taiyuepublic/Mining/#nvidia","text":"add-apt-repository ppa:graphics-drivers/ppa apt-get install nvidia-418 nvidia-418-dev nvidia-opencl-dev nvidia-opencl-icd-418","title":"NVIDIA"},{"location":"source/taiyuepublic/Mining/#mining-software","text":"The official release of getrue only supports a CPU miner natively. We are working on a GPU miner , Getrue however can be used in conjunction with trueminer , using the standalone miner as workers and getrue as scheduler communicating via JSON-RPC . Trueminer 0n Linux: git clone https://github.com/taipublicchain/taiminer.git","title":"Mining  Software"},{"location":"source/taiyuepublic/Mining/#gpu-mining-with-trueminer","text":"To miner with getrue : wget https://github.com/taiyuechain/taipublicchain/releases/download/v1.0.2/taipublic-linux-amd64-1.0.2-758c849.tar.gz tar -zxvf getrue-linux-amd64-1.0.2-758c849.tar.gz the detail 'getrue' you can reference CPU_mine To install and build GPU taiminer from source: cd trueminer mkdir build cd build cmake .. cmake -budid . make install To install and build CPU taiminer from source: cd taiminer mkdir build cd build cmake .. -DETHASHCL=OFF -DBINKERN=OFF -DETHASHCUDA=OFF -DAPICORE=ON -DETHASHCPU=ON cmake -budid . make install The detail taiminer install trueminer readme.md To set up GPU mining you need a coinbase account. It can be an account created locally or remotely.","title":"GPU mining with trueminer"},{"location":"source/taiyuepublic/Mining/#using-taiminer-with-taipublic-on-solo-mode","text":"start taipublic to support remote mining ./taipublic --datadir ./data --config ./data/config --rpc --rpcaddr 0.0.0.0 --rpcapi \"etrue,:net,web3,miner\" --mine --remote --coinbase <coinbase> console taipublic will listen all ip address when giving --rpcaddr 0.0.0.0 , you can give the exact ip address that want miner to connect, or --rpcaddr 127.0.01 only allow the miner running on the host to connect getrue . taiminer communicates with taipublic on port 8545 . You also can change port by giving the rpcport option to taipublic . taiminer will find taipublic on any port. Note that you need to set the param with hostname:port to connect the taipublic . Also note that you do have need to give taipublic the --mine option to start the miner , and also need use --remote to support remote getwork . taiminer solo mode using CPU taiminer --cpu -P http://hostname:port taiminer solo mode using GPU taiminer -G -P http://hostname:port Use taiminer -H get taiminer a full list of available commands. If the default command taiminer does not work, try to specify the OpenCL device with: --opencl-device X where X is 0, 1, 2, etc. When running taiminer with -M (benchmark), you should see something like: Benchmarking on platform: { \"platform\": \"NVIDIA CUDA\", \"device\": \"GeForce GTX 750 Ti\", \"version\": \"OpenCL 1.1 CUDA\" } Benchmarking on platform: { \"platform\": \"Apple\", \"device\": \"Intel(R) Xeon(R) CPU E5-1620 v2 @ 3.70GHz\", \"version\": \"OpenCL 1.2 \" }","title":"Using taiminer with taipublic  on solo mode"},{"location":"source/taiyuepublic/Mining/#using-taiminer-with-getrue-on-stratum-mode","text":"taiminer stratum mode using CPU taiminer --cpu -P stratum+tcp://WALLET.WORKER@hostname:port taiminer stratum mode using GPU taiminer -G -P stratum+tcp://WALLET.WORKER@hostname:port taiminer use stratum protocl to connect the mining pool , the hostname:port is pool hostname and port Note hashrate info is not available in taipublic ,you have use taiminer need add params -R .","title":"Using taiminer with getrue on stratum mode"},{"location":"source/taiyuepublic/RPC-API/","text":"Contents - JSON RPC API - JavaScript API - JSON-RPC Endpoint - Go - JSON-RPC support - The default block parameter - Curl Examples Explained - JSON-RPC methods - JSON RPC API Reference - web3_clientVersion - Parameters - Returns - Example - web3_sha3 - Parameters - Returns - Example - net_version - Parameters - Returns - Example - net_listening - Parameters - Returns - Example - net_peerCount - Parameters - Returns - Example - etrue_protocolVersion - Parameters - Returns - Example - etrue_syncing - Parameters - Returns - Example - etrue_coinbase - Parameters - Returns - Example - etrue_mining - Parameters - Returns - Example - etrue_hashrate - Parameters - Returns - Example - etrue_gasPrice - Parameters - Returns - Example - etrue_accounts - Parameters - Returns - Example - etrue_blockNumber - Parameters - Returns - Example - etrue_getBalance - Parameters - Returns - Example - etrue_getStorageAt - Parameters - Returns - Example - etrue_getTransactionCount - Parameters - Returns - Example - etrue_getBlockTransactionCountByHash - Parameters - Returns - Example - etrue_getBlockTransactionCountByNumber - Parameters - Returns - Example - etrue_getCode - Parameters - Returns - Example - etrue_sign - Parameters - Returns - Example - etrue_sendTransaction - Parameters - Returns - Example - etrue_sendRawTransaction - Parameters - Returns - Example - etrue_call - Parameters - Returns - Example - etrue_estimateGas - Parameters - Returns - Example - etrue_getBlockByHash - Parameters - Returns - Example - etrue_getBlockByNumber - Parameters - Returns - Example - etrue_getTransactionByHash - Parameters - Returns - Example - etrue_getTransactionByBlockHashAndIndex - Parameters - Returns - Example - etrue_getTransactionByBlockNumberAndIndex - Parameters - Returns - Example - etrue_getTransactionReceipt - Parameters - Returns - Example - etrue_newFilter - A note on specifying topic filters: - Parameters - Returns - Example - etrue_newBlockFilter - Parameters - Returns - Example - etrue_newPendingTransactionFilter - Parameters - Returns - Example - etrue_uninstallFilter - Parameters - Returns - Example - etrue_getFilterChanges - Parameters - Returns - Example - etrue_getFilterLogs - Parameters - Returns - Example - etrue_getLogs - Parameters - Returns - Example - etrue_getWork - Parameters - Returns - Example - etrue_submitWork - Parameters - Returns - Example - etrue_submitHashrate - Parameters - Returns - Example - etrue_committeeNumber - Parameters - Returns - Example - etrue_fruitNumber - Parameters - Returns - Example - etrue_rewardSnailBlock - Parameters - Returns - Example - etrue_snailBlockNumber - Parameters - Returns - Example - etrue_getCommittee - Parameters - Returns - Example - etrue_getFruitByNumber - Parameters - Returns - Example - etrue_getFruitByHash - Parameters - Returns - Example - etrue_getRewardBlock - Parameters - Returns - Example - etrue_getSnailBlockByNumber - Parameters - Returns - Example - etrue_getSnailBlockByHash - Parameters - Returns - Example - etrue_getDataset - Parameters - Returns - Example - etrue_getSnailRewardContent - Parameters - Returns - Example - etrue_getRecentChainRewardContent - Parameters - Returns - Example - etrue_getChainRewardContent - Parameters - Returns - Example - impawn_getAllStakingAccount - Parameters - Returns - Example - impawn_getStakingAsset - Parameters - Returns - Example - impawn_getLockedAsset - Parameters - Returns - Example - impawn_getAllCancelableAsset - Parameters - Returns - Example - impawn_getStakingAccount - Parameters - Returns - Example JSON RPC API JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON ( RFC 4627 ) as data format. Getrue has experimental pub/sub support. See this page for more information. JavaScript API To talk to an truechain node from inside a JavaScript application use the web3.js library, which gives a convenient interface for the RPC methods. JSON-RPC Endpoint Default JSON-RPC endpoints: http://localhost:8545 Go You can start the HTTP JSON-RPC with the --rpc flag taipublic --rpc change the default port (8545) and listing address (localhost) with: taipublic --rpc --rpcaddr <ip> --rpcport <portnumber> If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail: taipublic --rpc --rpccorsdomain \"http://localhost:3000\" JSON-RPC support JSON-RPC 2.0/ Batch requests/ HTTP/ IPC/ WS The default block parameter The following methods have an extra default block parameter: tai_getBalance tai_getCode tai_getTransactionCount tai_getStorageAt tai_call impawn_getAllStakingAccount impawn_getStakingAsset impawn_getLockedAsset impawn_getAllCancelableAsset impawn_getStakingAccount When requests are made that act on the state of truechain, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX String - an integer block number String \"earliest\" for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions Curl Examples Explained The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:8545 JSON-RPC methods etrue eth impawn web3 net protocolVersion protocolVersion getAllStakingAccount clientVersion version syncing syncing getStakingAsset sha3 peerCount coinbase coinbase getLockedAsset listening mining mining getAllCancelableAsset hashrate hashrate getStakingAccount gasPrice gasPrice accounts accounts blockNumber blockNumber getBalance getBalance getStorageAt getStorageAt getTransactionCount getTransactionCount getBlockTransactionCountByHash getBlockTransactionCountByHash getBlockTransactionCountByNumber getBlockTransactionCountByNumber getCode getCode sign sign sendTransaction sendTransaction sendRawTransaction sendRawTransaction sendTrueRawTransaction - call call estimateGas estimateGas getBlockByHash getBlockByHash getBlockByNumber getBlockByNumber getTransactionByHash getTransactionByHash getTransactionByBlockHashAndIndex getTransactionByBlockHashAndIndex getTransactionByBlockNumberAndIndex getTransactionByBlockNumberAndIndex getTransactionReceipt getTransactionReceipt newFilter newFilter newBlockFilter newBlockFilter newPendingTransactionFilter newPendingTransactionFilter uninstallFilter uninstallFilter getFilterChanges getFilterChanges getFilterLogs getFilterLogs getLogs getLogs getWork getWork submitWork submitWork submitHashrate submitHashrate committeeNumber - fruitNumber - rewardSnailBlock - snailBlockNumber - getCommittee - getFruitByNumber - getFruitByHash - getRewardBlock - getSnailBlockByNumber - getSnailBlockByHash - getDataset - getSnailRewardContent - JSON RPC API Reference web3 web3_clientVersion Returns the current client version. Parameters none Returns String - The current client version. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\": \"Getrue/v1.1.0-unstable-d4c05e98/linux-amd64/go1.10\" } web3_sha3 Returns Keccak-256 ( not the standardized SHA3-256) of the given data. Parameters DATA - the data to convert into a SHA3 hash. Example Parameters params: [ \"0x68656c6c6f20776f726c64\" ] Returns DATA - The SHA3 result of the given string. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" } net net_version Returns the current network id. Parameters none Returns String - The current network id. - \"19330\" : Truechain Mainnet - \"18928\" : Testnet - \"100\" : Devnet Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"19330\" } net_listening Returns true if client is actively listening for network connections. Parameters none Returns Boolean - true when listening, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\":true } net_peerCount Returns number of peers currently connected to the client. Parameters none Returns QUANTITY - integer of the number of connected peers. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":74}' // Result { \"id\":74, \"jsonrpc\": \"2.0\", \"result\": \"0x2\" // 2 } Etrue etrue_protocolVersion Returns the current truechain protocol version. Parameters none Returns String - The current truechain protocol version. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_protocolVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"0x40\" } etrue_syncing Returns an object with data about the sync status or false . Parameters none Returns Object|Boolean , An object with sync status data or FALSE , when not syncing: - currentFastBlock : QUANTITY -current block number(fastchain) - currentSnailBlock : QUANTITY -current block number(snailchain) - highestFastBlock : QUANTITY - already highest block number(fastchain) - highestSnailBlock : QUANTITY -already highest block number(snailchain) - knownStates : String -already know state - pulledStates : String -already complete state - startingFastBlock : QUANTITY -start sync block number(fastchain) - startingSnailBlock : QUANTITY -start sync block number(snailchain) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_syncing\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"currentFastBlock\": \"0x2e9a\", \"currentSnailBlock\": \"0xab\", \"highestFastBlock\": \"0x3a3d2\", \"highestSnailBlock\": \"0xab7\", \"knownStates\": \"0x0\", \"pulledStates\": \"0x0\", \"startingFastBlock\": \"0x2e98\", \"startingSnailBlock\": \"0x0\" } } // Or when not syncing { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": false } etrue_coinbase Returns the client coinbase address. Parameters none Returns DATA , 20 bytes - the current coinbase address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_coinbase\",\"params\":[],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0xc94770007dda54cF92009BFF0dE90c06F603a09f\" } etrue_mining Returns true if client is actively mining new blocks. Parameters none Returns Boolean - returns true of the client is mining, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_mining\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": true } etrue_hashrate Returns the number of hashes per second that the node is mining with. Parameters none Returns QUANTITY - number of hashes per second. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_hashrate\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": \"0x38a\" } etrue_gasPrice Returns the current price per gas in wei. Parameters none Returns QUANTITY - integer of the current gas price in wei. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_gasPrice\",\"params\":[],\"id\":73}' // Result { \"id\":73, \"jsonrpc\": \"2.0\", \"result\": \"0xf4240\" // 1000000 } etrue_accounts Returns a list of addresses owned by client. Parameters none Returns Array of DATA , 20 Bytes - addresses owned by the client. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_accounts\",\"params\":[],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\"] } etrue_blockNumber Returns the number of most recent block. Parameters none Returns QUANTITY - integer of the current block number the client is on. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_blockNumber\",\"params\":[],\"id\":1}' // Result { \"id\":83, \"jsonrpc\": \"2.0\", \"result\": \"0xc94\" // 1207 } etrue_getBalance Returns the balance of the account of given address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns QUANTITY - integer of the current balance in wei. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 } etrue_getStorageAt Returns the value from a storage position at a given address. Parameters DATA , 20 Bytes - address of the storage. QUANTITY - integer of the position in the storage. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Returns DATA - the value at this storage position. Example Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by address 0x391694e7e0b0cce554cb130d723a9d27458f9298 . contract Storage { uint pos0; mapping(address => uint) pos1; function Storage() { pos0 = 1234; pos1[msg.sender] = 5678; } } Retrieving the value of pos0 is straight forward: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"etrue_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x00000000000000000000000000000000000000000000000000000000000004d2\"} Retrieving an element of the map is harder. The position of an element in the map is calculated with: keccack(LeftPad32(key, 0), LeftPad32(map position, 0)) This means to retrieve the storage on pos1[\"0x391694e7e0b0cce554cb130d723a9d27458f9298\"] we need to calculate the position with: keccak(decodeHex(\"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\")) The getrue console which comes with the web3 library can be used to make the calculation: > var key = \"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\" undefined > web3.sha3(key, {\"encoding\": \"hex\"}) \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\" Now to fetch the storage: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"etrue_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x000000000000000000000000000000000000000000000000000000000000162e\"} etrue_getTransactionCount Returns the number of transactions sent from an address. Parameters DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' // state at the latest block ] Returns QUANTITY - integer of the number of transactions send from this address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionCount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\",\"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } etrue_getBlockTransactionCountByHash Returns the number of transactions in a block from a block matching the given block hash. Parameters DATA , 32 Bytes - hash of a block. Example Parameters params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ] Returns QUANTITY - integer of the number of transactions in this block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockTransactionCountByHash\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc\" // 11 } etrue_getBlockTransactionCountByNumber Returns the number of transactions in a block matching the given block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Example Parameters params: [ '0xe8', // 232 ] Returns QUANTITY - integer of the number of transactions in this block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockTransactionCountByNumber\",\"params\":[\"0xe8\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa\" // 10 } etrue_getCode Returns code at a given address. Parameters DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter . Example Parameters params: [ '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', '0x2' // 2 ] Returns DATA - the code from the given address. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getCode\",\"params\":[\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x2\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\" } etrue_sign The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked. Parameters account, message DATA , 20 Bytes - address. DATA , N Bytes - message to sign. Returns DATA : Signature Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sign\",\"params\":[\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" } An example how to use solidity ecrecover to verify the signature calculated with etrue_sign can be found here . The contract is deployed on the testnet Ropsten and Rinkeby. etrue_sendTransaction Creates new message call transaction or a contract creation, if the data field contains code. Parameters Object - The transaction object from : DATA , 20 Bytes - The address the transaction is send from. to : DATA , 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas : QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice : QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce : QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. Example Parameters params: [{ \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\", \"gas\": \"0x76c0\", // 30400 \"gasPrice\": \"0x9184e72a000\", // 10000000000000 \"value\": \"0x9184e72a\", // 2441406250 \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\" }] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" } etrue_sendRawTransaction Creates new message call transaction or a contract creation for signed transactions. Parameters DATA , The signed transaction data. Example Parameters params: [\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" } etrue_sendTrueRawTransaction When transaction contain payer or fee,Creates new message call transaction or a contract creation for signed transactions. Parameters DATA , The signed transaction data. Example Parameters params: [\"0xf8c60183989680834c4b4094bea78fea68dba84363d0f9b79219ddf5991ccb2a880de0b6b3a76400008094cfb7ec3ac64a3afde043a5b32212d0b9c25b5d808081eba07cc4b8300a8ab6a7d6aee713f6dc61311848bf827794c370873ca334e7cc2cc1a05cd365ffc46cada820911e3c11123e36245ed1cec7943038632715a89a421b0281eca037d6e60016bd70371fd45a2fadd63f8824b34331f2cb5f7fe69f04df7f6d9caea04e05dda8cffa3e453aa474f955eef97fe63e9c9721860aaea379a0ace111fd16\"] Returns DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendTrueRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc7509ef7672e1c1d59cec2854d3d074d442984382bd03c665c2e82ebfdacc25e\" } etrue_call Executes a new message call immediately without creating a transaction on the block chain. Parameters Object - The transaction call object from : DATA , 20 Bytes - (optional) The address the transaction is sent from. to : DATA , 20 Bytes - The address the transaction is directed to. gas : QUANTITY - (optional) Integer of the gas provided for the transaction execution. etrue_call consumes zero gas, but this parameter may be needed by some executions. gasPrice : QUANTITY - (optional) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - (optional) Hash of the method signature and encoded parameters QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Returns DATA - the return value of executed contract. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_call\",\"params\":[{see etrue_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x\" } etrue_estimateGas Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. Parameters See etrue_call parameters, expect that all properties are optional. If no gas limit is specified getrue uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit. Returns QUANTITY - the amount of gas used. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_estimateGas\",\"params\":[{see etrue_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x5208\" // 21000 } etrue_getBlockByHash Returns information about a block by hash. Parameters DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. Example Parameters params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ] Returns Object - A block object, or null when no block was found: SnailHash : DATA , 32 Bytes - hash of the snail block. SnailNumber : QUANTITY - the snail block number. committeeRoot : DATA , 32 Bytes - hash of the committtee. extraData : DATA - the \"extra data\" field of this block. gasLimit : QUANTITY - the maximum gas allowed in this block. gasUsed : QUANTITY - the total used gas by all transactions in this block. hash : DATA , 32 Bytes - hash of the block. null when its pending block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. maker : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. number : QUANTITY - the block number. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the block. signs : Array , committee signs. fastHash : DATA , 32 Bytes - hash of the fast block. fastHeight : QUANTITY - the fast block number. result : QUANTITY - the vote. sign : DATA , 32 Bytes - committee sign hash. size : QUANTITY - integer the size of this block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the block. switchInfos : Array , committee member switch. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockByHash\",\"params\":[\"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d15273312\", true],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { {\"SnailHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"SnailNumber\":\"0x0\", \"committeeRoot\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"extraData\":\"0x\", \"gasLimit\":\"0xb71b00\",\"gasUsed\":\"0x0\", \"hash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"maker\":\"0x49fc88c2576b4f015cf75dae80e87a815d832888\", \"number\":\"0xab4\", \"parentHash\":\"0x0832d972f5b16ddefc3de154cc0a5a4ea16be2991be19bd740ae3486a83ff59f\", \"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", \"signs\":[{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"fastHeight\":\"0xab4\",\"result\":1, \"sign\":\"0x7a07be32cce585b6d74e6134022c973b6433dcb87447ec456712f5d3b40b8907403ea24c81309aa090e7469fc761372de2e2d32beddf0031eed1aa557185cbc101\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x4f1033692e2f354409002ff0ce9eb20d4edb676f6c02dc58223c9d2d15eebcaf4071c2efc630a44d78865da714ae694cd690d4b0d02b393d64ca377c63594a6e01\"},{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0xc8303a5c76fb70e834b63e70180af9720ac09eda59327a0e6be3ab85fcfcbb9b40434ae7dcd23df13fe6a55c1967d29de7db5c5e545674b6849a1a4eabb59b4b00\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x041df0a05407cb302695babfeff03d669d300e76cc2d33305512dc0859aeb4dc47b68065b5d62bd88a6b60e3993ed07ae0a64223681084c5c958cdd2041f42a100\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x8b8c97a4155c2b687b0eb90e1a716ede85c1b32ec7b164c0fa721f1b18ada4c41bc46373419d625ef8f0368b123bf86a60b07c168ebb5b97de4b9095847fad5001\"}],\"size\":\"0x40a\",\"stateRoot\":\"0x5c7127948504801c7db0ef17df87950b471a94d6f5332d39ceff41298f3f6b74\", \"switchInfos\":[],\"timestamp\":\"0x5ce25206\",\"transactions\":[], \"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"} } } etrue_getBlockByNumber Returns information about a block by block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. Example Parameters params: [ '0x1b4', // 436 true ] Returns See etrue_getBlockByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockByNumber\",\"params\":[\"0x1b4\", true],\"id\":1}' Result see etrue_getBlockByHash etrue_getTransactionByHash Returns the information about a transaction requested by transaction hash. Parameters DATA , 32 Bytes - hash of a transaction Example Parameters params: [ \"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\" ] Returns Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. null when its pending. blockNumber : QUANTITY - block number where this transaction was in. null when its pending. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Wei. hash : DATA , 32 Bytes - hash of the transaction. input : DATA - the data send along with the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. value : QUANTITY - value transferred in Wei. v : QUANTITY - ECDSA recovery id r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s payer : DATA , 20 Bytes - address of the payer. fee : QUANTITY - transaction fee in Wei. pv : QUANTITY - ECDSA recovery id pr : DATA , 32 Bytes - ECDSA signature pr ps : DATA , 32 Bytes - ECDSA signature ps Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByHash\",\"params\":[\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\"],\"id\":1}' // Result { \"jsonrpc\":\"2.0\", \"id\":1, \"result\":{ \"blockHash\":\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"blockNumber\":\"0x5daf3b\", // 6139707 \"from\":\"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d\", \"gas\":\"0xc350\", // 50000 \"gasPrice\":\"0x4a817c800\", // 20000000000 \"hash\":\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\", \"input\":\"0x68656c6c6f21\", \"nonce\":\"0x15\", // 21 \"to\":\"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb\", \"transactionIndex\":\"0x41\", // 65 \"value\":\"0xf3dbb76162000\", // 4290000000000000 \"v\":\"0x25\", // 37 \"r\":\"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea\", \"s\":\"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c\" \"payer\":null, \"fee\":null, \"pv\":null, \"pr\":null, \"ps\":null } } etrue_getTransactionByBlockHashAndIndex Returns information about a transaction by block hash and transaction index position. Parameters DATA , 32 Bytes - hash of a block. QUANTITY - integer of the transaction index position. Example Parameters params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', '0x0' // 0 ] Returns See etrue_getTransactionByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByBlockHashAndIndex\",\"params\":[\"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\", \"0x0\"],\"id\":1}' Result see etrue_getTransactionByHash etrue_getTransactionByBlockNumberAndIndex Returns information about a transaction by block number and transaction index position. Parameters QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . QUANTITY - the transaction index position. Example Parameters params: [ '0x29c', // 668 '0x0' // 0 ] Returns See etrue_getTransactionByHash Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}' Result see etrue_getTransactionByHash etrue_getTransactionReceipt Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Parameters DATA , 32 Bytes - hash of a transaction Example Parameters params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ] Returns Object - A transaction receipt object, or null when no receipt was found: transactionHash : DATA , 32 Bytes - hash of the transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. blockNumber : QUANTITY - block number where this transaction was in. from : DATA , 20 Bytes - address of the sender. to : DATA , 20 Bytes - address of the receiver. null when it's a contract creation transaction. cumulativeGasUsed : QUANTITY - The total amount of gas used when this transaction was executed in the block. gasUsed : QUANTITY - The amount of gas used by this specific transaction alone. contractAddress : DATA , 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null . to : DATA , 20 Bytes - The address the transaction is directed to. logs : Array - Array of log objects, which this transaction generated. logsBloom : DATA , 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. It also returns either : root : DATA 32 bytes of post-transaction stateroot (pre Byzantium) status : QUANTITY either 1 (success) or 0 (failure) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionReceipt\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238', transactionIndex: '0x1', // 1 blockNumber: '0xb', // 11 blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', cumulativeGasUsed: '0x33bc', // 13244 gasUsed: '0x4dc', // 1244 contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155', // or null, if none was created logs: [{ // logs as returned by getFilterLogs, etc. }, ...], logsBloom: \"0x00...0\", // 256 byte bloom filter status: '0x1' } } etrue_newFilter Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call etrue_getFilterChanges . A note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: * [] \"anything\" * [A] \"A in first position (and anything after)\" * [null, B] \"anything in first position AND B in second position (and anything after)\" * [A, B] \"A in first position AND B in second position (and anything after)\" * [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\" Parameters Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. Example Parameters params: [{ \"fromBlock\": \"0x1\", \"toBlock\": \"0x2\", \"address\": \"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", null, [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\"]] }] Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newFilter\",\"params\":[{\"topics\":[\"0x0000000000000000000000000000000000000000000000000000000012341234\"]}],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } etrue_newBlockFilter Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call etrue_getFilterChanges . Parameters None Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newBlockFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } etrue_newPendingTransactionFilter Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call etrue_getFilterChanges . Parameters None Returns QUANTITY - A filter id. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newPendingTransactionFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 } etrue_uninstallFilter Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with etrue_getFilterChanges for a period of time. Parameters QUANTITY - The filter id. Example Parameters params: [ \"0xb\" // 11 ] Returns Boolean - true if the filter was successfully uninstalled, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_uninstallFilter\",\"params\":[\"0xb\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": true } etrue_getFilterChanges Polling method for a filter, which returns an array of logs which occurred since last poll. Parameters QUANTITY - the filter id. Example Parameters params: [ \"0x16\" // 22 ] Returns Array - Array of log objects, or an empty array if nothing has changed since last poll. For filters created with etrue_newBlockFilter the return are block hashes ( DATA , 32 Bytes), e.g. [\"0x3454645634534...\"] . For filters created with etrue_newPendingTransactionFilter the return are transaction hashes ( DATA , 32 Bytes), e.g. [\"0x6345343454645...\"] . For filters created with etrue_newFilter logs are objects with following params: removed : TAG - true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex : QUANTITY - integer of the log index position in the block. null when its pending log. transactionIndex : QUANTITY - integer of the transactions index position log was created from. null when its pending log. transactionHash : DATA , 32 Bytes - hash of the transactions this log was created from. null when its pending log. blockHash : DATA , 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log. blockNumber : QUANTITY - the block number where this log was in. null when its pending. null when its pending log. address : DATA , 20 Bytes - address from which this log originated. data : DATA - contains the non-indexed arguments of the log. topics : Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity : The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256) ), except you declared the event with the anonymous specifier.) Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getFilterChanges\",\"params\":[\"0x16\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": [{ \"logIndex\": \"0x1\", // 1 \"blockNumber\":\"0x1b4\", // 436 \"blockHash\": \"0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"transactionHash\": \"0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\", \"transactionIndex\": \"0x0\", // 0 \"address\": \"0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"data\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"topics\": [\"0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\"] },{ ... }] } etrue_getFilterLogs Returns an array of all logs matching filter with given id. Parameters QUANTITY - The filter id. Example Parameters params: [ \"0x16\" // 22 ] Returns See etrue_getFilterChanges Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getFilterLogs\",\"params\":[\"0x16\"],\"id\":74}' Result see etrue_getFilterChanges etrue_getLogs Returns an array of all logs matching a given filter object. Parameters Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. blockhash : DATA , 32 Bytes - (optional) With the addition of EIP-234 (Getrue >= v1.8.13 or Parity >= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash . Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash . If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed. Example Parameters params: [{ \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"] }] Returns See etrue_getFilterChanges Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getLogs\",\"params\":[{\"topics\":[\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]}],\"id\":74}' Result see etrue_getFilterChanges etrue_getWork Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\"). Parameters none Returns Array - Array with the following properties: 1. DATA , 32 Bytes - current snailBlock header without nonce 2. DATA , 32 Bytes - the seed hash used for the DAG. 3. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / fruit difficulty. 4. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / snailBlock difficulty. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getWork\",\"params\":[],\"id\":73}' // Result { \"jsonrpc\": \"2.0\", \"id\": 73, \"result\": [\"0xbcdcb8533dcf88b736f5b44f777250922f0f0472d4dd34a5a1b445a0c47aceed\", \"58bc067579760d307143ec1cd416eb3814110d29bf21aba0cd18586e2f038791\", \"0x0000000000000000000000000000000000000000000000000000000000000064\", \"0x0000000000000000000000000000000000000000000000000000000000002710\"] } etrue_submitWork Used for submitting a proof-of-work solution. Parameters DATA , 8 Bytes - The nonce found (64 bits) DATA , 32 Bytes - The header's pow-hash (256 bits) DATA , 32 Bytes - The mix digest (256 bits) Example Parameters params: [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\" ] Returns Boolean - returns true if the provided solution is valid, otherwise false . Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_submitWork\", \"params\":[\"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true } etrue_submitHashrate Used for submitting mining hashrate. Parameters Hashrate , a hexadecimal string representation (32 bytes) of the hash rate ID , String - A random hexadecimal(32 bytes) ID identifying the client Example Parameters params: [ \"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\" ] Returns Boolean - returns true if submitting went through succesfully and false otherwise. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_submitHashrate\", \"params\":[\"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true } etrue_committeeNumber get current committee number Parameters none Returns QUANTITY - integer of the current committee number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_committeeNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": 8 } etrue_fruitNumber get current fruit number Parameters none Returns QUANTITY - integer of the current fruit number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_fruitNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": \"0x1975f\" } etrue_rewardSnailBlock get current reward snalBlock infomation Parameters none Returns Object - A snail block object, or null when no snail reward block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fastNumber : QUANTITY - default 0. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail reward number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_rewardSnailBlock\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x193a0\", \"difficulty\": \"0x2710\", \"endFruitNumber\": \"0x193db\", \"extraData\": \"0xd9820a018667657472756588676f312e31302e38856c696e7578\", \"fastNumber\": 0, \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x7dad8df99080412919a4e0018c980e6bf40e64bff5e09f0ec45efd63530ed95e\", \"fruits\": [\"0x421cf9aa22145c141d3235a5b19c73d10613cc782221f279c3a136f136ac811e\", \"0xb6fdad4a0287102adba3b5bbe9789598694c028491de7c459f47248ee1844132\", \"0xa784a38af019ea321c725bf6b6ed61398bb86d4b20289c0a6ef54a20eced554c\", \"0x8fe6337b88ee4f19514670d49f5a64e736edfd7ae8c34fecc6d54ce923325991\", \"0x9dcbc81a1e764f6c0a6591e72000776dad6752be2d9c65b77a2157bc88a65333\", \"0x5cbac30e3a8d3246bbb84b570aecfa69b1d364738e4223fa17fe047b307ed7f2\", \"0x75115e8cdcfba043c57c2a10c6e781ab582f85b2e715cbacc42e3d2f96bc7cac\", \"0x08fe101b8ef2304965b5008267ee321ddbc48b1fd210b4dff81441e9c57f2e0f\", \"0xe31577b98c384074b37ad1d9cad88d31483b152ed96106e17f9864ded8052f62\", \"0xce3f340eb5c0582e82f5f9c550373ba069af140b50eabaf7a044717eada32536\", \"0x879f73afc3cb734dd9b5b7fe7687b6f8d6a5b8e7d20c4f730dbd0f84590ac0de\", \"0xd0c3c2c31f6b19c618c709968624ca02b23341b01178f9de23b43a406755c93e\", \"0xaa1285332874bd67c7b37b7b81f66e0b3fe6b38b176d22a0ee0349ef3120f9c4\", \"0xaed6ff91f2f1de5fcd7880797b841c61458bd59fe3f4bd4e80823d99a555049f\", \"0x46e8303c548f82e59741ee94ced70a0df1500abef9d667f131a39e71b9aaff0c\", \"0xedc6d3a94624bd914435119493c5d73545c854385758e86cb1b2c6445de7a6d4\", \"0x46a42a82461c5b92ef7ecf86c6d84dd8a7abeddd72a444467c109da53de26f10\", \"0xf23a03a1698426280449512bf19f731c56051cd19d04976009d7d2e03d6294a4\", \"0x4f2b30f026d64d56ec8d0fc69ef0959bbceeff648eafe8ff3c711af4d0f796eb\", \"0xbcfd45ccd7456fdb5dc3d19a2bd65f4b37530e4772fb6a6364376df3dee8b883\", \"0x3c1ce1153fc784870812be53f89c549063c5056d653db16621232582b6fe51f7\", \"0x8dfbb789f49ff07237c5650fa166d7adf9a2ff5b0ee967e510686a0df24b5e6e\", \"0x06aef81bc2b5d914fc553dad79a83dc0660c33c75448e62129b1da8443a3e704\", \"0xf291e642625bf18ddc03eb2c6287dea900457bcf8102834c26fb08438eb5d434\", \"0x73bb8bc367a789ce6e69ef4e21ffec76e103d36a85a01a460bd268a1ceec992a\", \"0x364c55068a8341db5e3ecc6fa6cc328e1b038d9a567b85fb3e470d8ee12a2fd8\", \"0x460e5ddc879c9da6090296d04fc522fcfc4341566856c0e4b81a6ee459922c06\", \"0x0f17e693874809172d889bd813ed4e825fdc4436d4c97bc48725b924ab612ce5\", \"0xca07ab5afbdc766247276e3641df8206cc89ca00660f3d72ceac86b1e192652a\", \"0x96027060b71fb9b758131b70c481c2e5f916bb821fa7295a834080c89698dbe1\", \"0xb9ed69d03aa2a80e358950b82fbd083fbef5069b6b8f2488cd74d70260b5de9b\", \"0x71c0249266f922677eab708b5de86fe1f057b6b39ad6dcd05230de89a0021eba\", \"0xbcb6f37b63558db10bedab0f722e34341a6329f57248e00606fe184613468c5c\", \"0x08eb945b49599aa7903bac856f5f5bb9d260bc1c2c553b2ab9d69a8611c4c935\", \"0xcac5bb4daec7f138cb820e5fd4b958184c9e724d4879662f4422df0230aadb14\", \"0xd29c761ec3504ae091998c2acbc3e739635d99e0764a7f521021a8ae7c068c36\", \"0xe5de172346d9d1f423a09726ca6e992725986c54bf2818ba537d341ba63ebf19\", \"0x337f7834016004bfa59869cfc357035dbc8128b340ed062e7a30a93bee2ac3fb\", \"0xf0f6790614751991e9d04548c7a81b0ef28aff686a704e4cfbfe1de01e6fce9e\", \"0x502e04348f225907f8528d9196c7113bd3c15d3080c1c1718c85c8cc073ea7bb\", \"0x663bf65f7e766082cfb84ab2d9303f9c078e2819eb2197d6f6318dafc55cfa98\", \"0x282b563050f940059986b4745345f14ce6d7e96b7160ead7a27985ce99aeae9b\", \"0x1459d9bb5939fe563d6d9502e28184d5c4619c10d0e0f6699b746daf4c1b0400\", \"0xc7d3fff73e954042d5bd91107252ff3986c9c756869c0484954d82831dfbfb28\", \"0x0cb9e8929bf625b0916879359fc617ce0b4e7f474df5cf53414d2075e8668cca\", \"0x9b8715bf3090fdf115ae675bf4692e5dc3e8453b126fd729ddfabbfaed11aa66\", \"0x69668b51d76ce1ab186158f05ef8d92394803b9f0c3e508d18d39fe45f2e25d4\", \"0x972f4e2f865c5e00f377418a2a0469e3abd3c1b64b2cdd803904dd33a9bfc7a0\", \"0x3ccb10a6a69fcfe8da544bddfcadf6be6a295dd4b38ab5ba0f9e8aa36f4188fd\", \"0x4098d83b4e8f506c7b85560a8e84017f845b1083b864e3975208ece07f98074f\", \"0xec6edff7cd40f0bc41b1ed6a129e88bec38cd6474f130363cd6dccc31d49a717\", \"0xa89aa9e24a3f0926bbbfc4c8a80ed872f58963f83d7d99b13f169463783f4e52\", \"0x07bb236e22e0d322d962bb28f329aed7ce8e9c460215d8700826a5faa777ccac\", \"0xf87aa14c01ee28584632c6db9b1667d27c8d0c0eb947d286318641e549dd3c1c\", \"0x2aeb9798bade7ece9a6fc803e9fb7359c14cb6c27dd986a27e8b20639dda5377\", \"0x07858381ad1ab29ac5a0f34fd78420cffa494c0dbb9bca64c1bff28075ba490b\", \"0x121d18d6770575a34480a8ddc268e87438e424d721d1b76c84cb60297d0a7156\", \"0xc54357b750662ef429845acfeacf482cffa4b253373e05199da3e01301823572\", \"0xe1bcd60bafc03acbcc8c8c6b454af4ecc1171cbc7d9ab4ed1e321bab82308af8\", \"0x7917615f4519f7160de4ac556c8de805ce8bc464e5784642cc937e000512ad0f\"], \"hash\": \"0xb913521609feef2b7cc351efe0d0b359796c709176e8824622bc6dee312a227f\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x0000b9b5b60cbaa58a008425f70c3e610794e9eb9ffa7e8c9ab257c451afcc22\", \"nonce\": \"0x279486ec07bf61d6\", \"number\": \"0x6b4\", \"parentHash\": \"0xa24c81127edb0a630b13205b498d8ef0f7d47a4678e96827f8f19ffd2c470a24\", \"pointerNumber\": 1708, \"size\": \"0x101bb\", \"timestamp\": \"0x5c9194ec\" } } etrue_snailBlockNumber get current snail block number Parameters none Returns QUANTITY - integer of the current snail block number. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_snailBlockNumber\", \"params\":[],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\": \"0x38\" } etrue_getCommittee get committee member infomation Parameters ```js params: [\"0x1\"] ##### Returns - `backups`: `Array` - Array of backup committee members, each committee member info contains pubkey\u3001 coinbase\u3001flag\u3001type. - `beginNumber`: `QUANTITY` - the begin fast block number. - `beginSnailNumber`: `QUANTITY` - the begin snail block number. - `endNumber`: `QUANTITY` - the end fast block number. - `endSnailNumber`: `QUANTITY` - the end snail block number. - `id`: `QUANTITY` - committeeId. - `memberCount`: `QUANTITY` - the number of committee members . - `members`: `Array` - Array of committee members. ##### Example ```js // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getCommittee\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"backups\": [{ \"PKey\": \"0488a25849abee5921fdb581ba34cd66adc8e02b108391c4153ca8da27722e16badf4fcd5ba7f557ae76d444ccf3638e4590a181805623de1cab67f31364c79736\", \"coinbase\": \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a9a1cedb8900d893b607c4dbc834abada3fe98f247b8bcb5ef44d3d3a246c4cf41d9d792527473c30ded81fa4b81afe7030a09e093dd92746b98c79e6a204c63\", \"coinbase\": \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"040d153624462927444a8212717e4ad41ec5f5739bc36598d093d114729e1dc782d55d322699705829cf9d69f201009db797ebe8ba952f10a26fe36c64356b111b\", \"coinbase\": \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3474c26578fce00d241119758271f6a208cc987c6f37d1518dcea2a51257bafeebd93202ae499cb5a8986720d4b63a04043aadb4d03430194a81860c9ca0763\", \"coinbase\": \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04d370defb1b7b8c086f98c4a7d7b90348b088cd2effdcc27b86feebdff499a192b4a5a5b16a400625271d69b3fa7d8c42c8b2e15c910cd1f314f28eb5beb73342\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", \"coinbase\": \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", \"flag\": 160, \"type\": 161 }], \"beginNumber\": 19781, \"beginSnailNumber\": 1, \"endNumber\": 30725, \"endSnailNumber\": 168, \"id\": 1, \"memberCount\": 21, \"members\": [{ \"PKey\": \"04ad2da6433f25f5063c98fb414496bd794f3054544408a63da4c6488a35a7c7ba38e8dbae49356182dcd81f45a715feb1f7f696c3a1bd77e33ab8ab41d8177ca3\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb9577ae8e19d99f708b8d46de17220afaf2d4a89676d98c8e8558e4e10f0283733a6a4a47aee779081cedd9266d5b4edcfc4fa22a4d69e3da98f6a03ad4e372\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"0497413104d718ef592fa4526e796be092a143272f9c7b415c23c73201a9cf3da2ec928e11958246ee2f8e838ec67506e798c4e8fcec89f5e8c9696235f600e765\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04dc2a2cba3793da755d28f02336193a8e04c77cb3fdef5f04a4197c71f59f978767729ff652267e4c0fc9204c7e921931c207e32ba442ac27a20acaad49324696\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047a523df31438d3efc02c4126b891d5e1258371336decfe43a15efcb519607aa2b932f895808f4414f75b525d7a490e10be314a6b60971c7149156b9d659fb591\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04ea62525863113273df44d8b5bbbcf0c1df5d03b94dd60308b747c1894af70dd5eaf5facfb1577bb4416ba517375ce662769f69b0c5fa961ac0cd9a4a342e4f67\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04601fc9ac609d9d47d01f76bcdf496a1b3d2aaf9dc4c97319faff49e2284ad843aa5505343376db1357b9cc0d176fe828d7a07cc8cd0993aee3b76d77eda2be4b\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04b64ba599ff0e0c2418357f87ed6058f04801ce0e0f653e336aa2f0b9c9620b1ed9222648100d7cadfbbe2cadb66b94e66eeed80b0a96da7808bc55fd8dd282a2\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"044aa7cef6d282ec22e0ef6d55d36b17d607afee920668320430717552cd7d4905e07d92a0e939f96ef6d617174a136267ed6a4efcc14879abe6aa097965fb4740\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04506b3c55ac57f78b41b2e47afc8d0f8d9891803822bbc4fe35bf3be72ad91056b0aae8a5fa76309f093987202a284c67d5918ca23a31e2e6535255c58240bf59\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04a69c470e1b4ea2a05d8a70de7c15687131bbb66105049a5bbdb04645381a29899ec72af7929c645ec0d29a91b4359de2629618b763a333d52bb4f436cccf9a9d\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"046e61555ed9bd6bb08b3f5034373bfc4472a8ca8868d21e1ceb4fe3f24c42c3a5dc7cb492ca62a31bfa6c82f86fed02dfa23196c25a76673ddb7a1f3f6eaafc84\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb4c070000b1c4525e42d2cf61a0f1449ef82ce534a19ff03cf8c2a480d16e9738f5162972e15262992eb21cf561b7bae2e49e9dc8eb2b8f52dd9100f2bdce4e\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047fc0ae115cadf26b472ed4bed8785ca535c9fe53eb896bd21d7d7d7e1ee242881c50fa5eeaba4465e1992d5b917ae1f891c1e85e0bb5e0201e885886e846102b\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }] } } etrue_getFruitByNumber get fruit block by fruit number Parameters QUANTITY - integer of the fruit number. Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x1\", false ] Returns Object - A fruit object, or null when no fruit was found: - difficulty : QUANTITY - integer of the difficulty for this snail reward block. - extraData : DATA - the \"extra data\" field of this reward block. - fastHash : DATA , 32 Bytes - hash of the fruit. - fastNumber : QUANTITY - fruit. - fruitDifficulty : QUANTITY - integer of all fruit difficulty for the fruit. - hash : DATA , 32 Bytes - hash of the fruit. - miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. - mixHash : DATA , 32 Bytes - the mix digest. - nonce : QUANTITY - the mining nonce. - number : QUANTITY - the fruit number. - size : QUANTITY - integer the size of the fruit in bytes. - timestamp : QUANTITY - the unix timestamp for when the fruit was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getFruitByNumber\", \"params\":[\"0x1\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"difficulty\": \"0x4e20\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fastHash\": \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", \"fastNumber\": 1, \"fruitDifficulty\": \"0x64\", \"hash\": \"0xd5d8719f456a59249570bb7adf9e37c7d2e30621fbc0aab8ee2817bf591e3acc\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0xb01e70ab492dcede93395389b9193201011e950f181180f78ad98ae58184601d\", \"nonce\": \"0x033aebb6a27a911a\", \"number\": 1, \"signs\": 5, \"size\": 865, \"timestamp\": \"0x5c87b12a\" } } etrue_getFruitByHash get fruit block by fruit hash Parameters DATA , 32 Bytes - hash of fast block. Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", false ] Returns See etrue_getFruitByNumber Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getFruitByHash\", \"params\":[\"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\",false],\"id\":100}' // Result See etrue_getFruitByNumber etrue_getRewardBlock return the fast block position where the given snail block is rewarded Parameters QUANTITY - integer of the snail reward block number Example Parameters params: [ \"0x15\" ] Returns Object - A fast block object, or null when no snail reward block was found: committeeRoot : DATA , 32 Bytes - hash of committee members. snailHash : DATA , 32 Bytes - hash of the snail reward block. snailNumber : QUANTITY - the reward snail number. extraData : DATA - the \"extra data\" field of fast block. gasLimit : QUANTITY - the maximum gas allowed in fast block. gasUsed : QUANTITY - the maximum gas allowed in fast block. hash : DATA , 32 Bytes - hash of the fast block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. number : QUANTITY - the fast block number. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the fast block. signs : Array - Array of each committee member sign. size : QUANTITY - integer the size of the fast block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the fast block. switchInfos : Array , - Array of switch committee member. timestamp : QUANTITY - the unix timestamp for when the fast block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the fast block. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getRewardBlock\", \"params\":[\"0x15\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"committeeRoot\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"SnailHash\": \"0xeae9f91963eb64f0ca6e5bcf8551d8efd0d1c7f8d5ff207856c303faef86e419\", \"SnailNumber\": 21, \"extraData\": \"0x\", \"gasLimit\": \"0x4b99999\", \"gasUsed\": \"0x668a0\", \"hash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"number\": \"0x7e5\", \"parentHash\": \"0x3f1105c6fa853944a84fe9ef7eefcc2bcbb08860c302aed652c773d1bbc0b2f0\", \"receiptsRoot\": \"0x824c56f642d67e881555ec142168cc2364a1343129e34044dea382088cb5fa42\", \"signs\": [{ \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x763026fef783d8bfdf4b06309a1aafbebce229e846383131dc430c6c29ff42bd033d3719f4c70e96bd5a80e46a9a67d2f647fbc7c2e0a7b32c0cf8824feca29300\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x4c11748616eda54ca216fc8fd28957459c629caea7967e73f23ac02419e9dfba4650b7cbfd3fd9a0f4737724234941c98fa9a6ad00ffd3f860e9dd5be5ac366c00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x86d689580eac3ce23453dec705ed8cd5c0ed992d0a4296ebea4bc5373f90bb1a56fbc121d6146f4c7ac6416e74b5a876012e25497dd70402b3461c13c9475a2800\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0xaa1d76682f8ce81fa449819a6921808010114d4433945da40d323d5d8f57ebac78fc7096fbf0307dcdac5e8c9e6b2be80aa3959a6e6304d85d7a534e0e2714cc00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x90b4ce8a7a13d070d9b360173e1c96dd7d95c33e7f7689187117dafae46393a8764ce36db25881fcbf82ba692b18eb2450aa2f69667391e6c55025d9f6704d1701\" }], \"size\": \"0xca7\", \"stateRoot\": \"0xc422d6752c0aa8e0a773ddd5b12950f3c30361ce7320c6fa59eb77c9f36ca07e\", \"switchInfos\": [], \"timestamp\": \"0x5c87bf4c\", \"transactions\": [\"0xee311d9a6e95b0740488a8c797fc36b0ddbba97005c8623d0c8258509ad0e34b\", \"0x9be94692e83f76fbf8a9ff7a4b9caa83141bf5c7bd91b768669802b18357146c\", \"0x167c29e6b6278a999c0debe02b51407cbe9f23e701f53fa2c80e141ab42f8cd4\", \"0x481f16a6866ce56774c5a14bfbf9a19391868761d09403acaea4d9a74fe33bd7\", \"0x133457504d0c23f84b58b9f82aae15012b48c5bcb5fcff904d795fe78de1ce88\", \"0xff98231ecd6b0358d15eec72ebb8920ed5312c30305fb21845485316b1cf8ddd\", \"0x3282ec6633cb743a2e177f0a999b1f366bcf900069c33c40a4a1c3b7b4fc5ed6\", \"0x897e1b6226666a5c031bf528527e68efb63a7d3c4b6431d758858c554a3cf38a\", \"0x034bf45b679a2283deec9c3c514b0dfe6dc1ab4980864ceeafd9989bd56410f0\", \"0x129bc008bcae647a55d900068ae657e3f9073a37d03933d149ba529abd15c63c\", \"0xc5831516e417510b6f4069093c8845de24e62a1adee409c35164b8b6cf26465d\", \"0xb0ef3a7209af20990b2e346dc7f963d11e0da3a42ae04640502b81e30ac96202\", \"0x8c79698e30cbd7c50781eaa6077667428cf51027086762d9349ee9987d9ebe36\", \"0xf48839d7212c9d01684237131f68f81a30fe6635eb39b0030bab3e68c75bbefa\", \"0x94aff39d085551389a198378137e5dd694ce689e5ad326910f18f167ff81f16c\", \"0x882c79c2678a0fc0099bca068ca05bb239405c8a2f363a3b755b4049c67f41c7\", \"0xaa5855c69051b82716bdc9b7f9190ef06c06411d0d43d8786fbf14a3898446a6\", \"0x508b4357b911624c11bb5a90d880c86ed92f5f430454f64b6e63ea884cec0589\", \"0x652a73ec17dab453db88a9e292bf684a814101d7013a489fbbae98ed9c221f03\", \"0xa95cbff42440d0a000ad55969f95fc5b5ff947efd95dbb0f9607acf849dbfbd9\"], \"transactionsRoot\": \"0xcfcce7b64115b9086a78c0449ceb70aac9b08c0d221943470ffacbbdc71fba9a\" } } etrue_getSnailBlockByNumber get snail block by number Parameters QUANTITY - integer of the snail block number,or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Boolean - whether show fruits in snail block Example Parameters params: [ \"0x19\", false ] Returns Object - A snail block object, or null when no snail block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail block number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailBlockByNumber\", \"params\":[\"0x19\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x5a9\", \"difficulty\": \"0x9e86\", \"endFruitNumber\": \"0x5e4\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x02c44355f9aa43305f7507efd77ab13a74b0a7bde1d923ac62135e8e3bfe4afd\", \"fruits\": 60, \"hash\": \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x000122785a555ca6b63c54e1ff398cf5ae9f6176391de526a7d3a9277b13cfaf\", \"nonce\": \"0x719c13f20436b852\", \"number\": \"0x19\", \"parentHash\": \"0x1d2361639c4b26f9481caf680e6db21af1c8d9159f804b01a37611a1e057487a\", \"pointerNumber\": 17, \"size\": \"0xcee1\", \"timestamp\": \"0x5c87bbcf\" } } etrue_getSnailBlockByHash get snail block by hash Parameters DATA , 32 Bytes - hash of snail block . Boolean - if contais fruit signs of committee member. Example Parameters params: [ \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", false ] Returns See etrue_getSnailBlockByNumber Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailBlockByHash\", \"params\":[\"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\",false],\"id\":100}' // Result See etrue_getSnailBlockByNumber etrue_getDataset the Minverva algorithm calculates the required source of dataset, and updates the dataset every 12,000 Parameters none Returns [null,null,null,null,null,null....,null]. -when snailBlock number exceed 12000, return not nil Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getDataset\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { [null, null, null, null, ......, null, null] } } etrue_getSnailRewardContent get snailBlock reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit Parameters QUANTITY - integer of a block number. Returns blockminer : -snailblock miner address and reward committeReward : -committee member address and reward for all fruit fruitminer : -fruit miner address and reward for each fruit Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailRewardContent\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"blockminer\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 61629629629629000000 }, \"committeReward\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 23111111111110999785 }, \"fruitminer\": [{ \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }] } } etrue_getRecentChainRewardContent get snailBlock pos reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit Parameters none Returns Number : QUANTITY , -snailblock number blockminer : QUANTITY , -snailblock miner address and reward committeReward : Array , -committee member address and reward for all fruit Address : DATA , 20 Bytes - address of the delegate. Amount : QUANTITY , - reward amount Staking : QUANTITY , - staking amount when cal reward foundationReward : -foundation reward fruitminer : -fruit miner address and reward for each fruit time : -miner snail block time Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getRecentChainRewardContent\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { Number: \"0x9b40\", blockminer: { Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 52432209984299000000, Staking: null }, committeReward: [{ Items: [{...}, {...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }], foundationReward: { Address: \"0xda79b1c2645750c655d848e04c27e2cd9d263c48\", Amount: 0, Staking: null }, fruitminer: [{ Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 26216104992149000000, Staking: null }], time: \"0x5e6036ac\" } } etrue_getChainRewardContent get snailBlock pos reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit Parameters QUANTITY - integer of a snail block hex number. DATA , 20 Bytes - address of the validator, when \"0x0000000000000000000000000000000000000000\" query all Returns Number : QUANTITY , -snailblock number blockminer : QUANTITY , -snailblock miner address and reward committeReward : Array , -committee member address and reward for all fruit Address : DATA , 20 Bytes - address of the delegate. Amount : QUANTITY , - reward amount Staking : QUANTITY , - staking amount when cal reward foundationReward : -foundation reward fruitminer : -fruit miner address and reward for each fruit time : -miner snail block time Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getChainRewardContent\", \"params\":[\"0x9b44\",\"0x0000000000000000000000000000000000000000\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { Number: \"0x9b40\", blockminer: { Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 52432209984299000000, Staking: null }, committeReward: [{ Items: [{...}, {...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }], foundationReward: { Address: \"0xda79b1c2645750c655d848e04c27e2cd9d263c48\", Amount: 0, Staking: null }, fruitminer: [{ Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 26216104992149000000, Staking: null }], time: \"0x5e6036ac\" } } Impawn impawn_getAllStakingAccount Returns information about all validator staking info, contain staking count. Parameters QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ 'latest' ] Returns delegateCount : QUANTITY , the all delegate count. stakerCount : QUANTITY - the all staking member count. stakers : Array , detail validator member info. committee : TAG - true it select as committee. false it no not select delegation : Array , detail delegate member info of this staker. delegation : QUANTITY - delagate count. saAddress : DATA , 20 Bytes - address of the validator. unit : Object - contain detail delegate info. validDelegate : QUANTITY - delagate count not contain redeem info. fee : QUANTITY - validator fee for share reward with delegate. id : QUANTITY , validator index. modify : Object , update fee and pub key. staking : DATA , staking count. unit : Object , contain detail staking info. validStaking : QUANTITY , staker count not contain redeem info. votePubKey : DATA , 32 Bytes - bft communication key. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getAllStakingAccount\",\"params\":[\"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":{ delegateCount: 0, stakerCount: 4, stakers: [{ committee: false, delegation: { 0: { delegate: 10000000000000000000, saAddress: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", unit: { address: \"0x7c357530174275dd30e46319b89f71186256e4f7\", redeemInfo: {}, value: {...} }, validDelegate: 10000000000000000000 } }, fee: 0, id: 0, modify: { fee: 0, votePubKey: \"0x\" }, staking: 3.0172e+22, unit: { address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", redeemInfo: {...}, value: {...} }, validStaking: 3.0172e+22, votePubKey: \"0x040743b25066dac37d3552e63c9ba3325884ba28d0906ce5fd9a18a55312ef478c2b9c33f6ef519c1fd0e42884a25bf2be1ea83f3354a3e54243d521c37865c062\" }, { committee: false, delegation: {}, fee: 0, id: 1, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0x6d348e0188cc2596aaa4046a1d50bb3ba50e8524\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x04a8bd50e35f99f77edda08e333339ab49db89f0c81f49a37e7d4ddb84a06738ff54becf677f3ea6d9abdd321e50d77680871f408dcb7a17dfa7f0d8bb5229d831\" }, { committee: false, delegation: {}, fee: 0, id: 2, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0xe803895897c3ccd35315b2e41c95f817543811a5\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x0439d8ca80e0f4bc3a1aa203fa280909f426db90436dabcc9a1a3ef8efaa9d0ea8a9647eaa821b8346a92eed28cd707cb062ec54b31b819d0bf03af79fd63ea40e\" }, { committee: false, delegation: {}, fee: 0, id: 3, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0x3f739ffd8a59965e07e1b8d7cca938125bce8cfb\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x046bf0f9bb43ac46efe9bd58a465a4b2f9cf8962b728907471f2b4b51a899c3eb166b4a3ee69eac012abc39cd91451dd20089b1371c2acf6e18066d0e8c2cab717\" }] } } impawn_getStakingAsset Returns information about deposit info by address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns address : DATA , 20 Bytes - address of the validator. lockValue : Array , detail validator member info. amount : QUANTITY - deposit amount value. height : QUANTITY , deposit tx height. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getStakingAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", stakingValue: [{ amount: 3.0172e+22, height: 122380 }] }] } impawn_getLockedAsset Returns information about cancel info by address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns address : DATA , 20 Bytes - address of the validator. lockValue : Array , detail validator member info. amount : QUANTITY - lock amount value. epochID : QUANTITY , you deposit belong to epoch. height : QUANTITY , which height you can withdraw. locked : TAG - true instant withdraw. false after height can withdraw. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getLockedAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", lockValue: [{ amount: 1000000000000000000, epochID: 30, height: 115381, locked: false }] }] } impawn_getAllCancelableAsset Returns information about can cancel count info by address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns address : DATA , 20 Bytes - address of the validator. value : QUANTITY , deposit count that you can cancel. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getAllCancelableAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", value: 3.0172e+22 }] } impawn_getStakingAccount Returns information about certain staking info by address. Parameters DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ] Returns committee : TAG - true it select as committee. false it no not select delegation : Array , detail delegate member info of this staker. - delegation : QUANTITY - delagate count. - saAddress : DATA , 20 Bytes - address of the validator. - unit : Object - contain detail delegate info. - validDelegate : QUANTITY - delagate count not contain redeem info. fee : QUANTITY - validator fee for share reward with delegate. id : QUANTITY , validator index. modify : Object , update fee and pub key. staking : DATA , staking count. unit : Object , contain detail staking info. validStaking : QUANTITY , staker count not contain redeem info. votePubKey : DATA , 32 Bytes - bft communication key. Example // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getStakingAccount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":{ committee: false, delegation: {}, fee: 0, id: {}, modify: { fee: 0, votePubKey: \"0x\" }, staking: 3.0172e+22, unit: { address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", redeemInfo: { 0: { amount: \"0xde0b6b3a7640000\", epochID: 30, state: 8 } }, value: { 0: { amount: \"0x663a09d1de48df00000\", height: \"0x1de0c\", state: 2 } } }, validStaking: 3.0172e+22, votePubKey: \"0x040743b25066dac37d3552e63c9ba3325884ba28d0906ce5fd9a18a55312ef478c2b9c33f6ef519c1fd0e42884a25bf2be1ea83f3354a3e54243d521c37865c062\" } } Eth In order for more developers to participate in the truechain ecosystem and be friendly to developers, truechain is compatible with ethereum. Please refer to the instructions of ethereum for detailed rules of use","title":"RPC API"},{"location":"source/taiyuepublic/RPC-API/#json-rpc-api","text":"JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON ( RFC 4627 ) as data format. Getrue has experimental pub/sub support. See this page for more information.","title":"JSON RPC API"},{"location":"source/taiyuepublic/RPC-API/#javascript-api","text":"To talk to an truechain node from inside a JavaScript application use the web3.js library, which gives a convenient interface for the RPC methods.","title":"JavaScript API"},{"location":"source/taiyuepublic/RPC-API/#json-rpc-endpoint","text":"Default JSON-RPC endpoints: http://localhost:8545","title":"JSON-RPC Endpoint"},{"location":"source/taiyuepublic/RPC-API/#go","text":"You can start the HTTP JSON-RPC with the --rpc flag taipublic --rpc change the default port (8545) and listing address (localhost) with: taipublic --rpc --rpcaddr <ip> --rpcport <portnumber> If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail: taipublic --rpc --rpccorsdomain \"http://localhost:3000\"","title":"Go"},{"location":"source/taiyuepublic/RPC-API/#json-rpc-support","text":"JSON-RPC 2.0/ Batch requests/ HTTP/ IPC/ WS","title":"JSON-RPC support"},{"location":"source/taiyuepublic/RPC-API/#the-default-block-parameter","text":"The following methods have an extra default block parameter: tai_getBalance tai_getCode tai_getTransactionCount tai_getStorageAt tai_call impawn_getAllStakingAccount impawn_getStakingAsset impawn_getLockedAsset impawn_getAllCancelableAsset impawn_getStakingAccount When requests are made that act on the state of truechain, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX String - an integer block number String \"earliest\" for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions","title":"The default block parameter"},{"location":"source/taiyuepublic/RPC-API/#curl-examples-explained","text":"The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:8545","title":"Curl Examples Explained"},{"location":"source/taiyuepublic/RPC-API/#json-rpc-methods","text":"etrue eth impawn web3 net protocolVersion protocolVersion getAllStakingAccount clientVersion version syncing syncing getStakingAsset sha3 peerCount coinbase coinbase getLockedAsset listening mining mining getAllCancelableAsset hashrate hashrate getStakingAccount gasPrice gasPrice accounts accounts blockNumber blockNumber getBalance getBalance getStorageAt getStorageAt getTransactionCount getTransactionCount getBlockTransactionCountByHash getBlockTransactionCountByHash getBlockTransactionCountByNumber getBlockTransactionCountByNumber getCode getCode sign sign sendTransaction sendTransaction sendRawTransaction sendRawTransaction sendTrueRawTransaction - call call estimateGas estimateGas getBlockByHash getBlockByHash getBlockByNumber getBlockByNumber getTransactionByHash getTransactionByHash getTransactionByBlockHashAndIndex getTransactionByBlockHashAndIndex getTransactionByBlockNumberAndIndex getTransactionByBlockNumberAndIndex getTransactionReceipt getTransactionReceipt newFilter newFilter newBlockFilter newBlockFilter newPendingTransactionFilter newPendingTransactionFilter uninstallFilter uninstallFilter getFilterChanges getFilterChanges getFilterLogs getFilterLogs getLogs getLogs getWork getWork submitWork submitWork submitHashrate submitHashrate committeeNumber - fruitNumber - rewardSnailBlock - snailBlockNumber - getCommittee - getFruitByNumber - getFruitByHash - getRewardBlock - getSnailBlockByNumber - getSnailBlockByHash - getDataset - getSnailRewardContent -","title":"JSON-RPC methods"},{"location":"source/taiyuepublic/RPC-API/#json-rpc-api-reference","text":"","title":"JSON RPC API Reference"},{"location":"source/taiyuepublic/RPC-API/#web3","text":"","title":"web3"},{"location":"source/taiyuepublic/RPC-API/#web3_clientversion","text":"Returns the current client version.","title":"web3_clientVersion"},{"location":"source/taiyuepublic/RPC-API/#parameters","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns","text":"String - The current client version.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\": \"Getrue/v1.1.0-unstable-d4c05e98/linux-amd64/go1.10\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#web3_sha3","text":"Returns Keccak-256 ( not the standardized SHA3-256) of the given data.","title":"web3_sha3"},{"location":"source/taiyuepublic/RPC-API/#parameters_1","text":"DATA - the data to convert into a SHA3 hash.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters","text":"params: [ \"0x68656c6c6f20776f726c64\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_1","text":"DATA - The SHA3 result of the given string.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_1","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#net","text":"","title":"net"},{"location":"source/taiyuepublic/RPC-API/#net_version","text":"Returns the current network id.","title":"net_version"},{"location":"source/taiyuepublic/RPC-API/#parameters_2","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_2","text":"String - The current network id. - \"19330\" : Truechain Mainnet - \"18928\" : Testnet - \"100\" : Devnet","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_2","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"19330\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#net_listening","text":"Returns true if client is actively listening for network connections.","title":"net_listening"},{"location":"source/taiyuepublic/RPC-API/#parameters_3","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_3","text":"Boolean - true when listening, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_3","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\":\"2.0\", \"result\":true }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#net_peercount","text":"Returns number of peers currently connected to the client.","title":"net_peerCount"},{"location":"source/taiyuepublic/RPC-API/#parameters_4","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_4","text":"QUANTITY - integer of the number of connected peers.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_4","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":74}' // Result { \"id\":74, \"jsonrpc\": \"2.0\", \"result\": \"0x2\" // 2 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue","text":"","title":"Etrue"},{"location":"source/taiyuepublic/RPC-API/#etrue_protocolversion","text":"Returns the current truechain protocol version.","title":"etrue_protocolVersion"},{"location":"source/taiyuepublic/RPC-API/#parameters_5","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_5","text":"String - The current truechain protocol version.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_5","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_protocolVersion\",\"params\":[],\"id\":67}' // Result { \"id\":67, \"jsonrpc\": \"2.0\", \"result\": \"0x40\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_syncing","text":"Returns an object with data about the sync status or false .","title":"etrue_syncing"},{"location":"source/taiyuepublic/RPC-API/#parameters_6","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_6","text":"Object|Boolean , An object with sync status data or FALSE , when not syncing: - currentFastBlock : QUANTITY -current block number(fastchain) - currentSnailBlock : QUANTITY -current block number(snailchain) - highestFastBlock : QUANTITY - already highest block number(fastchain) - highestSnailBlock : QUANTITY -already highest block number(snailchain) - knownStates : String -already know state - pulledStates : String -already complete state - startingFastBlock : QUANTITY -start sync block number(fastchain) - startingSnailBlock : QUANTITY -start sync block number(snailchain)","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_6","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_syncing\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"currentFastBlock\": \"0x2e9a\", \"currentSnailBlock\": \"0xab\", \"highestFastBlock\": \"0x3a3d2\", \"highestSnailBlock\": \"0xab7\", \"knownStates\": \"0x0\", \"pulledStates\": \"0x0\", \"startingFastBlock\": \"0x2e98\", \"startingSnailBlock\": \"0x0\" } } // Or when not syncing { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": false }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_coinbase","text":"Returns the client coinbase address.","title":"etrue_coinbase"},{"location":"source/taiyuepublic/RPC-API/#parameters_7","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_7","text":"DATA , 20 bytes - the current coinbase address.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_7","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_coinbase\",\"params\":[],\"id\":64}' // Result { \"id\":64, \"jsonrpc\": \"2.0\", \"result\": \"0xc94770007dda54cF92009BFF0dE90c06F603a09f\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_mining","text":"Returns true if client is actively mining new blocks.","title":"etrue_mining"},{"location":"source/taiyuepublic/RPC-API/#parameters_8","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_8","text":"Boolean - returns true of the client is mining, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_8","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_mining\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_hashrate","text":"Returns the number of hashes per second that the node is mining with.","title":"etrue_hashrate"},{"location":"source/taiyuepublic/RPC-API/#parameters_9","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_9","text":"QUANTITY - number of hashes per second.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_9","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_hashrate\",\"params\":[],\"id\":71}' // Result { \"id\":71, \"jsonrpc\": \"2.0\", \"result\": \"0x38a\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gasprice","text":"Returns the current price per gas in wei.","title":"etrue_gasPrice"},{"location":"source/taiyuepublic/RPC-API/#parameters_10","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_10","text":"QUANTITY - integer of the current gas price in wei.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_10","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_gasPrice\",\"params\":[],\"id\":73}' // Result { \"id\":73, \"jsonrpc\": \"2.0\", \"result\": \"0xf4240\" // 1000000 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_accounts","text":"Returns a list of addresses owned by client.","title":"etrue_accounts"},{"location":"source/taiyuepublic/RPC-API/#parameters_11","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_11","text":"Array of DATA , 20 Bytes - addresses owned by the client.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_11","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_accounts\",\"params\":[],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": [\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\"] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_blocknumber","text":"Returns the number of most recent block.","title":"etrue_blockNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_12","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_12","text":"QUANTITY - integer of the current block number the client is on.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_12","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_blockNumber\",\"params\":[],\"id\":1}' // Result { \"id\":83, \"jsonrpc\": \"2.0\", \"result\": \"0xc94\" // 1207 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getbalance","text":"Returns the balance of the account of given address.","title":"etrue_getBalance"},{"location":"source/taiyuepublic/RPC-API/#parameters_13","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_1","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_13","text":"QUANTITY - integer of the current balance in wei.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_13","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getstorageat","text":"Returns the value from a storage position at a given address.","title":"etrue_getStorageAt"},{"location":"source/taiyuepublic/RPC-API/#parameters_14","text":"DATA , 20 Bytes - address of the storage. QUANTITY - integer of the position in the storage. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_14","text":"DATA - the value at this storage position.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_14","text":"Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by address 0x391694e7e0b0cce554cb130d723a9d27458f9298 . contract Storage { uint pos0; mapping(address => uint) pos1; function Storage() { pos0 = 1234; pos1[msg.sender] = 5678; } } Retrieving the value of pos0 is straight forward: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"etrue_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x00000000000000000000000000000000000000000000000000000000000004d2\"} Retrieving an element of the map is harder. The position of an element in the map is calculated with: keccack(LeftPad32(key, 0), LeftPad32(map position, 0)) This means to retrieve the storage on pos1[\"0x391694e7e0b0cce554cb130d723a9d27458f9298\"] we need to calculate the position with: keccak(decodeHex(\"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\")) The getrue console which comes with the web3 library can be used to make the calculation: > var key = \"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + \"0000000000000000000000000000000000000000000000000000000000000001\" undefined > web3.sha3(key, {\"encoding\": \"hex\"}) \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\" Now to fetch the storage: curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"etrue_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\", \"latest\"], \"id\": 1}' localhost:8545 {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x000000000000000000000000000000000000000000000000000000000000162e\"}","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gettransactioncount","text":"Returns the number of transactions sent from an address.","title":"etrue_getTransactionCount"},{"location":"source/taiyuepublic/RPC-API/#parameters_15","text":"DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_2","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' // state at the latest block ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_15","text":"QUANTITY - integer of the number of transactions send from this address.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_15","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionCount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\",\"latest\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getblocktransactioncountbyhash","text":"Returns the number of transactions in a block from a block matching the given block hash.","title":"etrue_getBlockTransactionCountByHash"},{"location":"source/taiyuepublic/RPC-API/#parameters_16","text":"DATA , 32 Bytes - hash of a block.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_3","text":"params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_16","text":"QUANTITY - integer of the number of transactions in this block.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_16","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockTransactionCountByHash\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc\" // 11 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getblocktransactioncountbynumber","text":"Returns the number of transactions in a block matching the given block number.","title":"etrue_getBlockTransactionCountByNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_17","text":"QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter .","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_4","text":"params: [ '0xe8', // 232 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_17","text":"QUANTITY - integer of the number of transactions in this block.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_17","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockTransactionCountByNumber\",\"params\":[\"0xe8\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa\" // 10 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getcode","text":"Returns code at a given address.","title":"etrue_getCode"},{"location":"source/taiyuepublic/RPC-API/#parameters_18","text":"DATA , 20 Bytes - address. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter .","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_5","text":"params: [ '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', '0x2' // 2 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_18","text":"DATA - the code from the given address.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_18","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getCode\",\"params\":[\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x2\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_sign","text":"The sign method calculates an Truechain specific signature with: sign(keccak256(\"\\x19Truechain Signed Message:\\n\" + len(message) + message))) . By adding a prefix to the message makes the calculated signature recognisable as an Truechain specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note the address to sign with must be unlocked.","title":"etrue_sign"},{"location":"source/taiyuepublic/RPC-API/#parameters_19","text":"account, message DATA , 20 Bytes - address. DATA , N Bytes - message to sign.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_19","text":"DATA : Signature","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_19","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sign\",\"params\":[\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" } An example how to use solidity ecrecover to verify the signature calculated with etrue_sign can be found here . The contract is deployed on the testnet Ropsten and Rinkeby.","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_sendtransaction","text":"Creates new message call transaction or a contract creation, if the data field contains code.","title":"etrue_sendTransaction"},{"location":"source/taiyuepublic/RPC-API/#parameters_20","text":"Object - The transaction object from : DATA , 20 Bytes - The address the transaction is send from. to : DATA , 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas : QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice : QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce : QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_6","text":"params: [{ \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\", \"gas\": \"0x76c0\", // 30400 \"gasPrice\": \"0x9184e72a000\", // 10000000000000 \"value\": \"0x9184e72a\", // 2441406250 \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\" }]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_20","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_20","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_sendrawtransaction","text":"Creates new message call transaction or a contract creation for signed transactions.","title":"etrue_sendRawTransaction"},{"location":"source/taiyuepublic/RPC-API/#parameters_21","text":"DATA , The signed transaction data.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_7","text":"params: [\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_21","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_21","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_sendtruerawtransaction","text":"When transaction contain payer or fee,Creates new message call transaction or a contract creation for signed transactions.","title":"etrue_sendTrueRawTransaction"},{"location":"source/taiyuepublic/RPC-API/#parameters_22","text":"DATA , The signed transaction data.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_8","text":"params: [\"0xf8c60183989680834c4b4094bea78fea68dba84363d0f9b79219ddf5991ccb2a880de0b6b3a76400008094cfb7ec3ac64a3afde043a5b32212d0b9c25b5d808081eba07cc4b8300a8ab6a7d6aee713f6dc61311848bf827794c370873ca334e7cc2cc1a05cd365ffc46cada820911e3c11123e36245ed1cec7943038632715a89a421b0281eca037d6e60016bd70371fd45a2fadd63f8824b34331f2cb5f7fe69f04df7f6d9caea04e05dda8cffa3e453aa474f955eef97fe63e9c9721860aaea379a0ace111fd16\"]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_22","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use etrue_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_22","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_sendTrueRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0xc7509ef7672e1c1d59cec2854d3d074d442984382bd03c665c2e82ebfdacc25e\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_call","text":"Executes a new message call immediately without creating a transaction on the block chain.","title":"etrue_call"},{"location":"source/taiyuepublic/RPC-API/#parameters_23","text":"Object - The transaction call object from : DATA , 20 Bytes - (optional) The address the transaction is sent from. to : DATA , 20 Bytes - The address the transaction is directed to. gas : QUANTITY - (optional) Integer of the gas provided for the transaction execution. etrue_call consumes zero gas, but this parameter may be needed by some executions. gasPrice : QUANTITY - (optional) Integer of the gasPrice used for each paid gas value : QUANTITY - (optional) Integer of the value sent with this transaction data : DATA - (optional) Hash of the method signature and encoded parameters QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_23","text":"DATA - the return value of executed contract.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_23","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_call\",\"params\":[{see etrue_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_estimategas","text":"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.","title":"etrue_estimateGas"},{"location":"source/taiyuepublic/RPC-API/#parameters_24","text":"See etrue_call parameters, expect that all properties are optional. If no gas limit is specified getrue uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_24","text":"QUANTITY - the amount of gas used.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_24","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_estimateGas\",\"params\":[{see etrue_sendTransaction parameter}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x5208\" // 21000 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getblockbyhash","text":"Returns information about a block by hash.","title":"etrue_getBlockByHash"},{"location":"source/taiyuepublic/RPC-API/#parameters_25","text":"DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_9","text":"params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_25","text":"Object - A block object, or null when no block was found: SnailHash : DATA , 32 Bytes - hash of the snail block. SnailNumber : QUANTITY - the snail block number. committeeRoot : DATA , 32 Bytes - hash of the committtee. extraData : DATA - the \"extra data\" field of this block. gasLimit : QUANTITY - the maximum gas allowed in this block. gasUsed : QUANTITY - the total used gas by all transactions in this block. hash : DATA , 32 Bytes - hash of the block. null when its pending block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. maker : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. number : QUANTITY - the block number. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the block. signs : Array , committee signs. fastHash : DATA , 32 Bytes - hash of the fast block. fastHeight : QUANTITY - the fast block number. result : QUANTITY - the vote. sign : DATA , 32 Bytes - committee sign hash. size : QUANTITY - integer the size of this block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the block. switchInfos : Array , committee member switch. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the block.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_25","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockByHash\",\"params\":[\"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d15273312\", true],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { {\"SnailHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"SnailNumber\":\"0x0\", \"committeeRoot\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"extraData\":\"0x\", \"gasLimit\":\"0xb71b00\",\"gasUsed\":\"0x0\", \"hash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"maker\":\"0x49fc88c2576b4f015cf75dae80e87a815d832888\", \"number\":\"0xab4\", \"parentHash\":\"0x0832d972f5b16ddefc3de154cc0a5a4ea16be2991be19bd740ae3486a83ff59f\", \"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\", \"signs\":[{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\", \"fastHeight\":\"0xab4\",\"result\":1, \"sign\":\"0x7a07be32cce585b6d74e6134022c973b6433dcb87447ec456712f5d3b40b8907403ea24c81309aa090e7469fc761372de2e2d32beddf0031eed1aa557185cbc101\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x4f1033692e2f354409002ff0ce9eb20d4edb676f6c02dc58223c9d2d15eebcaf4071c2efc630a44d78865da714ae694cd690d4b0d02b393d64ca377c63594a6e01\"},{\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0xc8303a5c76fb70e834b63e70180af9720ac09eda59327a0e6be3ab85fcfcbb9b40434ae7dcd23df13fe6a55c1967d29de7db5c5e545674b6849a1a4eabb59b4b00\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x041df0a05407cb302695babfeff03d669d300e76cc2d33305512dc0859aeb4dc47b68065b5d62bd88a6b60e3993ed07ae0a64223681084c5c958cdd2041f42a100\"}, {\"fastHash\":\"0xd58570f394347e6b73c4beeabfb75f8b4a6c6f08c71f159a233309365836e3d2\",\"fastHeight\":\"0xab4\",\"result\":1,\"sign\":\"0x8b8c97a4155c2b687b0eb90e1a716ede85c1b32ec7b164c0fa721f1b18ada4c41bc46373419d625ef8f0368b123bf86a60b07c168ebb5b97de4b9095847fad5001\"}],\"size\":\"0x40a\",\"stateRoot\":\"0x5c7127948504801c7db0ef17df87950b471a94d6f5332d39ceff41298f3f6b74\", \"switchInfos\":[],\"timestamp\":\"0x5ce25206\",\"transactions\":[], \"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"} } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getblockbynumber","text":"Returns information about a block by block number.","title":"etrue_getBlockByNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_26","text":"QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_10","text":"params: [ '0x1b4', // 436 true ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_26","text":"See etrue_getBlockByHash","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_26","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getBlockByNumber\",\"params\":[\"0x1b4\", true],\"id\":1}' Result see etrue_getBlockByHash","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gettransactionbyhash","text":"Returns the information about a transaction requested by transaction hash.","title":"etrue_getTransactionByHash"},{"location":"source/taiyuepublic/RPC-API/#parameters_27","text":"DATA , 32 Bytes - hash of a transaction","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_11","text":"params: [ \"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_27","text":"Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. null when its pending. blockNumber : QUANTITY - block number where this transaction was in. null when its pending. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Wei. hash : DATA , 32 Bytes - hash of the transaction. input : DATA - the data send along with the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. value : QUANTITY - value transferred in Wei. v : QUANTITY - ECDSA recovery id r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s payer : DATA , 20 Bytes - address of the payer. fee : QUANTITY - transaction fee in Wei. pv : QUANTITY - ECDSA recovery id pr : DATA , 32 Bytes - ECDSA signature pr ps : DATA , 32 Bytes - ECDSA signature ps","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_27","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByHash\",\"params\":[\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\"],\"id\":1}' // Result { \"jsonrpc\":\"2.0\", \"id\":1, \"result\":{ \"blockHash\":\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"blockNumber\":\"0x5daf3b\", // 6139707 \"from\":\"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d\", \"gas\":\"0xc350\", // 50000 \"gasPrice\":\"0x4a817c800\", // 20000000000 \"hash\":\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\", \"input\":\"0x68656c6c6f21\", \"nonce\":\"0x15\", // 21 \"to\":\"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb\", \"transactionIndex\":\"0x41\", // 65 \"value\":\"0xf3dbb76162000\", // 4290000000000000 \"v\":\"0x25\", // 37 \"r\":\"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea\", \"s\":\"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c\" \"payer\":null, \"fee\":null, \"pv\":null, \"pr\":null, \"ps\":null } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gettransactionbyblockhashandindex","text":"Returns information about a transaction by block hash and transaction index position.","title":"etrue_getTransactionByBlockHashAndIndex"},{"location":"source/taiyuepublic/RPC-API/#parameters_28","text":"DATA , 32 Bytes - hash of a block. QUANTITY - integer of the transaction index position.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_12","text":"params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', '0x0' // 0 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_28","text":"See etrue_getTransactionByHash","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_28","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByBlockHashAndIndex\",\"params\":[\"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\", \"0x0\"],\"id\":1}' Result see etrue_getTransactionByHash","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gettransactionbyblocknumberandindex","text":"Returns information about a transaction by block number and transaction index position.","title":"etrue_getTransactionByBlockNumberAndIndex"},{"location":"source/taiyuepublic/RPC-API/#parameters_29","text":"QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . QUANTITY - the transaction index position.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_13","text":"params: [ '0x29c', // 668 '0x0' // 0 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_29","text":"See etrue_getTransactionByHash","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_29","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}' Result see etrue_getTransactionByHash","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_gettransactionreceipt","text":"Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions.","title":"etrue_getTransactionReceipt"},{"location":"source/taiyuepublic/RPC-API/#parameters_30","text":"DATA , 32 Bytes - hash of a transaction","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_14","text":"params: [ '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_30","text":"Object - A transaction receipt object, or null when no receipt was found: transactionHash : DATA , 32 Bytes - hash of the transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. blockHash : DATA , 32 Bytes - hash of the block where this transaction was in. blockNumber : QUANTITY - block number where this transaction was in. from : DATA , 20 Bytes - address of the sender. to : DATA , 20 Bytes - address of the receiver. null when it's a contract creation transaction. cumulativeGasUsed : QUANTITY - The total amount of gas used when this transaction was executed in the block. gasUsed : QUANTITY - The amount of gas used by this specific transaction alone. contractAddress : DATA , 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null . to : DATA , 20 Bytes - The address the transaction is directed to. logs : Array - Array of log objects, which this transaction generated. logsBloom : DATA , 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. It also returns either : root : DATA 32 bytes of post-transaction stateroot (pre Byzantium) status : QUANTITY either 1 (success) or 0 (failure)","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_30","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getTransactionReceipt\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": { transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238', transactionIndex: '0x1', // 1 blockNumber: '0xb', // 11 blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b', cumulativeGasUsed: '0x33bc', // 13244 gasUsed: '0x4dc', // 1244 contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155', // or null, if none was created logs: [{ // logs as returned by getFilterLogs, etc. }, ...], logsBloom: \"0x00...0\", // 256 byte bloom filter status: '0x1' } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_newfilter","text":"Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call etrue_getFilterChanges .","title":"etrue_newFilter"},{"location":"source/taiyuepublic/RPC-API/#a-note-on-specifying-topic-filters","text":"Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: * [] \"anything\" * [A] \"A in first position (and anything after)\" * [null, B] \"anything in first position AND B in second position (and anything after)\" * [A, B] \"A in first position AND B in second position (and anything after)\" * [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"","title":"A note on specifying topic filters:"},{"location":"source/taiyuepublic/RPC-API/#parameters_31","text":"Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_15","text":"params: [{ \"fromBlock\": \"0x1\", \"toBlock\": \"0x2\", \"address\": \"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", null, [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\"]] }]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_31","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_31","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newFilter\",\"params\":[{\"topics\":[\"0x0000000000000000000000000000000000000000000000000000000012341234\"]}],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_newblockfilter","text":"Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call etrue_getFilterChanges .","title":"etrue_newBlockFilter"},{"location":"source/taiyuepublic/RPC-API/#parameters_32","text":"None","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_32","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_32","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newBlockFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_newpendingtransactionfilter","text":"Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call etrue_getFilterChanges .","title":"etrue_newPendingTransactionFilter"},{"location":"source/taiyuepublic/RPC-API/#parameters_33","text":"None","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_33","text":"QUANTITY - A filter id.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_33","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_newPendingTransactionFilter\",\"params\":[],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" // 1 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_uninstallfilter","text":"Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with etrue_getFilterChanges for a period of time.","title":"etrue_uninstallFilter"},{"location":"source/taiyuepublic/RPC-API/#parameters_34","text":"QUANTITY - The filter id.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_16","text":"params: [ \"0xb\" // 11 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_34","text":"Boolean - true if the filter was successfully uninstalled, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_34","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_uninstallFilter\",\"params\":[\"0xb\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getfilterchanges","text":"Polling method for a filter, which returns an array of logs which occurred since last poll.","title":"etrue_getFilterChanges"},{"location":"source/taiyuepublic/RPC-API/#parameters_35","text":"QUANTITY - the filter id.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_17","text":"params: [ \"0x16\" // 22 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_35","text":"Array - Array of log objects, or an empty array if nothing has changed since last poll. For filters created with etrue_newBlockFilter the return are block hashes ( DATA , 32 Bytes), e.g. [\"0x3454645634534...\"] . For filters created with etrue_newPendingTransactionFilter the return are transaction hashes ( DATA , 32 Bytes), e.g. [\"0x6345343454645...\"] . For filters created with etrue_newFilter logs are objects with following params: removed : TAG - true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex : QUANTITY - integer of the log index position in the block. null when its pending log. transactionIndex : QUANTITY - integer of the transactions index position log was created from. null when its pending log. transactionHash : DATA , 32 Bytes - hash of the transactions this log was created from. null when its pending log. blockHash : DATA , 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log. blockNumber : QUANTITY - the block number where this log was in. null when its pending. null when its pending log. address : DATA , 20 Bytes - address from which this log originated. data : DATA - contains the non-indexed arguments of the log. topics : Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity : The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256) ), except you declared the event with the anonymous specifier.)","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_35","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getFilterChanges\",\"params\":[\"0x16\"],\"id\":73}' // Result { \"id\":1, \"jsonrpc\":\"2.0\", \"result\": [{ \"logIndex\": \"0x1\", // 1 \"blockNumber\":\"0x1b4\", // 436 \"blockHash\": \"0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"transactionHash\": \"0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\", \"transactionIndex\": \"0x0\", // 0 \"address\": \"0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\", \"data\":\"0x0000000000000000000000000000000000000000000000000000000000000000\", \"topics\": [\"0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\"] },{ ... }] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getfilterlogs","text":"Returns an array of all logs matching filter with given id.","title":"etrue_getFilterLogs"},{"location":"source/taiyuepublic/RPC-API/#parameters_36","text":"QUANTITY - The filter id.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_18","text":"params: [ \"0x16\" // 22 ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_36","text":"See etrue_getFilterChanges","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_36","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getFilterLogs\",\"params\":[\"0x16\"],\"id\":74}' Result see etrue_getFilterChanges","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getlogs","text":"Returns an array of all logs matching a given filter object.","title":"etrue_getLogs"},{"location":"source/taiyuepublic/RPC-API/#parameters_37","text":"Object - The filter options: fromBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. toBlock : QUANTITY|TAG - (optional, default: \"latest\" ) Integer block number, or \"latest\" for the last mined block or \"pending\" , \"earliest\" for not yet mined transactions. address : DATA|Array , 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics : Array of DATA , - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. blockhash : DATA , 32 Bytes - (optional) With the addition of EIP-234 (Getrue >= v1.8.13 or Parity >= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash . Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash . If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_19","text":"params: [{ \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"] }]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_37","text":"See etrue_getFilterChanges","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_37","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getLogs\",\"params\":[{\"topics\":[\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]}],\"id\":74}' Result see etrue_getFilterChanges","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getwork","text":"Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").","title":"etrue_getWork"},{"location":"source/taiyuepublic/RPC-API/#parameters_38","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_38","text":"Array - Array with the following properties: 1. DATA , 32 Bytes - current snailBlock header without nonce 2. DATA , 32 Bytes - the seed hash used for the DAG. 3. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / fruit difficulty. 4. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / snailBlock difficulty.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_38","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"etrue_getWork\",\"params\":[],\"id\":73}' // Result { \"jsonrpc\": \"2.0\", \"id\": 73, \"result\": [\"0xbcdcb8533dcf88b736f5b44f777250922f0f0472d4dd34a5a1b445a0c47aceed\", \"58bc067579760d307143ec1cd416eb3814110d29bf21aba0cd18586e2f038791\", \"0x0000000000000000000000000000000000000000000000000000000000000064\", \"0x0000000000000000000000000000000000000000000000000000000000002710\"] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_submitwork","text":"Used for submitting a proof-of-work solution.","title":"etrue_submitWork"},{"location":"source/taiyuepublic/RPC-API/#parameters_39","text":"DATA , 8 Bytes - The nonce found (64 bits) DATA , 32 Bytes - The header's pow-hash (256 bits) DATA , 32 Bytes - The mix digest (256 bits)","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_20","text":"params: [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_39","text":"Boolean - returns true if the provided solution is valid, otherwise false .","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_39","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_submitWork\", \"params\":[\"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_submithashrate","text":"Used for submitting mining hashrate.","title":"etrue_submitHashrate"},{"location":"source/taiyuepublic/RPC-API/#parameters_40","text":"Hashrate , a hexadecimal string representation (32 bytes) of the hash rate ID , String - A random hexadecimal(32 bytes) ID identifying the client","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_21","text":"params: [ \"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_40","text":"Boolean - returns true if submitting went through succesfully and false otherwise.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_40","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_submitHashrate\", \"params\":[\"0x500000\", \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"],\"id\":73}' // Result { \"id\":73, \"jsonrpc\":\"2.0\", \"result\": true }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_committeenumber","text":"get current committee number","title":"etrue_committeeNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_41","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_41","text":"QUANTITY - integer of the current committee number.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_41","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_committeeNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": 8 }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_fruitnumber","text":"get current fruit number","title":"etrue_fruitNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_42","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_42","text":"QUANTITY - integer of the current fruit number.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_42","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_fruitNumber\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": \"0x1975f\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_rewardsnailblock","text":"get current reward snalBlock infomation","title":"etrue_rewardSnailBlock"},{"location":"source/taiyuepublic/RPC-API/#parameters_43","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_43","text":"Object - A snail block object, or null when no snail reward block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fastNumber : QUANTITY - default 0. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail reward number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_43","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_rewardSnailBlock\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x193a0\", \"difficulty\": \"0x2710\", \"endFruitNumber\": \"0x193db\", \"extraData\": \"0xd9820a018667657472756588676f312e31302e38856c696e7578\", \"fastNumber\": 0, \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x7dad8df99080412919a4e0018c980e6bf40e64bff5e09f0ec45efd63530ed95e\", \"fruits\": [\"0x421cf9aa22145c141d3235a5b19c73d10613cc782221f279c3a136f136ac811e\", \"0xb6fdad4a0287102adba3b5bbe9789598694c028491de7c459f47248ee1844132\", \"0xa784a38af019ea321c725bf6b6ed61398bb86d4b20289c0a6ef54a20eced554c\", \"0x8fe6337b88ee4f19514670d49f5a64e736edfd7ae8c34fecc6d54ce923325991\", \"0x9dcbc81a1e764f6c0a6591e72000776dad6752be2d9c65b77a2157bc88a65333\", \"0x5cbac30e3a8d3246bbb84b570aecfa69b1d364738e4223fa17fe047b307ed7f2\", \"0x75115e8cdcfba043c57c2a10c6e781ab582f85b2e715cbacc42e3d2f96bc7cac\", \"0x08fe101b8ef2304965b5008267ee321ddbc48b1fd210b4dff81441e9c57f2e0f\", \"0xe31577b98c384074b37ad1d9cad88d31483b152ed96106e17f9864ded8052f62\", \"0xce3f340eb5c0582e82f5f9c550373ba069af140b50eabaf7a044717eada32536\", \"0x879f73afc3cb734dd9b5b7fe7687b6f8d6a5b8e7d20c4f730dbd0f84590ac0de\", \"0xd0c3c2c31f6b19c618c709968624ca02b23341b01178f9de23b43a406755c93e\", \"0xaa1285332874bd67c7b37b7b81f66e0b3fe6b38b176d22a0ee0349ef3120f9c4\", \"0xaed6ff91f2f1de5fcd7880797b841c61458bd59fe3f4bd4e80823d99a555049f\", \"0x46e8303c548f82e59741ee94ced70a0df1500abef9d667f131a39e71b9aaff0c\", \"0xedc6d3a94624bd914435119493c5d73545c854385758e86cb1b2c6445de7a6d4\", \"0x46a42a82461c5b92ef7ecf86c6d84dd8a7abeddd72a444467c109da53de26f10\", \"0xf23a03a1698426280449512bf19f731c56051cd19d04976009d7d2e03d6294a4\", \"0x4f2b30f026d64d56ec8d0fc69ef0959bbceeff648eafe8ff3c711af4d0f796eb\", \"0xbcfd45ccd7456fdb5dc3d19a2bd65f4b37530e4772fb6a6364376df3dee8b883\", \"0x3c1ce1153fc784870812be53f89c549063c5056d653db16621232582b6fe51f7\", \"0x8dfbb789f49ff07237c5650fa166d7adf9a2ff5b0ee967e510686a0df24b5e6e\", \"0x06aef81bc2b5d914fc553dad79a83dc0660c33c75448e62129b1da8443a3e704\", \"0xf291e642625bf18ddc03eb2c6287dea900457bcf8102834c26fb08438eb5d434\", \"0x73bb8bc367a789ce6e69ef4e21ffec76e103d36a85a01a460bd268a1ceec992a\", \"0x364c55068a8341db5e3ecc6fa6cc328e1b038d9a567b85fb3e470d8ee12a2fd8\", \"0x460e5ddc879c9da6090296d04fc522fcfc4341566856c0e4b81a6ee459922c06\", \"0x0f17e693874809172d889bd813ed4e825fdc4436d4c97bc48725b924ab612ce5\", \"0xca07ab5afbdc766247276e3641df8206cc89ca00660f3d72ceac86b1e192652a\", \"0x96027060b71fb9b758131b70c481c2e5f916bb821fa7295a834080c89698dbe1\", \"0xb9ed69d03aa2a80e358950b82fbd083fbef5069b6b8f2488cd74d70260b5de9b\", \"0x71c0249266f922677eab708b5de86fe1f057b6b39ad6dcd05230de89a0021eba\", \"0xbcb6f37b63558db10bedab0f722e34341a6329f57248e00606fe184613468c5c\", \"0x08eb945b49599aa7903bac856f5f5bb9d260bc1c2c553b2ab9d69a8611c4c935\", \"0xcac5bb4daec7f138cb820e5fd4b958184c9e724d4879662f4422df0230aadb14\", \"0xd29c761ec3504ae091998c2acbc3e739635d99e0764a7f521021a8ae7c068c36\", \"0xe5de172346d9d1f423a09726ca6e992725986c54bf2818ba537d341ba63ebf19\", \"0x337f7834016004bfa59869cfc357035dbc8128b340ed062e7a30a93bee2ac3fb\", \"0xf0f6790614751991e9d04548c7a81b0ef28aff686a704e4cfbfe1de01e6fce9e\", \"0x502e04348f225907f8528d9196c7113bd3c15d3080c1c1718c85c8cc073ea7bb\", \"0x663bf65f7e766082cfb84ab2d9303f9c078e2819eb2197d6f6318dafc55cfa98\", \"0x282b563050f940059986b4745345f14ce6d7e96b7160ead7a27985ce99aeae9b\", \"0x1459d9bb5939fe563d6d9502e28184d5c4619c10d0e0f6699b746daf4c1b0400\", \"0xc7d3fff73e954042d5bd91107252ff3986c9c756869c0484954d82831dfbfb28\", \"0x0cb9e8929bf625b0916879359fc617ce0b4e7f474df5cf53414d2075e8668cca\", \"0x9b8715bf3090fdf115ae675bf4692e5dc3e8453b126fd729ddfabbfaed11aa66\", \"0x69668b51d76ce1ab186158f05ef8d92394803b9f0c3e508d18d39fe45f2e25d4\", \"0x972f4e2f865c5e00f377418a2a0469e3abd3c1b64b2cdd803904dd33a9bfc7a0\", \"0x3ccb10a6a69fcfe8da544bddfcadf6be6a295dd4b38ab5ba0f9e8aa36f4188fd\", \"0x4098d83b4e8f506c7b85560a8e84017f845b1083b864e3975208ece07f98074f\", \"0xec6edff7cd40f0bc41b1ed6a129e88bec38cd6474f130363cd6dccc31d49a717\", \"0xa89aa9e24a3f0926bbbfc4c8a80ed872f58963f83d7d99b13f169463783f4e52\", \"0x07bb236e22e0d322d962bb28f329aed7ce8e9c460215d8700826a5faa777ccac\", \"0xf87aa14c01ee28584632c6db9b1667d27c8d0c0eb947d286318641e549dd3c1c\", \"0x2aeb9798bade7ece9a6fc803e9fb7359c14cb6c27dd986a27e8b20639dda5377\", \"0x07858381ad1ab29ac5a0f34fd78420cffa494c0dbb9bca64c1bff28075ba490b\", \"0x121d18d6770575a34480a8ddc268e87438e424d721d1b76c84cb60297d0a7156\", \"0xc54357b750662ef429845acfeacf482cffa4b253373e05199da3e01301823572\", \"0xe1bcd60bafc03acbcc8c8c6b454af4ecc1171cbc7d9ab4ed1e321bab82308af8\", \"0x7917615f4519f7160de4ac556c8de805ce8bc464e5784642cc937e000512ad0f\"], \"hash\": \"0xb913521609feef2b7cc351efe0d0b359796c709176e8824622bc6dee312a227f\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x0000b9b5b60cbaa58a008425f70c3e610794e9eb9ffa7e8c9ab257c451afcc22\", \"nonce\": \"0x279486ec07bf61d6\", \"number\": \"0x6b4\", \"parentHash\": \"0xa24c81127edb0a630b13205b498d8ef0f7d47a4678e96827f8f19ffd2c470a24\", \"pointerNumber\": 1708, \"size\": \"0x101bb\", \"timestamp\": \"0x5c9194ec\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_snailblocknumber","text":"get current snail block number","title":"etrue_snailBlockNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_44","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_44","text":"QUANTITY - integer of the current snail block number.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_44","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_snailBlockNumber\", \"params\":[],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\": \"0x38\" }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getcommittee","text":"get committee member infomation","title":"etrue_getCommittee"},{"location":"source/taiyuepublic/RPC-API/#parameters_45","text":"```js params: [\"0x1\"] ##### Returns - `backups`: `Array` - Array of backup committee members, each committee member info contains pubkey\u3001 coinbase\u3001flag\u3001type. - `beginNumber`: `QUANTITY` - the begin fast block number. - `beginSnailNumber`: `QUANTITY` - the begin snail block number. - `endNumber`: `QUANTITY` - the end fast block number. - `endSnailNumber`: `QUANTITY` - the end snail block number. - `id`: `QUANTITY` - committeeId. - `memberCount`: `QUANTITY` - the number of committee members . - `members`: `Array` - Array of committee members. ##### Example ```js // Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getCommittee\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"backups\": [{ \"PKey\": \"0488a25849abee5921fdb581ba34cd66adc8e02b108391c4153ca8da27722e16badf4fcd5ba7f557ae76d444ccf3638e4590a181805623de1cab67f31364c79736\", \"coinbase\": \"0x76ea2f3a002431fede1141b660dbb75c26ba6d97\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a9a1cedb8900d893b607c4dbc834abada3fe98f247b8bcb5ef44d3d3a246c4cf41d9d792527473c30ded81fa4b81afe7030a09e093dd92746b98c79e6a204c63\", \"coinbase\": \"0x831151b7eb8e650dc442cd623fbc6ae20279df85\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"040d153624462927444a8212717e4ad41ec5f5739bc36598d093d114729e1dc782d55d322699705829cf9d69f201009db797ebe8ba952f10a26fe36c64356b111b\", \"coinbase\": \"0x1074f7deccf8c66efcd0106e034d3356b7db3f2c\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3474c26578fce00d241119758271f6a208cc987c6f37d1518dcea2a51257bafeebd93202ae499cb5a8986720d4b63a04043aadb4d03430194a81860c9ca0763\", \"coinbase\": \"0xd985e9871d1be109af5a7f6407b1d6b686901fff\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04a3e174523b1054e14f123580bce258745e65591c2a4ee44764e55eb87a3782c9920d306e6121d4f10f8726800497ad9ca5a0bfdfe0832779dbaf7b95b3bf0111\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04d370defb1b7b8c086f98c4a7d7b90348b088cd2effdcc27b86feebdff499a192b4a5a5b16a400625271d69b3fa7d8c42c8b2e15c910cd1f314f28eb5beb73342\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 160, \"type\": 161 }, { \"PKey\": \"04f67ab0cd48f626da89c718bcd909a04dea393d632d3191891539ef2f5ff6bb1e5d340ebe94cb6d9126b26e1ec64bb4783e9e8ddf31346b53d651d15eb226142e\", \"coinbase\": \"0x04d2252a3e0ca7c2aa81247ca33060855a34a808\", \"flag\": 160, \"type\": 161 }], \"beginNumber\": 19781, \"beginSnailNumber\": 1, \"endNumber\": 30725, \"endSnailNumber\": 168, \"id\": 1, \"memberCount\": 21, \"members\": [{ \"PKey\": \"04ad2da6433f25f5063c98fb414496bd794f3054544408a63da4c6488a35a7c7ba38e8dbae49356182dcd81f45a715feb1f7f696c3a1bd77e33ab8ab41d8177ca3\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb9577ae8e19d99f708b8d46de17220afaf2d4a89676d98c8e8558e4e10f0283733a6a4a47aee779081cedd9266d5b4edcfc4fa22a4d69e3da98f6a03ad4e372\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"0497413104d718ef592fa4526e796be092a143272f9c7b415c23c73201a9cf3da2ec928e11958246ee2f8e838ec67506e798c4e8fcec89f5e8c9696235f600e765\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04dc2a2cba3793da755d28f02336193a8e04c77cb3fdef5f04a4197c71f59f978767729ff652267e4c0fc9204c7e921931c207e32ba442ac27a20acaad49324696\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047a523df31438d3efc02c4126b891d5e1258371336decfe43a15efcb519607aa2b932f895808f4414f75b525d7a490e10be314a6b60971c7149156b9d659fb591\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04ea62525863113273df44d8b5bbbcf0c1df5d03b94dd60308b747c1894af70dd5eaf5facfb1577bb4416ba517375ce662769f69b0c5fa961ac0cd9a4a342e4f67\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04601fc9ac609d9d47d01f76bcdf496a1b3d2aaf9dc4c97319faff49e2284ad843aa5505343376db1357b9cc0d176fe828d7a07cc8cd0993aee3b76d77eda2be4b\", \"coinbase\": \"0x4cf807958b9f6d9fd9331397d7a89a079ef43288\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04b64ba599ff0e0c2418357f87ed6058f04801ce0e0f653e336aa2f0b9c9620b1ed9222648100d7cadfbbe2cadb66b94e66eeed80b0a96da7808bc55fd8dd282a2\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"044aa7cef6d282ec22e0ef6d55d36b17d607afee920668320430717552cd7d4905e07d92a0e939f96ef6d617174a136267ed6a4efcc14879abe6aa097965fb4740\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04506b3c55ac57f78b41b2e47afc8d0f8d9891803822bbc4fe35bf3be72ad91056b0aae8a5fa76309f093987202a284c67d5918ca23a31e2e6535255c58240bf59\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04a69c470e1b4ea2a05d8a70de7c15687131bbb66105049a5bbdb04645381a29899ec72af7929c645ec0d29a91b4359de2629618b763a333d52bb4f436cccf9a9d\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"046e61555ed9bd6bb08b3f5034373bfc4472a8ca8868d21e1ceb4fe3f24c42c3a5dc7cb492ca62a31bfa6c82f86fed02dfa23196c25a76673ddb7a1f3f6eaafc84\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"04eb4c070000b1c4525e42d2cf61a0f1449ef82ce534a19ff03cf8c2a480d16e9738f5162972e15262992eb21cf561b7bae2e49e9dc8eb2b8f52dd9100f2bdce4e\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }, { \"PKey\": \"047fc0ae115cadf26b472ed4bed8785ca535c9fe53eb896bd21d7d7d7e1ee242881c50fa5eeaba4465e1992d5b917ae1f891c1e85e0bb5e0201e885886e846102b\", \"coinbase\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"flag\": 161, \"type\": 162 }] } }","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#etrue_getfruitbynumber","text":"get fruit block by fruit number","title":"etrue_getFruitByNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_46","text":"QUANTITY - integer of the fruit number. Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_22","text":"params: [ \"0x1\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_45","text":"Object - A fruit object, or null when no fruit was found: - difficulty : QUANTITY - integer of the difficulty for this snail reward block. - extraData : DATA - the \"extra data\" field of this reward block. - fastHash : DATA , 32 Bytes - hash of the fruit. - fastNumber : QUANTITY - fruit. - fruitDifficulty : QUANTITY - integer of all fruit difficulty for the fruit. - hash : DATA , 32 Bytes - hash of the fruit. - miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. - mixHash : DATA , 32 Bytes - the mix digest. - nonce : QUANTITY - the mining nonce. - number : QUANTITY - the fruit number. - size : QUANTITY - integer the size of the fruit in bytes. - timestamp : QUANTITY - the unix timestamp for when the fruit was collated.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_45","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getFruitByNumber\", \"params\":[\"0x1\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"difficulty\": \"0x4e20\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fastHash\": \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", \"fastNumber\": 1, \"fruitDifficulty\": \"0x64\", \"hash\": \"0xd5d8719f456a59249570bb7adf9e37c7d2e30621fbc0aab8ee2817bf591e3acc\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0xb01e70ab492dcede93395389b9193201011e950f181180f78ad98ae58184601d\", \"nonce\": \"0x033aebb6a27a911a\", \"number\": 1, \"signs\": 5, \"size\": 865, \"timestamp\": \"0x5c87b12a\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getfruitbyhash","text":"get fruit block by fruit hash","title":"etrue_getFruitByHash"},{"location":"source/taiyuepublic/RPC-API/#parameters_47","text":"DATA , 32 Bytes - hash of fast block. Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_23","text":"params: [ \"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_46","text":"See etrue_getFruitByNumber","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_46","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getFruitByHash\", \"params\":[\"0x190c33741f18c86ac9b3b3e1102e35c95a354cb6c9214ccc1f0fa28f950840b5\",false],\"id\":100}' // Result See etrue_getFruitByNumber","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getrewardblock","text":"return the fast block position where the given snail block is rewarded","title":"etrue_getRewardBlock"},{"location":"source/taiyuepublic/RPC-API/#parameters_48","text":"QUANTITY - integer of the snail reward block number","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_24","text":"params: [ \"0x15\" ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_47","text":"Object - A fast block object, or null when no snail reward block was found: committeeRoot : DATA , 32 Bytes - hash of committee members. snailHash : DATA , 32 Bytes - hash of the snail reward block. snailNumber : QUANTITY - the reward snail number. extraData : DATA - the \"extra data\" field of fast block. gasLimit : QUANTITY - the maximum gas allowed in fast block. gasUsed : QUANTITY - the maximum gas allowed in fast block. hash : DATA , 32 Bytes - hash of the fast block. logsBloom : DATA , 256 Bytes - the bloom filter for the logs of the block. null when its pending block. number : QUANTITY - the fast block number. parentHash : DATA , 32 Bytes - hash of the parent block. receiptsRoot : DATA , 32 Bytes - the root of the receipts trie of the fast block. signs : Array - Array of each committee member sign. size : QUANTITY - integer the size of the fast block in bytes. stateRoot : DATA , 32 Bytes - the root of the final state trie of the fast block. switchInfos : Array , - Array of switch committee member. timestamp : QUANTITY - the unix timestamp for when the fast block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. transactionsRoot : DATA , 32 Bytes - the root of the transaction trie of the fast block.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_47","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getRewardBlock\", \"params\":[\"0x15\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"committeeRoot\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\", \"SnailHash\": \"0xeae9f91963eb64f0ca6e5bcf8551d8efd0d1c7f8d5ff207856c303faef86e419\", \"SnailNumber\": 21, \"extraData\": \"0x\", \"gasLimit\": \"0x4b99999\", \"gasUsed\": \"0x668a0\", \"hash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"number\": \"0x7e5\", \"parentHash\": \"0x3f1105c6fa853944a84fe9ef7eefcc2bcbb08860c302aed652c773d1bbc0b2f0\", \"receiptsRoot\": \"0x824c56f642d67e881555ec142168cc2364a1343129e34044dea382088cb5fa42\", \"signs\": [{ \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x763026fef783d8bfdf4b06309a1aafbebce229e846383131dc430c6c29ff42bd033d3719f4c70e96bd5a80e46a9a67d2f647fbc7c2e0a7b32c0cf8824feca29300\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x4c11748616eda54ca216fc8fd28957459c629caea7967e73f23ac02419e9dfba4650b7cbfd3fd9a0f4737724234941c98fa9a6ad00ffd3f860e9dd5be5ac366c00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x86d689580eac3ce23453dec705ed8cd5c0ed992d0a4296ebea4bc5373f90bb1a56fbc121d6146f4c7ac6416e74b5a876012e25497dd70402b3461c13c9475a2800\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0xaa1d76682f8ce81fa449819a6921808010114d4433945da40d323d5d8f57ebac78fc7096fbf0307dcdac5e8c9e6b2be80aa3959a6e6304d85d7a534e0e2714cc00\" }, { \"fastHash\": \"0x5cc873dd449c7c15676211d8adf334da8e46b65cfa336e638678fbe4bc05ae5b\", \"fastHeight\": \"0x7e5\", \"result\": 1, \"sign\": \"0x90b4ce8a7a13d070d9b360173e1c96dd7d95c33e7f7689187117dafae46393a8764ce36db25881fcbf82ba692b18eb2450aa2f69667391e6c55025d9f6704d1701\" }], \"size\": \"0xca7\", \"stateRoot\": \"0xc422d6752c0aa8e0a773ddd5b12950f3c30361ce7320c6fa59eb77c9f36ca07e\", \"switchInfos\": [], \"timestamp\": \"0x5c87bf4c\", \"transactions\": [\"0xee311d9a6e95b0740488a8c797fc36b0ddbba97005c8623d0c8258509ad0e34b\", \"0x9be94692e83f76fbf8a9ff7a4b9caa83141bf5c7bd91b768669802b18357146c\", \"0x167c29e6b6278a999c0debe02b51407cbe9f23e701f53fa2c80e141ab42f8cd4\", \"0x481f16a6866ce56774c5a14bfbf9a19391868761d09403acaea4d9a74fe33bd7\", \"0x133457504d0c23f84b58b9f82aae15012b48c5bcb5fcff904d795fe78de1ce88\", \"0xff98231ecd6b0358d15eec72ebb8920ed5312c30305fb21845485316b1cf8ddd\", \"0x3282ec6633cb743a2e177f0a999b1f366bcf900069c33c40a4a1c3b7b4fc5ed6\", \"0x897e1b6226666a5c031bf528527e68efb63a7d3c4b6431d758858c554a3cf38a\", \"0x034bf45b679a2283deec9c3c514b0dfe6dc1ab4980864ceeafd9989bd56410f0\", \"0x129bc008bcae647a55d900068ae657e3f9073a37d03933d149ba529abd15c63c\", \"0xc5831516e417510b6f4069093c8845de24e62a1adee409c35164b8b6cf26465d\", \"0xb0ef3a7209af20990b2e346dc7f963d11e0da3a42ae04640502b81e30ac96202\", \"0x8c79698e30cbd7c50781eaa6077667428cf51027086762d9349ee9987d9ebe36\", \"0xf48839d7212c9d01684237131f68f81a30fe6635eb39b0030bab3e68c75bbefa\", \"0x94aff39d085551389a198378137e5dd694ce689e5ad326910f18f167ff81f16c\", \"0x882c79c2678a0fc0099bca068ca05bb239405c8a2f363a3b755b4049c67f41c7\", \"0xaa5855c69051b82716bdc9b7f9190ef06c06411d0d43d8786fbf14a3898446a6\", \"0x508b4357b911624c11bb5a90d880c86ed92f5f430454f64b6e63ea884cec0589\", \"0x652a73ec17dab453db88a9e292bf684a814101d7013a489fbbae98ed9c221f03\", \"0xa95cbff42440d0a000ad55969f95fc5b5ff947efd95dbb0f9607acf849dbfbd9\"], \"transactionsRoot\": \"0xcfcce7b64115b9086a78c0449ceb70aac9b08c0d221943470ffacbbdc71fba9a\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getsnailblockbynumber","text":"get snail block by number","title":"etrue_getSnailBlockByNumber"},{"location":"source/taiyuepublic/RPC-API/#parameters_49","text":"QUANTITY - integer of the snail block number,or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Boolean - whether show fruits in snail block","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_25","text":"params: [ \"0x19\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_48","text":"Object - A snail block object, or null when no snail block was found: beginFruitNumber : QUANTITY - the beign fruit number in snail reward block. difficulty : QUANTITY - integer of the difficulty for this snail reward block. endFruitNumber : QUANTITY - the end fruit number in snail reward block. extraData : DATA - the \"extra data\" field of this reward block. fruitDifficulty : QUANTITY - integer of all fruit difficulty for this snail reward block. fruitsHash : DATA , 32 Bytes - hash of fruits in snail reward block. fruits : Array - Array of all hash of fruits in snail reward block. hash : DATA , 32 Bytes - hash of the snail reward block. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. mixHash : DATA , 32 Bytes - the mix digest. nonce : QUANTITY - the mining nonce. number : QUANTITY - the snail block number. parentHash : DATA , 32 Bytes - hash of the parent block. pointerNumber : QUANTITY - current snail reward block minus 7. size : QUANTITY - integer the size of this reward block in bytes. timestamp : QUANTITY - the unix timestamp for when the block was collated.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_48","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailBlockByNumber\", \"params\":[\"0x19\",false],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"beginFruitNumber\": \"0x5a9\", \"difficulty\": \"0x9e86\", \"endFruitNumber\": \"0x5e4\", \"extraData\": \"0xd9820a008667657472756588676f312e31302e38856c696e7578\", \"fruitDifficulty\": \"0x64\", \"fruitsHash\": \"0x02c44355f9aa43305f7507efd77ab13a74b0a7bde1d923ac62135e8e3bfe4afd\", \"fruits\": 60, \"hash\": \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", \"miner\": \"0x7c357530174275dd30e46319b89f71186256e4f7\", \"mixHash\": \"0x000122785a555ca6b63c54e1ff398cf5ae9f6176391de526a7d3a9277b13cfaf\", \"nonce\": \"0x719c13f20436b852\", \"number\": \"0x19\", \"parentHash\": \"0x1d2361639c4b26f9481caf680e6db21af1c8d9159f804b01a37611a1e057487a\", \"pointerNumber\": 17, \"size\": \"0xcee1\", \"timestamp\": \"0x5c87bbcf\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getsnailblockbyhash","text":"get snail block by hash","title":"etrue_getSnailBlockByHash"},{"location":"source/taiyuepublic/RPC-API/#parameters_50","text":"DATA , 32 Bytes - hash of snail block . Boolean - if contais fruit signs of committee member.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_26","text":"params: [ \"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\", false ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_49","text":"See etrue_getSnailBlockByNumber","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_49","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailBlockByHash\", \"params\":[\"0x6fd8a5f62ec65a6f244be17a32605c705736ed960130bad87b79730312d77741\",false],\"id\":100}' // Result See etrue_getSnailBlockByNumber","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getdataset","text":"the Minverva algorithm calculates the required source of dataset, and updates the dataset every 12,000","title":"etrue_getDataset"},{"location":"source/taiyuepublic/RPC-API/#parameters_51","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_50","text":"[null,null,null,null,null,null....,null]. -when snailBlock number exceed 12000, return not nil","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_50","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getDataset\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { [null, null, null, null, ......, null, null] } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getsnailrewardcontent","text":"get snailBlock reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit","title":"etrue_getSnailRewardContent"},{"location":"source/taiyuepublic/RPC-API/#parameters_52","text":"QUANTITY - integer of a block number.","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_51","text":"blockminer : -snailblock miner address and reward committeReward : -committee member address and reward for all fruit fruitminer : -fruit miner address and reward for each fruit","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_51","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getSnailRewardContent\", \"params\":[\"0x1\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { \"blockminer\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 61629629629629000000 }, \"committeReward\": { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 23111111111110999785 }, \"fruitminer\": [{ \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }, { \"0x7c357530174275dd30e46319b89f71186256e4f7\": 446591519055275362 }] } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getrecentchainrewardcontent","text":"get snailBlock pos reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit","title":"etrue_getRecentChainRewardContent"},{"location":"source/taiyuepublic/RPC-API/#parameters_53","text":"none","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_52","text":"Number : QUANTITY , -snailblock number blockminer : QUANTITY , -snailblock miner address and reward committeReward : Array , -committee member address and reward for all fruit Address : DATA , 20 Bytes - address of the delegate. Amount : QUANTITY , - reward amount Staking : QUANTITY , - staking amount when cal reward foundationReward : -foundation reward fruitminer : -fruit miner address and reward for each fruit time : -miner snail block time","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_52","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getRecentChainRewardContent\", \"params\":[],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { Number: \"0x9b40\", blockminer: { Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 52432209984299000000, Staking: null }, committeReward: [{ Items: [{...}, {...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }], foundationReward: { Address: \"0xda79b1c2645750c655d848e04c27e2cd9d263c48\", Amount: 0, Staking: null }, fruitminer: [{ Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 26216104992149000000, Staking: null }], time: \"0x5e6036ac\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#etrue_getchainrewardcontent","text":"get snailBlock pos reward imfomation, including snailBlock miner,fruit miner and committee reward for each fruit","title":"etrue_getChainRewardContent"},{"location":"source/taiyuepublic/RPC-API/#parameters_54","text":"QUANTITY - integer of a snail block hex number. DATA , 20 Bytes - address of the validator, when \"0x0000000000000000000000000000000000000000\" query all","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_53","text":"Number : QUANTITY , -snailblock number blockminer : QUANTITY , -snailblock miner address and reward committeReward : Array , -committee member address and reward for all fruit Address : DATA , 20 Bytes - address of the delegate. Amount : QUANTITY , - reward amount Staking : QUANTITY , - staking amount when cal reward foundationReward : -foundation reward fruitminer : -fruit miner address and reward for each fruit time : -miner snail block time","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_53","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\":\"etrue_getChainRewardContent\", \"params\":[\"0x9b44\",\"0x0000000000000000000000000000000000000000\"],\"id\":100}' // Result { \"jsonrpc\": \"2.0\", \"id\": 100, \"result\": { Number: \"0x9b40\", blockminer: { Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 52432209984299000000, Staking: null }, committeReward: [{ Items: [{...}, {...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}, {...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }, { Items: [{...}] }], foundationReward: { Address: \"0xda79b1c2645750c655d848e04c27e2cd9d263c48\", Amount: 0, Staking: null }, fruitminer: [{ Address: \"0x3dd442d92e887700f61b0d29aa73094ecedde7a1\", Amount: 26216104992149000000, Staking: null }], time: \"0x5e6036ac\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#impawn","text":"","title":"Impawn"},{"location":"source/taiyuepublic/RPC-API/#impawn_getallstakingaccount","text":"Returns information about all validator staking info, contain staking count.","title":"impawn_getAllStakingAccount"},{"location":"source/taiyuepublic/RPC-API/#parameters_55","text":"QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_27","text":"params: [ 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_54","text":"delegateCount : QUANTITY , the all delegate count. stakerCount : QUANTITY - the all staking member count. stakers : Array , detail validator member info. committee : TAG - true it select as committee. false it no not select delegation : Array , detail delegate member info of this staker. delegation : QUANTITY - delagate count. saAddress : DATA , 20 Bytes - address of the validator. unit : Object - contain detail delegate info. validDelegate : QUANTITY - delagate count not contain redeem info. fee : QUANTITY - validator fee for share reward with delegate. id : QUANTITY , validator index. modify : Object , update fee and pub key. staking : DATA , staking count. unit : Object , contain detail staking info. validStaking : QUANTITY , staker count not contain redeem info. votePubKey : DATA , 32 Bytes - bft communication key.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_54","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getAllStakingAccount\",\"params\":[\"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":{ delegateCount: 0, stakerCount: 4, stakers: [{ committee: false, delegation: { 0: { delegate: 10000000000000000000, saAddress: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", unit: { address: \"0x7c357530174275dd30e46319b89f71186256e4f7\", redeemInfo: {}, value: {...} }, validDelegate: 10000000000000000000 } }, fee: 0, id: 0, modify: { fee: 0, votePubKey: \"0x\" }, staking: 3.0172e+22, unit: { address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", redeemInfo: {...}, value: {...} }, validStaking: 3.0172e+22, votePubKey: \"0x040743b25066dac37d3552e63c9ba3325884ba28d0906ce5fd9a18a55312ef478c2b9c33f6ef519c1fd0e42884a25bf2be1ea83f3354a3e54243d521c37865c062\" }, { committee: false, delegation: {}, fee: 0, id: 1, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0x6d348e0188cc2596aaa4046a1d50bb3ba50e8524\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x04a8bd50e35f99f77edda08e333339ab49db89f0c81f49a37e7d4ddb84a06738ff54becf677f3ea6d9abdd321e50d77680871f408dcb7a17dfa7f0d8bb5229d831\" }, { committee: false, delegation: {}, fee: 0, id: 2, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0xe803895897c3ccd35315b2e41c95f817543811a5\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x0439d8ca80e0f4bc3a1aa203fa280909f426db90436dabcc9a1a3ef8efaa9d0ea8a9647eaa821b8346a92eed28cd707cb062ec54b31b819d0bf03af79fd63ea40e\" }, { committee: false, delegation: {}, fee: 0, id: 3, modify: { fee: 0, votePubKey: \"0x\" }, staking: 2e+22, unit: { address: \"0x3f739ffd8a59965e07e1b8d7cca938125bce8cfb\", redeemInfo: {}, value: {...} }, validStaking: 2e+22, votePubKey: \"0x046bf0f9bb43ac46efe9bd58a465a4b2f9cf8962b728907471f2b4b51a899c3eb166b4a3ee69eac012abc39cd91451dd20089b1371c2acf6e18066d0e8c2cab717\" }] } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#impawn_getstakingasset","text":"Returns information about deposit info by address.","title":"impawn_getStakingAsset"},{"location":"source/taiyuepublic/RPC-API/#parameters_56","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_28","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_55","text":"address : DATA , 20 Bytes - address of the validator. lockValue : Array , detail validator member info. amount : QUANTITY - deposit amount value. height : QUANTITY , deposit tx height.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_55","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getStakingAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", stakingValue: [{ amount: 3.0172e+22, height: 122380 }] }] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#impawn_getlockedasset","text":"Returns information about cancel info by address.","title":"impawn_getLockedAsset"},{"location":"source/taiyuepublic/RPC-API/#parameters_57","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_29","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_56","text":"address : DATA , 20 Bytes - address of the validator. lockValue : Array , detail validator member info. amount : QUANTITY - lock amount value. epochID : QUANTITY , you deposit belong to epoch. height : QUANTITY , which height you can withdraw. locked : TAG - true instant withdraw. false after height can withdraw.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_56","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getLockedAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", lockValue: [{ amount: 1000000000000000000, epochID: 30, height: 115381, locked: false }] }] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#impawn_getallcancelableasset","text":"Returns information about can cancel count info by address.","title":"impawn_getAllCancelableAsset"},{"location":"source/taiyuepublic/RPC-API/#parameters_58","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_30","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_57","text":"address : DATA , 20 Bytes - address of the validator. value : QUANTITY , deposit count that you can cancel.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_57","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getAllCancelableAsset\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":[{ address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", value: 3.0172e+22 }] }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#impawn_getstakingaccount","text":"Returns information about certain staking info by address.","title":"impawn_getStakingAccount"},{"location":"source/taiyuepublic/RPC-API/#parameters_59","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter","title":"Parameters"},{"location":"source/taiyuepublic/RPC-API/#example-parameters_31","text":"params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest' ]","title":"Example Parameters"},{"location":"source/taiyuepublic/RPC-API/#returns_58","text":"committee : TAG - true it select as committee. false it no not select delegation : Array , detail delegate member info of this staker. - delegation : QUANTITY - delagate count. - saAddress : DATA , 20 Bytes - address of the validator. - unit : Object - contain detail delegate info. - validDelegate : QUANTITY - delagate count not contain redeem info. fee : QUANTITY - validator fee for share reward with delegate. id : QUANTITY , validator index. modify : Object , update fee and pub key. staking : DATA , staking count. unit : Object , contain detail staking info. validStaking : QUANTITY , staker count not contain redeem info. votePubKey : DATA , 32 Bytes - bft communication key.","title":"Returns"},{"location":"source/taiyuepublic/RPC-API/#example_58","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"impawn_getStakingAccount\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"],\"id\":100}' // Result { \"id\":100, \"jsonrpc\":\"2.0\", \"result\":{ committee: false, delegation: {}, fee: 0, id: {}, modify: { fee: 0, votePubKey: \"0x\" }, staking: 3.0172e+22, unit: { address: \"0xc02f50f4f41f46b6a2f08036ae65039b2f9acd69\", redeemInfo: { 0: { amount: \"0xde0b6b3a7640000\", epochID: 30, state: 8 } }, value: { 0: { amount: \"0x663a09d1de48df00000\", height: \"0x1de0c\", state: 2 } } }, validStaking: 3.0172e+22, votePubKey: \"0x040743b25066dac37d3552e63c9ba3325884ba28d0906ce5fd9a18a55312ef478c2b9c33f6ef519c1fd0e42884a25bf2be1ea83f3354a3e54243d521c37865c062\" } }","title":"Example"},{"location":"source/taiyuepublic/RPC-API/#eth","text":"In order for more developers to participate in the truechain ecosystem and be friendly to developers, truechain is compatible with ethereum. Please refer to the instructions of ethereum for detailed rules of use","title":"Eth"},{"location":"source/taiyuepublic/Running-in-Docker/","text":"Running in Docker We keep a Docker image with recent snapshot builds from the develop branch on DockerHub . In addition to the container based on Ubuntu (158 MB). To pull the image, run this command: docker pull taiyuechain/taipublic Start a node with: docker run -it -p 30313:30313 taiyuechain/taipublic To start a node that runs the JSON-RPC interface on port 8545 , run: docker run -it -p 8545:8545 -p 30313:30313 taiyuechain/taipublic --rpc --rpcaddr \"0.0.0.0\" WARNING: This opens your container to external calls. \"0.0.0.0\" should not be used when exposed to public networks To use the interactive JavaScript console, run: docker run -it -p 30313:30313 taiyuechain/taipublic console Using Data Volumes To persist downloaded blockchain data between container starts, use Docker data volumes . Replace /path/on/host with the location you want to store the data in. docker run -it -p 30313:30313 -v /path/on/host:/root/.truechain truechain/getrue","title":"Running in Docker"},{"location":"source/taiyuepublic/Running-in-Docker/#running-in-docker","text":"We keep a Docker image with recent snapshot builds from the develop branch on DockerHub . In addition to the container based on Ubuntu (158 MB). To pull the image, run this command: docker pull taiyuechain/taipublic Start a node with: docker run -it -p 30313:30313 taiyuechain/taipublic To start a node that runs the JSON-RPC interface on port 8545 , run: docker run -it -p 8545:8545 -p 30313:30313 taiyuechain/taipublic --rpc --rpcaddr \"0.0.0.0\" WARNING: This opens your container to external calls. \"0.0.0.0\" should not be used when exposed to public networks To use the interactive JavaScript console, run: docker run -it -p 30313:30313 taiyuechain/taipublic console","title":"Running in Docker"},{"location":"source/taiyuepublic/Running-in-Docker/#using-data-volumes","text":"To persist downloaded blockchain data between container starts, use Docker data volumes . Replace /path/on/host with the location you want to store the data in. docker run -it -p 30313:30313 -v /path/on/host:/root/.truechain truechain/getrue","title":"Using Data Volumes"},{"location":"source/taiyuepublic/Staking-ABI/","text":"[ { \"name\": \"Deposit\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"bytes\", \"name\": \"pubkey\", \"indexed\": false }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false }, { \"type\": \"uint256\", \"name\": \"fee\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"Delegate\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"address\", \"name\": \"holder\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"Undelegate\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"address\", \"name\": \"holder\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"WithdrawDelegate\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"address\", \"name\": \"holder\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"Cancel\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"Withdraw\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"Append\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"value\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"SetFee\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"uint256\", \"name\": \"fee\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"SetPubkey\", \"inputs\": [ { \"type\": \"address\", \"name\": \"from\", \"indexed\": true }, { \"type\": \"bytes\", \"name\": \"pubkey\", \"indexed\": false } ], \"anonymous\": false, \"type\": \"event\" }, { \"name\": \"deposit\", \"outputs\": [], \"inputs\": [ { \"type\": \"bytes\", \"name\": \"pubkey\" }, { \"type\": \"uint256\", \"name\": \"fee\" }, { \"type\": \"uint256\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"setFee\", \"outputs\": [], \"inputs\": [ { \"type\": \"uint256\", \"name\": \"fee\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"setPubkey\", \"outputs\": [], \"inputs\": [ { \"type\": \"bytes\", \"name\": \"pubkey\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"append\", \"outputs\": [], \"inputs\": [ { \"type\": \"uint256\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"delegate\", \"outputs\": [], \"inputs\": [ { \"type\": \"address\", \"name\": \"holder\" }, { \"type\": \"uint256\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"undelegate\", \"outputs\": [], \"inputs\": [ { \"type\": \"address\", \"name\": \"holder\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"lockedBalance\", \"outputs\": [ { \"type\": \"uint256\", \"name\": \"out\" } ], \"inputs\": [ { \"type\": \"address\", \"name\": \"owner\" } ], \"constant\": true, \"payable\": false, \"type\": \"function\" }, { \"name\": \"getDeposit\", \"outputs\": [ { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"staked\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"locked\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"unlocked\" } ], \"inputs\": [ { \"type\": \"address\", \"name\": \"owner\" } ], \"constant\": true, \"payable\": false, \"type\": \"function\" }, { \"name\": \"getDelegate\", \"outputs\": [ { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"delegated\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"locked\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"unlocked\" } ], \"inputs\": [ { \"type\": \"address\", \"name\": \"owner\" }, { \"type\": \"address\", \"name\": \"holder\" } ], \"constant\": true, \"payable\": false, \"type\": \"function\" }, { \"name\": \"cancel\", \"outputs\": [], \"inputs\": [ { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"withdraw\", \"outputs\": [], \"inputs\": [ { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" }, { \"name\": \"withdrawDelegate\", \"outputs\": [], \"inputs\": [ { \"type\": \"address\", \"name\": \"holder\" }, { \"type\": \"uint256\", \"unit\": \"wei\", \"name\": \"value\" } ], \"constant\": false, \"payable\": false, \"type\": \"function\" } ]","title":"Staking ABI"},{"location":"source/taiyuepublic/Staking-Contract/","text":"Contract Address TaipublicChain staking contract is deployed at address: 0x000000000000000000747275657374616b696E67 Contract json ABI Refer to Staking ABI Interact with contract interface deposit One node can participate as a validator to proposal new blocks with deposit function. To create your validator, you need to deposit some true coin and register you validator public key. Delegators can bond their coin to the validator account and shares block reward by their portion. Validator can charge for additional fee rate from the delegators reward. The feeRate calculation: feeRate = fee / 10000 After deposit, the node becomes a validator candidate. Only if the deposit balance > 50000(true), the validator can be selected as a candidate. parameter type comment pubkey bytes BFT public key of 65 bytes fee uint256 percent of reward charged for delegate, the rate = fee / 10000 value wei true token to deposit cancel Validator can cancel a portion of the deposit from staking balance. With the cancel transaction executed, the cancelled portion is locked in the contract for about 2 weeks. After the period, validator can withdraw the canceled coins. parameter type comment value uint256 unlock a portion of deposit, the unit is wei append Validator can deposit extra true token to the deposit contract by append function. parameter type comment value wei amout of coin staked by the deposit account withdraw Validator can withdraw the unlocked token after a locking period of 2 weeks. All the deposit balance can be retrived by getDeposit function. parameter type comment value uint256(wei) amount of value withdrawed to the owner getDeposit Validator can query deposit balance by getDeposit function. there are 3 states for the deposit: staked , locked , unlocked staked: token which validator bond to stake contract and may receive block reward locked: token which were canceld but are still locked in the deposit util 2 weeks. unlocked: valdator use withdraw token of unlocked state parameter type comment owner address address of deposit validator getDeposit function outputs uint256 tuple of 3 items:(staked, locked, unlocked) parameter type comment staked uint256 amount which is staked in deposit locked uint256 amount which is cancelled but still is in lock period unlocked uint256 amount which validator can withdraw delegate People who do not want to run a validator full node can deposit their token to a certern validator to gain staking reward. If the holder's own deposit is less than 50000 true, delegtor can not receive any reward as the validator would't be elected as a candidate. parameter type comment holder address address of a particular validator account value wei amout of coin deposit to the delegator account undelegate Delegator can cancel a portion of the deposit from a certern validator holder. With the undelegate transaction, the cancelled portion is locked in the contract for about 2 weeks. After the period, delegator can withdraw the canceled token. parameter type comment holder address address of the delegator value uint256 unlock a portion of delegated coin withdrawDelegate Delegator can withdraw the unlocked token from a validtor. All the delegation balance can be retrived by getDelegate function. parameter type comment holder address address of the delegator value uint256 amount of coin withdrawed to the owner getDelegate getDelegate return the balance state of a delegator. The state of token balance is similar to getDeposit parameter type comment owner address owner address of the delegated coin holder address address of the delegator getDelegate function outputs uint256 tuple of 3 items: (staked, locked, unlocked) parameter type comment staked uint256 amount which is staked in deposit locked uint256 amount which is cancelled but still is in lock period unlocked uint256 amount which coin owner can withdraw","title":"Staking Contract"},{"location":"source/taiyuepublic/Staking-Contract/#contract-address","text":"TaipublicChain staking contract is deployed at address: 0x000000000000000000747275657374616b696E67","title":"Contract Address"},{"location":"source/taiyuepublic/Staking-Contract/#contract-json-abi","text":"Refer to Staking ABI","title":"Contract json ABI"},{"location":"source/taiyuepublic/Staking-Contract/#interact-with-contract-interface","text":"","title":"Interact with contract interface"},{"location":"source/taiyuepublic/Staking-Contract/#deposit","text":"One node can participate as a validator to proposal new blocks with deposit function. To create your validator, you need to deposit some true coin and register you validator public key. Delegators can bond their coin to the validator account and shares block reward by their portion. Validator can charge for additional fee rate from the delegators reward. The feeRate calculation: feeRate = fee / 10000 After deposit, the node becomes a validator candidate. Only if the deposit balance > 50000(true), the validator can be selected as a candidate. parameter type comment pubkey bytes BFT public key of 65 bytes fee uint256 percent of reward charged for delegate, the rate = fee / 10000 value wei true token to deposit","title":"deposit"},{"location":"source/taiyuepublic/Staking-Contract/#cancel","text":"Validator can cancel a portion of the deposit from staking balance. With the cancel transaction executed, the cancelled portion is locked in the contract for about 2 weeks. After the period, validator can withdraw the canceled coins. parameter type comment value uint256 unlock a portion of deposit, the unit is wei","title":"cancel"},{"location":"source/taiyuepublic/Staking-Contract/#append","text":"Validator can deposit extra true token to the deposit contract by append function. parameter type comment value wei amout of coin staked by the deposit account","title":"append"},{"location":"source/taiyuepublic/Staking-Contract/#withdraw","text":"Validator can withdraw the unlocked token after a locking period of 2 weeks. All the deposit balance can be retrived by getDeposit function. parameter type comment value uint256(wei) amount of value withdrawed to the owner","title":"withdraw"},{"location":"source/taiyuepublic/Staking-Contract/#getdeposit","text":"Validator can query deposit balance by getDeposit function. there are 3 states for the deposit: staked , locked , unlocked staked: token which validator bond to stake contract and may receive block reward locked: token which were canceld but are still locked in the deposit util 2 weeks. unlocked: valdator use withdraw token of unlocked state parameter type comment owner address address of deposit validator getDeposit function outputs uint256 tuple of 3 items:(staked, locked, unlocked) parameter type comment staked uint256 amount which is staked in deposit locked uint256 amount which is cancelled but still is in lock period unlocked uint256 amount which validator can withdraw","title":"getDeposit"},{"location":"source/taiyuepublic/Staking-Contract/#delegate","text":"People who do not want to run a validator full node can deposit their token to a certern validator to gain staking reward. If the holder's own deposit is less than 50000 true, delegtor can not receive any reward as the validator would't be elected as a candidate. parameter type comment holder address address of a particular validator account value wei amout of coin deposit to the delegator account","title":"delegate"},{"location":"source/taiyuepublic/Staking-Contract/#undelegate","text":"Delegator can cancel a portion of the deposit from a certern validator holder. With the undelegate transaction, the cancelled portion is locked in the contract for about 2 weeks. After the period, delegator can withdraw the canceled token. parameter type comment holder address address of the delegator value uint256 unlock a portion of delegated coin","title":"undelegate"},{"location":"source/taiyuepublic/Staking-Contract/#withdrawdelegate","text":"Delegator can withdraw the unlocked token from a validtor. All the delegation balance can be retrived by getDelegate function. parameter type comment holder address address of the delegator value uint256 amount of coin withdrawed to the owner","title":"withdrawDelegate"},{"location":"source/taiyuepublic/Staking-Contract/#getdelegate","text":"getDelegate return the balance state of a delegator. The state of token balance is similar to getDeposit parameter type comment owner address owner address of the delegated coin holder address address of the delegator getDelegate function outputs uint256 tuple of 3 items: (staked, locked, unlocked) parameter type comment staked uint256 amount which is staked in deposit locked uint256 amount which is cancelled but still is in lock period unlocked uint256 amount which coin owner can withdraw","title":"getDelegate"},{"location":"source/taiyuepublic/Staking-Guide/","text":"TaiPubliChain adopts hybrid consensus, fPow + DPoS. The DPoS committee members use pbft protocol to produce fast blocks which include transactions and to confirm the previous snail blocks. The fPoW miners mine fruits (point to fast blocks) and snail blocks (include fruits) to resit the long range attack and to prevent tampering. Reward The business module of TaiPubliChain is deflation. The staking reward wil deflate 20% every year. From March 30th 2020, the annumal reward will be 3,000,000, 2,400,000, 1,920,000, ... Validator Validators are the DPoS committee members to process transactions. The minimum amount to be validator is 20,000 TRUE. The recommended specifications for running a validator node is: - 4 cores CPU - 16G RAM - 200G disk space - 4Mpbs bandwidth - public ip address to participate the committee Locked Time Assets will freeze after staking. And 25,000 fast blocks(about 15 days) need to unfreeze. Stake Guide Stake/withdraw option is based a system contract, everyone can call the contract functions to do these actions. And the node provide some RPC APIs to request the stake and reward information. We also provide a staking CLI to stake easily. Staking Contract TaiPubliChain staking contract is deployed at address: 0x000000000000000000747275657374616b696E67 Definitions of all contract functions here RPC and SDK The RPC APIs definitions are here The java sdk trueweb3j provides the staking encode functions Building CLI TrueChain Staking CLI is a tool, which can call deposit contract participate in POS. See this page for more information. Building-Truechain Follow the appropriate link below to find installation instructions for your platform. * Installation Instructions for Mac OS X * Installation Instructions for Windows * Installation Instructions for Linux/Unix * Ubuntu * Centos * Usage instructions for Docker * Docker PrePare taipublic support rpc ./taipublic --rpc --rpcaddr 127.0.01 --rpcport 8545 --rpcapi \"etrue,net,web3,impawn\" console gtaipublic will listen all ip address when giving --rpcaddr 0.0.0.0 , you can give the exact ip address that want to connect, or --rpcaddr 127.0.01 only allow running on the host to connect taipublic . taipublic support BFT ./taipublic --bftip 39.98.251.xx console bftip must be public ip , open firewall port 8545( rpc ),30310( bftport ),30311( bftport2 ) start normal params $ ./taipublic --datadir data --bftip \"39.98.251.xxx\" --rpc --rpcaddr \"127.0.0.1\" --rpcapi \"eth,etrue,net,web3,impawn\" console Building the source Building impawn requires both a Go and a C compiler. Once the dependencies are installed, run cd truechain-engineering-code/cmd/impawn go build -o impawn main.go query_stake.go impawn.go Staking-CLI The process of TaiPublicChain Staking-ClI is divided into three parts. First, on the premise of ensuring the balance of the account, Launch a Impawn transaction, only if the amount of deposit( value ) is greater than 2W true can participate in the election of the committee. If you ready to withdraw from the committee's POS consensus next epoch, Launch a Cancel transaction in the current epoch. After waiting for 15 days, we need to actively launch Withdraw transaction. The extracted true will be immediately transferred to the specified account. Since Impawn needs to be greater than 2W which can invoked successfully, Append can be used if the impawn amount is less than 2W. Update fee can invoke UpdateFee Update pk can invoke UpdatePK Query balance or reward info use QueryReward Impawn $ tree . \u251c\u2500\u2500 impawn \u251c\u2500\u2500 impawn.go \u251c\u2500\u2500 main.go \u251c\u2500\u2500 query_stake.go \u251c\u2500\u2500 README.md \u2514\u2500\u2500 UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.*** --rpcport 8545 --value 20000 --fee 5000 This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value deposit >=20000 true to staking address, the validator can be selected as a candidate. * --fee fee(0-10000) set to 5000, smaller the value, lower benefit to the delegate, higher the value, higher benefit, the rate = fee / 10000. Output Log* ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97. :8545 current number 4467994 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779439190971997852e+07 'true current Total Stake 700401 Fee 5000 Pubkey 04f7a84c02fd576545c102d73cee71097813c255d5791cdcb600b82aedbf6f05dfda801e88985b3bfecc21592a7211ad4b551071f0bed8b357ea949e53fc9c5e8c value 20000000000000000000000 TX data nonce 17 transfer value 20000000000000000000000 gasLimit 826392 gasPrice 1000000 chainID 18928 Please waiting txHash 0xf1532026e8ffe44a1ea85c5e0772ffb7e6210d2f4bceed15c07078ddb48043a4 Transaction Success block Number 4467996 block txs 3 blockhash 0xab6af69d64ff17affa2460a7bd39552463611c09eab2cf5a769889d25e5afb96 Staked 50000000000000000000000 wei = 20000 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true ### Cancel $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 cancel This command explain: * `--keystore` flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * `--rpcaddr` `--rpcport` flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * `--value` want cancel count true. * `cancel` withdraw must call cancel first, sub command cancel represent you want cancel 10 true to locked state, next epoch can withdraw. . **Output Log** ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468624 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 19 transfer value 0 gasLimit 821784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x1bd50e4755cac0b2ae69f080d645c7a78a24c51ad31570f6afcc6f853a820b10 Transaction Success block Number 4468626 block txs 3 blockhash 0x0248f6467a7d50962115a210e815737bb1d0be5012adc96212cf9b458dc65f05 Staked 4999000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true QueryStaking $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 querystaking This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * querystaking print in staking count( Staked ), already cancel count( Locked ), can withdraw count( Unlocked ).. * Print withdraw height , after this, you can call withdraw, if lock equal false , can instant withdraw . * If Unlocked not equal zero, can instant withdraw print amount. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Staked 49990000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true Your can withdraw after height 4471006 count value 10 true index 0 lock true Withdraw if you use query staking find Unlocked not equal zero. Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 10000000000000000000 wei = 10 true use this command $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 withdraw This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value want withdraw count true. * withdraw Sub command append represent you want withdraw 10 true to your address . Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4501013 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779438190969483348e+07 'true current Total Stake 700402 TX data nonce 20 transfer value 0 gasLimit 861784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x659dbaf0a920aceed810647d3e2f113b508e8748dd82d2b0dae067f952214449 Transaction Success block Number 4501014 block txs 3 blockhash 0x177e1c2af3c6dc1eecc6139c1b438fde86cb5c30f015d611d0191af7e96230de Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true Your wallet balance is 1.7779448190968621564e+07 'true current Total Stake 700392 Append $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 append This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value want append count true. * append Sub command append represent you want c6uontinue staking after already having deposit. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4501430 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 22 transfer value 10000000000000000000 gasLimit 821272 gasPrice 1000000 chainID 18928 Please waiting txHash 0x01a4d6bb8c85113118b47e27373b92dab5914f8103d3a16e46b3b4a65d15bbd3 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8 Staked 11000000000000000000 wei = 11 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true UpdateFee $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --fee 10 updatefee This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --fee fee(0-10000) set to 5000, smaller the value, lower benefit to the delegate, higher the value, higher benefit, the rate = fee / 10000. * updatefee Sub command append represent only update validator fee(0-10000), which will influence delegator benefit. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4503733 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Fee 6000 TX data nonce 25 transfer value 0 gasLimit 821528 gasPrice 1000000 chainID 18928 Please waiting txHash 0x9ba1a83f8e4a074d311ef24993cc6a3baf82936c6b73f76b77eac95204bfd772 Transaction Success block Number 4503743 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc UpdatePK $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b updatepk This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b private key or use --pubkey + public key. * updatepk Sub command updatepk represent only update validator pk, committee communication identify. Output Log Connect url http://localhost:8545 current number 5048960 address 0xDaa07f97034916517afFF28b672A61B0027346a2 Pubkey 045772b765ed192fdd53dd4a579dc53e37682bd975001071ff232f8cdad05734cbbdded8d8fb758845d315115f012e136739f6f3e1e9654eff45b36cb06ce8f9f6 TX data nonce 9155 transfer value 0 gasLimit 2426136 gasPrice 1000000000 chainID 18928 Please waiting txHash 0xe157cbac55796b4a97dd28421fa1621edb562a5b95aadebe5d868879fe51e5e2 Transaction Success block Number 5048961 block txs 1 blockhash 0xf55332105a203d92df53fc5609e8465dbae5a0ef166e3548b1c25d5c4d6e473a Staked 100020000000000000000000 wei = 100020 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true QueryReward $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 queryreward This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * queryreward print valid balance and lock balance, and every snail block your reward. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet valid balance is 11120.337165556650564 'true lock balance is 100000 'true queryRewardInfo [map[Address:0xa4ab123ab418197ab0b5e3c49269f5d530ef87f0 Amount:2.8086168529799127e+18]] Send $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --address to address that you want send. * --value want transfer count true. * send Sub command append represent send normal transaction not contract,value is transfer value. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4502701 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779429190966933964e+07 'true current Total Stake 700411 TX data nonce 23 transfer value 10000000000000000000 gasLimit 21000 gasPrice 1000000 chainID 18928 Please waiting txHash 0x09b401884282f32f083d75ad537d1b461dc451c77a25e44f2d1fd859410561d0 Transaction Success block Number 4502702 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc QueryTx $ ./impawn --rpcaddr 39.100.97.xxx --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx This command explain: * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --txhash send transaction hash. * querytx Sub command append represent specify txhash to query. Output Log Connect url http://39.100.84.xxx:8545 current number 4501518 address 0x0000000000000000000000000000000000000000 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8","title":"Staking Guide"},{"location":"source/taiyuepublic/Staking-Guide/#reward","text":"The business module of TaiPubliChain is deflation. The staking reward wil deflate 20% every year. From March 30th 2020, the annumal reward will be 3,000,000, 2,400,000, 1,920,000, ...","title":"Reward"},{"location":"source/taiyuepublic/Staking-Guide/#validator","text":"Validators are the DPoS committee members to process transactions. The minimum amount to be validator is 20,000 TRUE. The recommended specifications for running a validator node is: - 4 cores CPU - 16G RAM - 200G disk space - 4Mpbs bandwidth - public ip address to participate the committee","title":"Validator"},{"location":"source/taiyuepublic/Staking-Guide/#locked-time","text":"Assets will freeze after staking. And 25,000 fast blocks(about 15 days) need to unfreeze.","title":"Locked Time"},{"location":"source/taiyuepublic/Staking-Guide/#stake-guide","text":"Stake/withdraw option is based a system contract, everyone can call the contract functions to do these actions. And the node provide some RPC APIs to request the stake and reward information. We also provide a staking CLI to stake easily.","title":"Stake Guide"},{"location":"source/taiyuepublic/Staking-Guide/#staking-contract","text":"TaiPubliChain staking contract is deployed at address: 0x000000000000000000747275657374616b696E67 Definitions of all contract functions here","title":"Staking Contract"},{"location":"source/taiyuepublic/Staking-Guide/#rpc-and-sdk","text":"The RPC APIs definitions are here The java sdk trueweb3j provides the staking encode functions","title":"RPC and SDK"},{"location":"source/taiyuepublic/Staking-Guide/#building-cli","text":"TrueChain Staking CLI is a tool, which can call deposit contract participate in POS. See this page for more information.","title":"Building CLI"},{"location":"source/taiyuepublic/Staking-Guide/#building-truechain","text":"Follow the appropriate link below to find installation instructions for your platform. * Installation Instructions for Mac OS X * Installation Instructions for Windows * Installation Instructions for Linux/Unix * Ubuntu * Centos * Usage instructions for Docker * Docker","title":"Building-Truechain"},{"location":"source/taiyuepublic/Staking-Guide/#prepare","text":"taipublic support rpc ./taipublic --rpc --rpcaddr 127.0.01 --rpcport 8545 --rpcapi \"etrue,net,web3,impawn\" console gtaipublic will listen all ip address when giving --rpcaddr 0.0.0.0 , you can give the exact ip address that want to connect, or --rpcaddr 127.0.01 only allow running on the host to connect taipublic . taipublic support BFT ./taipublic --bftip 39.98.251.xx console bftip must be public ip , open firewall port 8545( rpc ),30310( bftport ),30311( bftport2 ) start normal params $ ./taipublic --datadir data --bftip \"39.98.251.xxx\" --rpc --rpcaddr \"127.0.0.1\" --rpcapi \"eth,etrue,net,web3,impawn\" console","title":"PrePare"},{"location":"source/taiyuepublic/Staking-Guide/#building-the-source","text":"Building impawn requires both a Go and a C compiler. Once the dependencies are installed, run cd truechain-engineering-code/cmd/impawn go build -o impawn main.go query_stake.go impawn.go","title":"Building the source"},{"location":"source/taiyuepublic/Staking-Guide/#staking-cli","text":"The process of TaiPublicChain Staking-ClI is divided into three parts. First, on the premise of ensuring the balance of the account, Launch a Impawn transaction, only if the amount of deposit( value ) is greater than 2W true can participate in the election of the committee. If you ready to withdraw from the committee's POS consensus next epoch, Launch a Cancel transaction in the current epoch. After waiting for 15 days, we need to actively launch Withdraw transaction. The extracted true will be immediately transferred to the specified account. Since Impawn needs to be greater than 2W which can invoked successfully, Append can be used if the impawn amount is less than 2W. Update fee can invoke UpdateFee Update pk can invoke UpdatePK Query balance or reward info use QueryReward","title":"Staking-CLI"},{"location":"source/taiyuepublic/Staking-Guide/#impawn","text":"$ tree . \u251c\u2500\u2500 impawn \u251c\u2500\u2500 impawn.go \u251c\u2500\u2500 main.go \u251c\u2500\u2500 query_stake.go \u251c\u2500\u2500 README.md \u2514\u2500\u2500 UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.*** --rpcport 8545 --value 20000 --fee 5000 This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value deposit >=20000 true to staking address, the validator can be selected as a candidate. * --fee fee(0-10000) set to 5000, smaller the value, lower benefit to the delegate, higher the value, higher benefit, the rate = fee / 10000. Output Log* ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97. :8545 current number 4467994 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779439190971997852e+07 'true current Total Stake 700401 Fee 5000 Pubkey 04f7a84c02fd576545c102d73cee71097813c255d5791cdcb600b82aedbf6f05dfda801e88985b3bfecc21592a7211ad4b551071f0bed8b357ea949e53fc9c5e8c value 20000000000000000000000 TX data nonce 17 transfer value 20000000000000000000000 gasLimit 826392 gasPrice 1000000 chainID 18928 Please waiting txHash 0xf1532026e8ffe44a1ea85c5e0772ffb7e6210d2f4bceed15c07078ddb48043a4 Transaction Success block Number 4467996 block txs 3 blockhash 0xab6af69d64ff17affa2460a7bd39552463611c09eab2cf5a769889d25e5afb96 Staked 50000000000000000000000 wei = 20000 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true ### Cancel $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 cancel This command explain: * `--keystore` flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * `--rpcaddr` `--rpcport` flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * `--value` want cancel count true. * `cancel` withdraw must call cancel first, sub command cancel represent you want cancel 10 true to locked state, next epoch can withdraw. . **Output Log** ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468624 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 19 transfer value 0 gasLimit 821784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x1bd50e4755cac0b2ae69f080d645c7a78a24c51ad31570f6afcc6f853a820b10 Transaction Success block Number 4468626 block txs 3 blockhash 0x0248f6467a7d50962115a210e815737bb1d0be5012adc96212cf9b458dc65f05 Staked 4999000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true","title":"Impawn"},{"location":"source/taiyuepublic/Staking-Guide/#querystaking","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 querystaking This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * querystaking print in staking count( Staked ), already cancel count( Locked ), can withdraw count( Unlocked ).. * Print withdraw height , after this, you can call withdraw, if lock equal false , can instant withdraw . * If Unlocked not equal zero, can instant withdraw print amount. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Staked 49990000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true Your can withdraw after height 4471006 count value 10 true index 0 lock true","title":"QueryStaking"},{"location":"source/taiyuepublic/Staking-Guide/#withdraw","text":"if you use query staking find Unlocked not equal zero. Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 10000000000000000000 wei = 10 true use this command $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 withdraw This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value want withdraw count true. * withdraw Sub command append represent you want withdraw 10 true to your address . Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4501013 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779438190969483348e+07 'true current Total Stake 700402 TX data nonce 20 transfer value 0 gasLimit 861784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x659dbaf0a920aceed810647d3e2f113b508e8748dd82d2b0dae067f952214449 Transaction Success block Number 4501014 block txs 3 blockhash 0x177e1c2af3c6dc1eecc6139c1b438fde86cb5c30f015d611d0191af7e96230de Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true Your wallet balance is 1.7779448190968621564e+07 'true current Total Stake 700392","title":"Withdraw"},{"location":"source/taiyuepublic/Staking-Guide/#append","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 append This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --value want append count true. * append Sub command append represent you want c6uontinue staking after already having deposit. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4501430 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 22 transfer value 10000000000000000000 gasLimit 821272 gasPrice 1000000 chainID 18928 Please waiting txHash 0x01a4d6bb8c85113118b47e27373b92dab5914f8103d3a16e46b3b4a65d15bbd3 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8 Staked 11000000000000000000 wei = 11 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true","title":"Append"},{"location":"source/taiyuepublic/Staking-Guide/#updatefee","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --fee 10 updatefee This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --fee fee(0-10000) set to 5000, smaller the value, lower benefit to the delegate, higher the value, higher benefit, the rate = fee / 10000. * updatefee Sub command append represent only update validator fee(0-10000), which will influence delegator benefit. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4503733 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Fee 6000 TX data nonce 25 transfer value 0 gasLimit 821528 gasPrice 1000000 chainID 18928 Please waiting txHash 0x9ba1a83f8e4a074d311ef24993cc6a3baf82936c6b73f76b77eac95204bfd772 Transaction Success block Number 4503743 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc","title":"UpdateFee"},{"location":"source/taiyuepublic/Staking-Guide/#updatepk","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b updatepk This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b private key or use --pubkey + public key. * updatepk Sub command updatepk represent only update validator pk, committee communication identify. Output Log Connect url http://localhost:8545 current number 5048960 address 0xDaa07f97034916517afFF28b672A61B0027346a2 Pubkey 045772b765ed192fdd53dd4a579dc53e37682bd975001071ff232f8cdad05734cbbdded8d8fb758845d315115f012e136739f6f3e1e9654eff45b36cb06ce8f9f6 TX data nonce 9155 transfer value 0 gasLimit 2426136 gasPrice 1000000000 chainID 18928 Please waiting txHash 0xe157cbac55796b4a97dd28421fa1621edb562a5b95aadebe5d868879fe51e5e2 Transaction Success block Number 5048961 block txs 1 blockhash 0xf55332105a203d92df53fc5609e8465dbae5a0ef166e3548b1c25d5c4d6e473a Staked 100020000000000000000000 wei = 100020 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true","title":"UpdatePK"},{"location":"source/taiyuepublic/Staking-Guide/#queryreward","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 queryreward This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * queryreward print valid balance and lock balance, and every snail block your reward. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet valid balance is 11120.337165556650564 'true lock balance is 100000 'true queryRewardInfo [map[Address:0xa4ab123ab418197ab0b5e3c49269f5d530ef87f0 Amount:2.8086168529799127e+18]]","title":"QueryReward"},{"location":"source/taiyuepublic/Staking-Guide/#send","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send This command explain: * --keystore flag show load private key in UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx file. * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --address to address that you want send. * --value want transfer count true. * send Sub command append represent send normal transaction not contract,value is transfer value. Output Log Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4502701 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779429190966933964e+07 'true current Total Stake 700411 TX data nonce 23 transfer value 10000000000000000000 gasLimit 21000 gasPrice 1000000 chainID 18928 Please waiting txHash 0x09b401884282f32f083d75ad537d1b461dc451c77a25e44f2d1fd859410561d0 Transaction Success block Number 4502702 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc","title":"Send"},{"location":"source/taiyuepublic/Staking-Guide/#querytx","text":"$ ./impawn --rpcaddr 39.100.97.xxx --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx This command explain: * --rpcaddr --rpcport flag show connect node ip + port,this node should you run validator node, because of it will use your local bft pk to election. * --txhash send transaction hash. * querytx Sub command append represent specify txhash to query. Output Log Connect url http://39.100.84.xxx:8545 current number 4501518 address 0x0000000000000000000000000000000000000000 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8","title":"QueryTx"},{"location":"source/taiyuepublic/Staking-Guide_CN/","text":"DPoS\u59d4\u5458\u4f1a\u8282\u70b9\u53c2\u4e0e\u6559\u7a0b \u7f16\u8bd1Taipublic \u6839\u636e\u5e73\u53f0\u5728\u4e0b\u9762\u94fe\u63a5\u4e2d\u9009\u62e9\u5b89\u88c5\u6307\u5bfc\u3002 Mac OS X\u5b89\u88c5\u8bf4\u660e Windows\u5b89\u88c5\u8bf4\u660e Linux/Unix\u7684\u5b89\u88c5\u8bf4\u660e Ubuntu Centos Docker\u7684\u4f7f\u7528\u8bf4\u660e Docker \u6216\u8005\u76f4\u63a5\u4e0b\u8f7d \u5bf9\u5e94\u5e73\u53f0\u7248\u672c \u7f16\u8bd1Impawn-CLI taipublic Impawn CLI \u662f\u4e00\u4e2a\u53ef\u4ee5\u8c03\u7528\u8d28\u62bc\u5408\u7ea6\u53c2\u4e0epos\u59d4\u5458\u4f1a\u9009\u4e3e\u7684\u5de5\u5177\uff0c\u63d0\u4f9b\u4e86\u8d28\u62bc\uff0c\u8ffd\u52a0\uff0c\u66f4\u65b0fee\uff0c\u8d4e\u56de\uff0c\u63d0\u53d6\u548c\u67e5\u8be2\u65b9\u6cd5\u3002 \u8be6\u60c5 . \u9a8c\u8bc1\u8282\u70b9\u914d\u7f6e 4 CPU RAM 16G Storage 200G SSD Public IP 4Mbps \u51c6\u5907 getrue \u652f\u6301 rpc ./taipublic --rpc --rpcaddr 127.0.01 --rpcport 8545 --rpcapi \"etrue,net,web3,impawn\" console \u53c2\u6570\u662f --rpcaddr 0.0.0.0 \uff0c getrue \u5c06\u76d1\u542c\u6240\u6709\u7684\u5730\u5740,\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u60f3\u8981\u8fde\u63a5\u7684\u5730\u5740\uff0c\u8bbe\u7f6e --rpcaddr 127.0.01 \u4ec5\u9700\u8981\u672c\u5730\u8fde\u63a5 getrue . taipublic \u652f\u6301 BFT ./taipublic --bftip 39.98.251.xx console bftip \u5fc5\u987b\u662f \u516c\u7f51ip , open \u9632\u706b\u5899 \u7aef\u53e3 8545( rpc ),30310( bftport ),30311( bftport2 ) \u5e38\u89c4\u542f\u52a8\u53c2\u6570 $ ./taipublic --datadir data --bftip \"39.98.251.xxx\" --rpc --rpcaddr \"127.0.0.1\" --rpcapi \"eth,etrue,net,web3,impawn\" console \u7f16\u8bd1\u6e90\u7801 \u7f16\u8bd1 impawn \u9700\u8981go\u548cc\u7f16\u8bd1\u5668\uff0c\u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4f9d\u8d56, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u3002 cd taipublicchain/cmd/impawn go build -o impawn main.go query_stake.go impawn.go \u8fd0\u884cCLI TaiPublic\u8d28\u62bc\u6d41\u7a0b\u5206\u4e3a3\u6b65\uff0c\u9996\u5148\u4fdd\u8bc1\u8d26\u6237\u6709\u4f59\u989d\u7684\u524d\u63d0\u4e0b\uff0c\u53d1\u8d77\u8d28\u62bc\u4ea4\u6613 impawn \uff0c\u8d28\u62bc\u91cf( value )\u8981\u5927\u4e8e2W true \u624d\u53ef\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009,\u5982\u679c \u4e0b\u5c4a\u51c6\u5907\u9000\u51fa\u59d4\u5458\u4f1aPOS\u5171\u8bc6\uff0c\u5728\u672c\u5c4a\u53d1\u8d77 cancel \u4ea4\u6613\uff0c\u7b49\u5f8515\u5929\u540e\uff0c\u9700\u8981 \u4e3b\u52a8 \u53d1\u8d77\u63d0\u53d6 withdraw \u4ea4\u6613\uff0c\u63d0\u53d6\u7684true\u4f1a\u7acb\u5373\u5230\u6307\u5b9a\u7684\u8d26\u6237\u3002 \u7531\u4e8e impawn \u9700\u8981\u5927\u4e8e2W\u624d\u53ef\u4ee5\u8c03\u7528\u6210\u529f\uff0c\u5982\u679c\u8d28\u62bc\u91cf\u5c0f\u4e8e2W\uff0c\u53ef\u4ee5\u4f7f\u7528 append \u66f4\u65b0Fee\u53ef\u4ee5\u8c03\u7528 \u66f4\u65b0Fee \u66f4\u65b0\u9a8c\u8bc1\u8005PK\u53ef\u4ee5\u8c03\u7528 \u66f4\u65b0PK \u4f7f\u7528 \u67e5\u8be2\u5956\u52b1 \u67e5\u8be2\u4f59\u989d\u548c\u5956\u52b1\u4fe1\u606f \u7ade\u9009\u8d28\u62bc $ tree . \u251c\u2500\u2500 impawn \u251c\u2500\u2500 impawn.go \u251c\u2500\u2500 main.go \u251c\u2500\u2500 query_stake.go \u251c\u2500\u2500 README.md \u2514\u2500\u2500 UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.*** --rpcport 8545 --value 20000 --fee 5000 \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u8d28\u62bc >=20000 true\u5230pos\u5730\u5740, \u9a8c\u8bc1\u8282\u70b9\u624d\u80fd\u6210\u4e3a\u5019\u9009\u59d4\u5458\u4f1a\u8282\u70b9. * --fee fee\u7684\u8303\u56f4\u662f(0-10000),\u503c\u8d8a\u5c0f\uff0c\u59d4\u6258\u8005\u5206\u914d\u7684\u6536\u76ca\u8d8a\u4f4e\uff0c\u503c\u8d8a\u5927\uff0c\u6536\u76ca\u8d8a\u9ad8, \u8d39\u7387\u7684\u516c\u5f0f\u4e3afee / 10000. \u8f93\u51fa\u65e5\u5fd7* ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97. :8545 current number 4467994 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779439190971997852e+07 'true current Total Stake 700401 Fee 5000 Pubkey 04f7a84c02fd576545c102d73cee71097813c255d5791cdcb600b82aedbf6f05dfda801e88985b3bfecc21592a7211ad4b551071f0bed8b357ea949e53fc9c5e8c value 20000000000000000000000 TX data nonce 17 transfer value 20000000000000000000000 gasLimit 826392 gasPrice 1000000 chainID 18928 Please waiting txHash 0xf1532026e8ffe44a1ea85c5e0772ffb7e6210d2f4bceed15c07078ddb48043a4 Transaction Success block Number 4467996 block txs 3 blockhash 0xab6af69d64ff17affa2460a7bd39552463611c09eab2cf5a769889d25e5afb96 Staked 20000000000000000000000 wei = 20000 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true ### \u8d4e\u56de $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 cancel \u547d\u4ee4\u89e3\u91ca: * `--keystore` \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * `--rpcaddr` `--rpcport` \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * `--value` \u60f3\u8981\u8d4e\u56detrue\u7684\u6570\u91cf. * `cancel` \u60f3\u8981\u63d0\u53d6true\uff0c\u9996\u5148\u8981\u5148\u8d4e\u56de(`cancel`), \u8fd9\u4e2a\u547d\u4ee4\u662f\u8981\u8d4e\u56de10\u4e2atrue\u5230\u9501\u5b9a\u72b6\u6001\uff0c\u53ef\u4ee5\u5728\u4e0b\u4e00\u5c4a\u5f00\u59cb\u63d0\u53d6(`withdraw`)\uff0c\u4e00\u822c\u662f15\u5929\u540e. **\u8f93\u51fa\u65e5\u5fd7** ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468624 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 19 transfer value 0 gasLimit 821784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x1bd50e4755cac0b2ae69f080d645c7a78a24c51ad31570f6afcc6f853a820b10 Transaction Success block Number 4468626 block txs 3 blockhash 0x0248f6467a7d50962115a210e815737bb1d0be5012adc96212cf9b458dc65f05 Staked 4999000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true \u67e5\u8be2\u63d0\u53d6\u9ad8\u5ea6 $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 querystaking \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * querystaking Staked \u5f53\u524d\u8d28\u62bc\u7684\u6570\u91cf, Locked \u8fdb\u5165\u9501\u5b9a\u72b6\u6001\u7684\u6570\u91cf(\u8c03\u7528 cancel \u540e\u8fdb\u5165\u8fd9\u4e2a\u72b6\u6001), Unlocked \u53ef\u4ee5\u7acb\u5373\u63d0\u53d6\u7684\u6570\u91cf. * \u6253\u5370 withdraw \u9ad8\u5ea6, \u8fd9\u4e2a\u9ad8\u5ea6\u540e\u53ef\u4ee5\u53d1\u63d0\u53d6\u4ea4\u6613, \u5982\u679c lock \u7b49\u4e8e false ,\u53ef\u4ee5\u7acb\u5373\u63d0\u53d6. * \u5982\u679c Unlocked \u4e0d\u7b49\u4e8e0, \u53ef\u4ee5\u7acb\u5373\u63d0\u53d6Unlocked\u6570\u91cf\u7684true. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Staked 49990000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true Your can withdraw after height 4471006 count value 10 true index 0 lock true \u63d0\u53d6 \u4f7f\u7528 query staking \u67e5\u8be2 Unlocked \u4e0d\u4e3a0. Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 10000000000000000000 wei = 10 true \u53ef\u4ee5\u63d0\u53d6\u8d4e\u56de\u7684true $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 withdraw \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u60f3\u8981\u63d0\u53d6true\u7684\u6570\u91cf. * withdraw \u5b50\u547d\u4ee4\u8868\u793a\u4e00\u7b14\u63d0\u53d6\u4ea4\u6613\u5230\u4f60\u7684\u5730\u5740. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4501013 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779438190969483348e+07 'true current Total Stake 700402 TX data nonce 20 transfer value 0 gasLimit 861784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x659dbaf0a920aceed810647d3e2f113b508e8748dd82d2b0dae067f952214449 Transaction Success block Number 4501014 block txs 3 blockhash 0x177e1c2af3c6dc1eecc6139c1b438fde86cb5c30f015d611d0191af7e96230de Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true Your wallet balance is 1.7779448190968621564e+07 'true current Total Stake 700392 \u8ffd\u52a0 $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 append \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u60f3\u8981\u8ffd\u52a0true\u7684\u91cf\uff0c\u4e0d\u4f1a\u66f4\u6539fee. * append \u5b50\u547d\u4ee4\u5df2\u7ecf\u8d28\u62bc\u8fc7\u8fd8\u8981\u7ee7\u7eed\u8d28\u62bc. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4501430 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 22 transfer value 10000000000000000000 gasLimit 821272 gasPrice 1000000 chainID 18928 Please waiting txHash 0x01a4d6bb8c85113118b47e27373b92dab5914f8103d3a16e46b3b4a65d15bbd3 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8 Staked 11000000000000000000 wei = 11 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true \u66f4\u65b0Fee $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --fee 10 updatefee \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --fee fee\u7684\u8303\u56f4\u662f(0-10000),\u503c\u8d8a\u5c0f\uff0c\u59d4\u6258\u8005\u5206\u914d\u7684\u6536\u76ca\u8d8a\u4f4e\uff0c\u503c\u8d8a\u5927\uff0c\u6536\u76ca\u8d8a\u9ad8, \u8d39\u7387\u7684\u516c\u5f0f\u4e3afee / 10000. * updatefee \u5b50\u547d\u4ee4\u66f4\u65b0\u9a8c\u8bc1\u8005\u7684fee(0-10000),\u4f1a\u6539\u53d8\u59d4\u6258\u8005\u7684\u6536\u76ca. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4503733 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Fee 6000 TX data nonce 25 transfer value 0 gasLimit 821528 gasPrice 1000000 chainID 18928 Please waiting txHash 0x9ba1a83f8e4a074d311ef24993cc6a3baf82936c6b73f76b77eac95204bfd772 Transaction Success block Number 4503743 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc \u66f4\u65b0PK $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b updatepk \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b \u79c1\u94a5\u6216\u4f7f\u7528 --pubkey \u52a0\u516c\u94a5. * updatepk \u5b50\u547d\u4ee4\u66f4\u65b0\u9a8c\u8bc1\u8005\u7684pk,\u59d4\u5458\u4f1a\u4e4b\u95f4\u901a\u4fe1\u7684\u6807\u8bc6. \u8f93\u51fa\u65e5\u5fd7 Connect url http://localhost:8545 current number 5048960 address 0xDaa07f97034916517afFF28b672A61B0027346a2 Pubkey 045772b765ed192fdd53dd4a579dc53e37682bd975001071ff232f8cdad05734cbbdded8d8fb758845d315115f012e136739f6f3e1e9654eff45b36cb06ce8f9f6 TX data nonce 9155 transfer value 0 gasLimit 2426136 gasPrice 1000000000 chainID 18928 Please waiting txHash 0xe157cbac55796b4a97dd28421fa1621edb562a5b95aadebe5d868879fe51e5e2 Transaction Success block Number 5048961 block txs 1 blockhash 0xf55332105a203d92df53fc5609e8465dbae5a0ef166e3548b1c25d5c4d6e473a Staked 100020000000000000000000 wei = 100020 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true \u67e5\u8be2\u5956\u52b1 $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 queryreward \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * queryreward \u6253\u5370\u53ef\u4f7f\u7528( valid )\u7684\u4f59\u989d\u548c\u9501\u5b9a( lock )\u7684\u4f59\u989d,\u6bcf\u4e00\u4e2a\u6162\u94fe\u5757\u7684\u5956\u52b1. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet valid balance is 11120.337165556650564 'true lock balance is 100000 'true queryRewardInfo [map[Address:0xa4ab123ab418197ab0b5e3c49269f5d530ef87f0 Amount:2.8086168529799127e+18]] \u8f6c\u8d26 $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --address \u5bf9\u65b9\u7684\u5730\u5740. * --value \u8f6c\u8d26true\u7684\u91cf. * send \u5b50\u547d\u4ee4\u53d1\u9001\u666e\u901a\u8f6c\u8d26\u4ea4\u6613. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4502701 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779429190966933964e+07 'true current Total Stake 700411 TX data nonce 23 transfer value 10000000000000000000 gasLimit 21000 gasPrice 1000000 chainID 18928 Please waiting txHash 0x09b401884282f32f083d75ad537d1b461dc451c77a25e44f2d1fd859410561d0 Transaction Success block Number 4502702 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc \u67e5\u8be2\u4ea4\u6613\u6267\u884c\u60c5\u51b5 $ ./impawn --rpcaddr 39.100.97.xxx --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx \u547d\u4ee4\u89e3\u91ca: * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port. * --txhash \u67e5\u8be2\u4ea4\u6613hash. * querytx \u5b50\u547d\u4ee4\u67e5\u8be2\u4ea4\u6613hash\u6267\u884c\u7ed3\u679c. \u8f93\u51fa\u65e5\u5fd7 Connect url http://39.100.84.xxx:8545 current number 4501518 address 0x0000000000000000000000000000000000000000 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8","title":"DPoS\u59d4\u5458\u4f1a\u8282\u70b9\u53c2\u4e0e\u6559\u7a0b"},{"location":"source/taiyuepublic/Staking-Guide_CN/#dpos","text":"","title":"DPoS\u59d4\u5458\u4f1a\u8282\u70b9\u53c2\u4e0e\u6559\u7a0b"},{"location":"source/taiyuepublic/Staking-Guide_CN/#taipublic","text":"\u6839\u636e\u5e73\u53f0\u5728\u4e0b\u9762\u94fe\u63a5\u4e2d\u9009\u62e9\u5b89\u88c5\u6307\u5bfc\u3002 Mac OS X\u5b89\u88c5\u8bf4\u660e Windows\u5b89\u88c5\u8bf4\u660e Linux/Unix\u7684\u5b89\u88c5\u8bf4\u660e Ubuntu Centos Docker\u7684\u4f7f\u7528\u8bf4\u660e Docker \u6216\u8005\u76f4\u63a5\u4e0b\u8f7d \u5bf9\u5e94\u5e73\u53f0\u7248\u672c","title":"\u7f16\u8bd1Taipublic"},{"location":"source/taiyuepublic/Staking-Guide_CN/#impawn-cli","text":"taipublic Impawn CLI \u662f\u4e00\u4e2a\u53ef\u4ee5\u8c03\u7528\u8d28\u62bc\u5408\u7ea6\u53c2\u4e0epos\u59d4\u5458\u4f1a\u9009\u4e3e\u7684\u5de5\u5177\uff0c\u63d0\u4f9b\u4e86\u8d28\u62bc\uff0c\u8ffd\u52a0\uff0c\u66f4\u65b0fee\uff0c\u8d4e\u56de\uff0c\u63d0\u53d6\u548c\u67e5\u8be2\u65b9\u6cd5\u3002 \u8be6\u60c5 .","title":"\u7f16\u8bd1Impawn-CLI"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_1","text":"4 CPU RAM 16G Storage 200G SSD Public IP 4Mbps","title":"\u9a8c\u8bc1\u8282\u70b9\u914d\u7f6e"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_2","text":"getrue \u652f\u6301 rpc ./taipublic --rpc --rpcaddr 127.0.01 --rpcport 8545 --rpcapi \"etrue,net,web3,impawn\" console \u53c2\u6570\u662f --rpcaddr 0.0.0.0 \uff0c getrue \u5c06\u76d1\u542c\u6240\u6709\u7684\u5730\u5740,\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u60f3\u8981\u8fde\u63a5\u7684\u5730\u5740\uff0c\u8bbe\u7f6e --rpcaddr 127.0.01 \u4ec5\u9700\u8981\u672c\u5730\u8fde\u63a5 getrue . taipublic \u652f\u6301 BFT ./taipublic --bftip 39.98.251.xx console bftip \u5fc5\u987b\u662f \u516c\u7f51ip , open \u9632\u706b\u5899 \u7aef\u53e3 8545( rpc ),30310( bftport ),30311( bftport2 ) \u5e38\u89c4\u542f\u52a8\u53c2\u6570 $ ./taipublic --datadir data --bftip \"39.98.251.xxx\" --rpc --rpcaddr \"127.0.0.1\" --rpcapi \"eth,etrue,net,web3,impawn\" console","title":"\u51c6\u5907"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_3","text":"\u7f16\u8bd1 impawn \u9700\u8981go\u548cc\u7f16\u8bd1\u5668\uff0c\u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4f9d\u8d56, \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u3002 cd taipublicchain/cmd/impawn go build -o impawn main.go query_stake.go impawn.go","title":"\u7f16\u8bd1\u6e90\u7801"},{"location":"source/taiyuepublic/Staking-Guide_CN/#cli","text":"TaiPublic\u8d28\u62bc\u6d41\u7a0b\u5206\u4e3a3\u6b65\uff0c\u9996\u5148\u4fdd\u8bc1\u8d26\u6237\u6709\u4f59\u989d\u7684\u524d\u63d0\u4e0b\uff0c\u53d1\u8d77\u8d28\u62bc\u4ea4\u6613 impawn \uff0c\u8d28\u62bc\u91cf( value )\u8981\u5927\u4e8e2W true \u624d\u53ef\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009,\u5982\u679c \u4e0b\u5c4a\u51c6\u5907\u9000\u51fa\u59d4\u5458\u4f1aPOS\u5171\u8bc6\uff0c\u5728\u672c\u5c4a\u53d1\u8d77 cancel \u4ea4\u6613\uff0c\u7b49\u5f8515\u5929\u540e\uff0c\u9700\u8981 \u4e3b\u52a8 \u53d1\u8d77\u63d0\u53d6 withdraw \u4ea4\u6613\uff0c\u63d0\u53d6\u7684true\u4f1a\u7acb\u5373\u5230\u6307\u5b9a\u7684\u8d26\u6237\u3002 \u7531\u4e8e impawn \u9700\u8981\u5927\u4e8e2W\u624d\u53ef\u4ee5\u8c03\u7528\u6210\u529f\uff0c\u5982\u679c\u8d28\u62bc\u91cf\u5c0f\u4e8e2W\uff0c\u53ef\u4ee5\u4f7f\u7528 append \u66f4\u65b0Fee\u53ef\u4ee5\u8c03\u7528 \u66f4\u65b0Fee \u66f4\u65b0\u9a8c\u8bc1\u8005PK\u53ef\u4ee5\u8c03\u7528 \u66f4\u65b0PK \u4f7f\u7528 \u67e5\u8be2\u5956\u52b1 \u67e5\u8be2\u4f59\u989d\u548c\u5956\u52b1\u4fe1\u606f","title":"\u8fd0\u884cCLI"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_4","text":"$ tree . \u251c\u2500\u2500 impawn \u251c\u2500\u2500 impawn.go \u251c\u2500\u2500 main.go \u251c\u2500\u2500 query_stake.go \u251c\u2500\u2500 README.md \u2514\u2500\u2500 UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.*** --rpcport 8545 --value 20000 --fee 5000 \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u8d28\u62bc >=20000 true\u5230pos\u5730\u5740, \u9a8c\u8bc1\u8282\u70b9\u624d\u80fd\u6210\u4e3a\u5019\u9009\u59d4\u5458\u4f1a\u8282\u70b9. * --fee fee\u7684\u8303\u56f4\u662f(0-10000),\u503c\u8d8a\u5c0f\uff0c\u59d4\u6258\u8005\u5206\u914d\u7684\u6536\u76ca\u8d8a\u4f4e\uff0c\u503c\u8d8a\u5927\uff0c\u6536\u76ca\u8d8a\u9ad8, \u8d39\u7387\u7684\u516c\u5f0f\u4e3afee / 10000. \u8f93\u51fa\u65e5\u5fd7* ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97. :8545 current number 4467994 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779439190971997852e+07 'true current Total Stake 700401 Fee 5000 Pubkey 04f7a84c02fd576545c102d73cee71097813c255d5791cdcb600b82aedbf6f05dfda801e88985b3bfecc21592a7211ad4b551071f0bed8b357ea949e53fc9c5e8c value 20000000000000000000000 TX data nonce 17 transfer value 20000000000000000000000 gasLimit 826392 gasPrice 1000000 chainID 18928 Please waiting txHash 0xf1532026e8ffe44a1ea85c5e0772ffb7e6210d2f4bceed15c07078ddb48043a4 Transaction Success block Number 4467996 block txs 3 blockhash 0xab6af69d64ff17affa2460a7bd39552463611c09eab2cf5a769889d25e5afb96 Staked 20000000000000000000000 wei = 20000 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true ### \u8d4e\u56de $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 cancel \u547d\u4ee4\u89e3\u91ca: * `--keystore` \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * `--rpcaddr` `--rpcport` \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * `--value` \u60f3\u8981\u8d4e\u56detrue\u7684\u6570\u91cf. * `cancel` \u60f3\u8981\u63d0\u53d6true\uff0c\u9996\u5148\u8981\u5148\u8d4e\u56de(`cancel`), \u8fd9\u4e2a\u547d\u4ee4\u662f\u8981\u8d4e\u56de10\u4e2atrue\u5230\u9501\u5b9a\u72b6\u6001\uff0c\u53ef\u4ee5\u5728\u4e0b\u4e00\u5c4a\u5f00\u59cb\u63d0\u53d6(`withdraw`)\uff0c\u4e00\u822c\u662f15\u5929\u540e. **\u8f93\u51fa\u65e5\u5fd7** ```shell Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468624 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 19 transfer value 0 gasLimit 821784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x1bd50e4755cac0b2ae69f080d645c7a78a24c51ad31570f6afcc6f853a820b10 Transaction Success block Number 4468626 block txs 3 blockhash 0x0248f6467a7d50962115a210e815737bb1d0be5012adc96212cf9b458dc65f05 Staked 4999000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true","title":"\u7ade\u9009\u8d28\u62bc"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_5","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 querystaking \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * querystaking Staked \u5f53\u524d\u8d28\u62bc\u7684\u6570\u91cf, Locked \u8fdb\u5165\u9501\u5b9a\u72b6\u6001\u7684\u6570\u91cf(\u8c03\u7528 cancel \u540e\u8fdb\u5165\u8fd9\u4e2a\u72b6\u6001), Unlocked \u53ef\u4ee5\u7acb\u5373\u63d0\u53d6\u7684\u6570\u91cf. * \u6253\u5370 withdraw \u9ad8\u5ea6, \u8fd9\u4e2a\u9ad8\u5ea6\u540e\u53ef\u4ee5\u53d1\u63d0\u53d6\u4ea4\u6613, \u5982\u679c lock \u7b49\u4e8e false ,\u53ef\u4ee5\u7acb\u5373\u63d0\u53d6. * \u5982\u679c Unlocked \u4e0d\u7b49\u4e8e0, \u53ef\u4ee5\u7acb\u5373\u63d0\u53d6Unlocked\u6570\u91cf\u7684true. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Staked 49990000000000000000000 wei = 49990 true Locked 10000000000000000000 wei = 10 true Unlocked 0 wei = 0 true Your can withdraw after height 4471006 count value 10 true index 0 lock true","title":"\u67e5\u8be2\u63d0\u53d6\u9ad8\u5ea6"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_6","text":"\u4f7f\u7528 query staking \u67e5\u8be2 Unlocked \u4e0d\u4e3a0. Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 10000000000000000000 wei = 10 true \u53ef\u4ee5\u63d0\u53d6\u8d4e\u56de\u7684true $ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 withdraw \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u60f3\u8981\u63d0\u53d6true\u7684\u6570\u91cf. * withdraw \u5b50\u547d\u4ee4\u8868\u793a\u4e00\u7b14\u63d0\u53d6\u4ea4\u6613\u5230\u4f60\u7684\u5730\u5740. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4501013 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779438190969483348e+07 'true current Total Stake 700402 TX data nonce 20 transfer value 0 gasLimit 861784 gasPrice 1000000 chainID 18928 Please waiting txHash 0x659dbaf0a920aceed810647d3e2f113b508e8748dd82d2b0dae067f952214449 Transaction Success block Number 4501014 block txs 3 blockhash 0x177e1c2af3c6dc1eecc6139c1b438fde86cb5c30f015d611d0191af7e96230de Staked 1000000000000000000 wei = 1 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true Your wallet balance is 1.7779448190968621564e+07 'true current Total Stake 700392","title":"\u63d0\u53d6"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_7","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 append \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --value \u60f3\u8981\u8ffd\u52a0true\u7684\u91cf\uff0c\u4e0d\u4f1a\u66f4\u6539fee. * append \u5b50\u547d\u4ee4\u5df2\u7ecf\u8d28\u62bc\u8fc7\u8fd8\u8981\u7ee7\u7eed\u8d28\u62bc. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4501430 address 0x7C357530174275Dd30E46319B89f71186256E4f7 TX data nonce 22 transfer value 10000000000000000000 gasLimit 821272 gasPrice 1000000 chainID 18928 Please waiting txHash 0x01a4d6bb8c85113118b47e27373b92dab5914f8103d3a16e46b3b4a65d15bbd3 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8 Staked 11000000000000000000 wei = 11 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true","title":"\u8ffd\u52a0"},{"location":"source/taiyuepublic/Staking-Guide_CN/#fee","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --fee 10 updatefee \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --fee fee\u7684\u8303\u56f4\u662f(0-10000),\u503c\u8d8a\u5c0f\uff0c\u59d4\u6258\u8005\u5206\u914d\u7684\u6536\u76ca\u8d8a\u4f4e\uff0c\u503c\u8d8a\u5927\uff0c\u6536\u76ca\u8d8a\u9ad8, \u8d39\u7387\u7684\u516c\u5f0f\u4e3afee / 10000. * updatefee \u5b50\u547d\u4ee4\u66f4\u65b0\u9a8c\u8bc1\u8005\u7684fee(0-10000),\u4f1a\u6539\u53d8\u59d4\u6258\u8005\u7684\u6536\u76ca. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--7c357530174275dd30e46319b89f71186256e4f7': Connect url http://39.100.84.72:8545 current number 4503733 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Fee 6000 TX data nonce 25 transfer value 0 gasLimit 821528 gasPrice 1000000 chainID 18928 Please waiting txHash 0x9ba1a83f8e4a074d311ef24993cc6a3baf82936c6b73f76b77eac95204bfd772 Transaction Success block Number 4503743 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc","title":"\u66f4\u65b0Fee"},{"location":"source/taiyuepublic/Staking-Guide_CN/#pk","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b updatepk \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --bftkey 647eeeb80193a47a02d31939af29efa006dbe6db45c8806af764c18b262bb90b \u79c1\u94a5\u6216\u4f7f\u7528 --pubkey \u52a0\u516c\u94a5. * updatepk \u5b50\u547d\u4ee4\u66f4\u65b0\u9a8c\u8bc1\u8005\u7684pk,\u59d4\u5458\u4f1a\u4e4b\u95f4\u901a\u4fe1\u7684\u6807\u8bc6. \u8f93\u51fa\u65e5\u5fd7 Connect url http://localhost:8545 current number 5048960 address 0xDaa07f97034916517afFF28b672A61B0027346a2 Pubkey 045772b765ed192fdd53dd4a579dc53e37682bd975001071ff232f8cdad05734cbbdded8d8fb758845d315115f012e136739f6f3e1e9654eff45b36cb06ce8f9f6 TX data nonce 9155 transfer value 0 gasLimit 2426136 gasPrice 1000000000 chainID 18928 Please waiting txHash 0xe157cbac55796b4a97dd28421fa1621edb562a5b95aadebe5d868879fe51e5e2 Transaction Success block Number 5048961 block txs 1 blockhash 0xf55332105a203d92df53fc5609e8465dbae5a0ef166e3548b1c25d5c4d6e473a Staked 100020000000000000000000 wei = 100020 true Locked 0 wei = 0 true Unlocked 0 wei = 0 true","title":"\u66f4\u65b0PK"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_8","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 queryreward \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * queryreward \u6253\u5370\u53ef\u4f7f\u7528( valid )\u7684\u4f59\u989d\u548c\u9501\u5b9a( lock )\u7684\u4f59\u989d,\u6bcf\u4e00\u4e2a\u6162\u94fe\u5757\u7684\u5956\u52b1. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxxx': Connect url http://39.100.97.xxx:8545 current number 4468689 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet valid balance is 11120.337165556650564 'true lock balance is 100000 'true queryRewardInfo [map[Address:0xa4ab123ab418197ab0b5e3c49269f5d530ef87f0 Amount:2.8086168529799127e+18]]","title":"\u67e5\u8be2\u5956\u52b1"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_9","text":"$ ./impawn --keystore UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx --rpcaddr 39.100.97.xxx --rpcport 8545 --value 10 --address 0x3f944d3f12e904e1A647E5FF9f531B8deE2346B2 send \u547d\u4ee4\u89e3\u91ca: * --keystore \u52a0\u8f7d\u79c1\u94a5\u4eceUTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx\u6587\u4ef6\u91cc\u9762. * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port,\u8fd9\u4e2a\u8282\u70b9\u5fc5\u987b\u662f\u4e00\u4e2a\u9a8c\u8bc1\u8005\u8282\u70b9, \u5c06\u4f7f\u7528\u672c\u5730\u7684bft pk\u53c2\u4e0e\u59d4\u5458\u4f1a\u7ade\u9009. * --address \u5bf9\u65b9\u7684\u5730\u5740. * --value \u8f6c\u8d26true\u7684\u91cf. * send \u5b50\u547d\u4ee4\u53d1\u9001\u666e\u901a\u8f6c\u8d26\u4ea4\u6613. \u8f93\u51fa\u65e5\u5fd7 Please enter the password for 'UTC--2018-09-07T07-45-16.954721700Z--xxxxxxxxxx': Connect url http://39.100.84.72:8545 current number 4502701 address 0x7C357530174275Dd30E46319B89f71186256E4f7 Your wallet balance is 1.7779429190966933964e+07 'true current Total Stake 700411 TX data nonce 23 transfer value 10000000000000000000 gasLimit 21000 gasPrice 1000000 chainID 18928 Please waiting txHash 0x09b401884282f32f083d75ad537d1b461dc451c77a25e44f2d1fd859410561d0 Transaction Success block Number 4502702 block txs 5 blockhash 0xc3a188dd5da8b47efd239cd0f47fb81ee576242c5c819830cb89fee397fe06fc","title":"\u8f6c\u8d26"},{"location":"source/taiyuepublic/Staking-Guide_CN/#_10","text":"$ ./impawn --rpcaddr 39.100.97.xxx --rpcport 8545 --txhash 0x40c78769add225421c45fa2e9dc206c1d9a03199f78c34644f3c0bf274f3066b querytx \u547d\u4ee4\u89e3\u91ca: * --rpcaddr --rpcport \u8fde\u63a5\u8282\u70b9\u7684ip + port. * --txhash \u67e5\u8be2\u4ea4\u6613hash. * querytx \u5b50\u547d\u4ee4\u67e5\u8be2\u4ea4\u6613hash\u6267\u884c\u7ed3\u679c. \u8f93\u51fa\u65e5\u5fd7 Connect url http://39.100.84.xxx:8545 current number 4501518 address 0x0000000000000000000000000000000000000000 Transaction Success block Number 4501432 block txs 1 blockhash 0xf78f0d87e4178e22effd6715999368df8af44c1fea08c401cbd2ed23a9d7ccb8","title":"\u67e5\u8be2\u4ea4\u6613\u6267\u884c\u60c5\u51b5"},{"location":"source/taiyuepublic/_Sidebar/","text":"TrueChain Developer's Platform Install and build Installing Truechain Developers' Guide Impawn CLI Interface Documentation Command Line Options Management API JSON RPC API Usage Managing Accounts Mining Staking Staking Contract Staking ABI Staking Guide Staking Guide\u4e2d\u6587","title":" Sidebar"},{"location":"source/taiyuepublic/_Sidebar/#install-and-build","text":"Installing Truechain Developers' Guide Impawn CLI","title":"Install and build"},{"location":"source/taiyuepublic/_Sidebar/#interface-documentation","text":"Command Line Options Management API JSON RPC API","title":"Interface Documentation"},{"location":"source/taiyuepublic/_Sidebar/#usage","text":"Managing Accounts Mining","title":"Usage"},{"location":"source/taiyuepublic/_Sidebar/#staking","text":"Staking Contract Staking ABI Staking Guide Staking Guide\u4e2d\u6587","title":"Staking"}]}